name: daft-publish

on:
  schedule:
  #        ┌───────────── minute (0 - 59)
  #        │  ┌───────────── hour (0 - 23)
  #        │  │ ┌───────────── day of the month (1 - 31)
  #        │  │ │ ┌───────────── month (1 - 12 or JAN-DEC)
  #        │  │ │ │ ┌───────────── day of the week (0 - 6 or SUN-SAT)
  #        │  │ │ │ │
  - cron: 0 5 * * *

  push:
    tags:
    - v*
  workflow_dispatch:
env:
  PYTHON_VERSION: 3.11
  DAFT_ANALYTICS_ENABLED: '0'
  UV_SYSTEM_PYTHON: 1

  IS_PUSH: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') && ( ! endsWith(github.ref, 'dev0')) }}
  IS_SCHEDULE_DISPATCH: ${{ github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' }}
  RUST_DAFT_PKG_BUILD_TYPE: ${{ (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') && ( ! endsWith(github.ref, 'dev0'))) && 'release' || 'nightly' }}

defaults:
  run:
    shell: bash

jobs:
  build-and-test:

    name: platform wheels for ${{ matrix.os }}-${{ matrix.compile_arch }}-lts=${{ matrix.lts }}
    runs-on: ${{ matrix.os }}-latest
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu, macos, windows]
        compile_arch: [x86_64, aarch64]
        lts: [0, 1] # LongTerm Support CPUs

        exclude:
        - os: windows
          compile_arch: aarch64
        - lts: 1
          compile_arch: aarch64

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
        fetch-depth: 0
    - uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        architecture: x64
    - run: pip install uv
    - run: uv pip install twine toml yq
    - run: python tools/patch_package_version.py
    - name: Patch name to daft-lts if LTS
      if: ${{ matrix.lts }}
      run: tomlq -i -t ".project.name = \"daft-lts\"" pyproject.toml

    - name: Configure RUSTFLAGS for x86
      if: ${{ (matrix.compile_arch == 'x86_64') }}
      run: |
        if [[ ${{ matrix.lts }} ]]; then
          echo "RUSTFLAGS=-C target-feature=+sse3,+ssse3,+sse4.1,+sse4.2,+popcnt,+cmpxchg16b" >> $GITHUB_ENV && \
          echo "CFLAGS=-msse3 -mssse3 -msse4.1 -msse4.2 -mpopcnt -mcx16" >> $GITHUB_ENV
        else
          echo "RUSTFLAGS=-C target-feature=+sse3,+ssse3,+sse4.1,+sse4.2,+popcnt,+cmpxchg16b,+avx,+avx2,+fma,+bmi1,+bmi2,+lzcnt,+pclmulqdq,+movbe -Z tune-cpu=skylake" >> $GITHUB_ENV && \
          echo "CFLAGS=-msse3 -mssse3 -msse4.1 -msse4.2 -mpopcnt -mcx16 -mavx -mavx2 -mfma -mbmi -mbmi2 -mlzcnt -mpclmul -mmovbe -mtune=skylake" >> $GITHUB_ENV
        fi

    - name: Build wheels - Mac and Windows x86
      if: ${{ ((matrix.os == 'macos') || (matrix.os == 'windows')) && (matrix.compile_arch == 'x86_64')  }}
      uses: messense/maturin-action@v1
      with:
        target: x86_64
        args: --profile release-lto --out dist
    - name: Build wheels - Linux x86
      if: ${{ (matrix.os == 'ubuntu') && (matrix.compile_arch == 'x86_64') }}
      uses: messense/maturin-action@v1
      with:
        target: x86_64
        manylinux: auto
        # only produce sdist for linux x86 to avoid multiple copies
        args: --profile release-lto --out dist --sdist
        before-script-linux: yum -y install perl-IPC-Cmd

    - name: Build wheels - Linux aarch64
      if: ${{ (matrix.os == 'ubuntu') && (matrix.compile_arch == 'aarch64') }}
      uses: messense/maturin-action@v1
      with:
        target: aarch64-unknown-linux-gnu
        manylinux: auto
        # GCC 4.8.5 in manylinux2014 container doesn't support c11 atomic. This caused issues with the `ring` crate that causes TLS to fail
        container: messense/manylinux_2_24-cross:aarch64
        args: --profile release-lto --out dist
        before-script-linux: export JEMALLOC_SYS_WITH_LG_PAGE=16

    - name: Build wheels - Mac aarch64
      if: ${{ (matrix.os == 'macos') && (matrix.compile_arch == 'aarch64')  }}
      uses: messense/maturin-action@v1
      with:
        target: aarch64
        manylinux: auto
        args: --profile release-lto --out dist
      env:
        RUSTFLAGS: -Ctarget-cpu=apple-m1
        CFLAGS: -mtune=apple-m1

    - name: Install and test built wheel - Linux and Mac x86_64
      if: ${{ (matrix.os == 'ubuntu') && (matrix.compile_arch == 'x86_64')  }}
      run: |
        uv pip install -r requirements-dev.txt dist/*-*x86_64*.whl --force-reinstall
        rm -rf daft
        pytest -v
      env:
        DAFT_RUNNER: native

    - name: Upload wheels
      uses: actions/upload-artifact@v4
      with:
        name: wheels-${{ matrix.os }}-${{ matrix.compile_arch }}-lts-${{ matrix.lts }}
        path: dist

    - name: Send Slack notification on failure
      uses: slackapi/slack-github-action@v2.0.0
      if: ${{ failure() && (github.ref == 'refs/heads/main') }}
      with:
        payload: |
          {
            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": ":rotating_light: Release: Building Wheels <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|workflow> *FAILED* :rotating_light:"
                }
              }
            ]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

  publish:
    name: Publish wheels to PYPI and Anaconda
    runs-on: ubuntu-latest
    environment:
      name: pypi
    permissions:
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing
    needs:
    - build-and-test
    steps:
    - uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        architecture: x64
    - run: pip install -U twine
    - uses: actions/download-artifact@v4
      with:
        pattern: wheels-*
        merge-multiple: true
        path: dist
    - run: ls -R ./dist
    - name: Publish package distributions to PyPI
      if: ${{ success() && (env.IS_PUSH == 'true') }}
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        skip-existing: true

    - uses: conda-incubator/setup-miniconda@v3
      with:
        # Really doesn't matter what version we upload with
        # just the version we test with
        python-version: '3.9'
        channels: conda-forge
        channel-priority: true

    - name: Install anaconda client
      shell: bash -el {0}
      run: conda install -q -y anaconda-client "urllib3<2.0"

    - name: Upload wheels to anaconda nightly
      if: ${{ success() && (((env.IS_SCHEDULE_DISPATCH == 'true') && (github.ref == 'refs/heads/main')) || env.IS_PUSH == 'true') }}
      shell: bash -el {0}
      env:
        DAFT_STAGING_UPLOAD_TOKEN: ${{ secrets.DAFT_STAGING_UPLOAD_TOKEN }}
        DAFT_NIGHTLY_UPLOAD_TOKEN: ${{ secrets.DAFT_NIGHTLY_UPLOAD_TOKEN }}
      run: |
        source ci/upload_wheels.sh
        set_upload_vars
        # trigger an upload to
        # https://anaconda.org/daft-nightly/getdaft
        # for cron jobs or "Run workflow" (restricted to main branch).
        # Tags will upload to
        # https://anaconda.org/daft/getdaft
        # The tokens were originally generated at anaconda.org
        upload_wheels

    - name: Send Slack notification on failure
      uses: slackapi/slack-github-action@v2.0.0
      if: failure()
      with:
        payload: |
          {
            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": ":rotating_light: Release: Uploading Wheels <${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|workflow> *FAILED* :rotating_light:"
                }
              }
            ]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
