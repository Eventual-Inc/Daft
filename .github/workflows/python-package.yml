# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: daft

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  # `workflow_dispatch` allows CodSpeed to trigger backtest
  # performance analysis in order to generate initial data.
  workflow_dispatch:

env:
  PYTHON_VERSION: 3.11
  DAFT_ANALYTICS_ENABLED: '0'
  UV_SYSTEM_PYTHON: 1

  IS_PUSH: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') && ( ! endsWith(github.ref, 'dev0')) }}
  IS_SCHEDULE_DISPATCH: ${{ github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' }}
  RUST_DAFT_PKG_BUILD_TYPE: ${{ (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') && ( ! endsWith(github.ref, 'dev0'))) && 'release' || 'nightly' }}

defaults:
  run:
    shell: bash

jobs:
  build-and-test:

    name: platform wheels for ${{ matrix.os }}-${{ matrix.compile_arch }}-lts=${{ matrix.lts }}
    runs-on: ${{ matrix.os }}-latest
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu, macos, windows]
        compile_arch: [x86_64, aarch64]
        lts: [0, 1] # LongTerm Support CPUs

        exclude:
        - os: windows
          compile_arch: aarch64
        - lts: 1
          compile_arch: aarch64

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
        fetch-depth: 0
    - uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        architecture: x64
    - run: pip install uv
    - run: uv pip install twine toml yq
    - run: python tools/patch_package_version.py
    - name: Patch name to daft-lts if LTS
      if: ${{ matrix.lts }}
      run: tomlq -i -t ".project.name = \"daft-lts\"" pyproject.toml

    - name: Configure RUSTFLAGS for x86
      if: ${{ (matrix.compile_arch == 'x86_64') }}
      run: |
        if [[ ${{ matrix.lts }} ]]; then
          echo "RUSTFLAGS=-C target-feature=+sse3,+ssse3,+sse4.1,+sse4.2,+popcnt,+cmpxchg16b" >> $GITHUB_ENV && \
          echo "CFLAGS=-msse3 -mssse3 -msse4.1 -msse4.2 -mpopcnt -mcx16" >> $GITHUB_ENV
        else
          echo "RUSTFLAGS=-C target-feature=+sse3,+ssse3,+sse4.1,+sse4.2,+popcnt,+cmpxchg16b,+avx,+avx2,+fma,+bmi1,+bmi2,+lzcnt,+pclmulqdq,+movbe -Z tune-cpu=skylake" >> $GITHUB_ENV && \
          echo "CFLAGS=-msse3 -mssse3 -msse4.1 -msse4.2 -mpopcnt -mcx16 -mavx -mavx2 -mfma -mbmi -mbmi2 -mlzcnt -mpclmul -mmovbe -mtune=skylake" >> $GITHUB_ENV
        fi

    - name: Build wheels - Mac and Windows x86
      if: ${{ ((matrix.os == 'macos') || (matrix.os == 'windows')) && (matrix.compile_arch == 'x86_64')  }}
      uses: messense/maturin-action@v1
      with:
        target: x86_64
        args: --profile release-lto --out dist
    - name: Build wheels - Linux x86
      if: ${{ (matrix.os == 'ubuntu') && (matrix.compile_arch == 'x86_64') }}
      uses: messense/maturin-action@v1
      with:
        target: x86_64
        manylinux: auto
        # only produce sdist for linux x86 to avoid multiple copies
        args: --profile release-lto --out dist --sdist
        before-script-linux: yum -y install perl-IPC-Cmd

    - name: Build wheels - Linux aarch64
      if: ${{ (matrix.os == 'ubuntu') && (matrix.compile_arch == 'aarch64') }}
      uses: messense/maturin-action@v1
      with:
        target: aarch64-unknown-linux-gnu
        manylinux: auto
        # GCC 4.8.5 in manylinux2014 container doesn't support c11 atomic. This caused issues with the `ring` crate that causes TLS to fail
        container: messense/manylinux_2_24-cross:aarch64
        args: --profile release-lto --out dist
        before-script-linux: export JEMALLOC_SYS_WITH_LG_PAGE=16

    - name: Build wheels - Mac aarch64
      if: ${{ (matrix.os == 'macos') && (matrix.compile_arch == 'aarch64')  }}
      uses: messense/maturin-action@v1
      with:
        target: aarch64
        manylinux: auto
        args: --profile release-lto --out dist
      env:
        RUSTFLAGS: -Ctarget-cpu=apple-m1
        CFLAGS: -mtune=apple-m1

    - name: Debug moto installation
      run: |
        which moto_server
        moto_server --version
        netstat -tulpn | grep 5000

    - name: Install and test built wheel - Linux and Mac x86_64
      if: ${{ (matrix.os == 'ubuntu') && (matrix.compile_arch == 'x86_64')  }}
      run: |
        uv pip install -r requirements-dev.txt dist/*-*x86_64*.whl --force-reinstall
        rm -rf daft
        pytest -v
      env:
        DAFT_RUNNER: native
