Search.setIndex({"docnames": ["10-min", "api_docs/configs", "api_docs/creation", "api_docs/dataframe", "api_docs/datatype", "api_docs/doc_gen/configuration_functions/daft.context.set_runner_py", "api_docs/doc_gen/configuration_functions/daft.context.set_runner_ray", "api_docs/doc_gen/configuration_functions/daft.execution_config_ctx", "api_docs/doc_gen/configuration_functions/daft.planning_config_ctx", "api_docs/doc_gen/configuration_functions/daft.set_execution_config", "api_docs/doc_gen/configuration_functions/daft.set_planning_config", "api_docs/doc_gen/dataframe_methods/daft.DataFrame", "api_docs/doc_gen/dataframe_methods/daft.DataFrame.__getitem__", "api_docs/doc_gen/dataframe_methods/daft.DataFrame.agg", "api_docs/doc_gen/dataframe_methods/daft.DataFrame.collect", "api_docs/doc_gen/dataframe_methods/daft.DataFrame.column_names", "api_docs/doc_gen/dataframe_methods/daft.DataFrame.concat", "api_docs/doc_gen/dataframe_methods/daft.DataFrame.count", "api_docs/doc_gen/dataframe_methods/daft.DataFrame.distinct", "api_docs/doc_gen/dataframe_methods/daft.DataFrame.exclude", "api_docs/doc_gen/dataframe_methods/daft.DataFrame.explain", "api_docs/doc_gen/dataframe_methods/daft.DataFrame.explode", "api_docs/doc_gen/dataframe_methods/daft.DataFrame.filter", "api_docs/doc_gen/dataframe_methods/daft.DataFrame.groupby", "api_docs/doc_gen/dataframe_methods/daft.DataFrame.into_partitions", "api_docs/doc_gen/dataframe_methods/daft.DataFrame.iter_partitions", "api_docs/doc_gen/dataframe_methods/daft.DataFrame.iter_rows", "api_docs/doc_gen/dataframe_methods/daft.DataFrame.join", "api_docs/doc_gen/dataframe_methods/daft.DataFrame.limit", "api_docs/doc_gen/dataframe_methods/daft.DataFrame.max", "api_docs/doc_gen/dataframe_methods/daft.DataFrame.mean", "api_docs/doc_gen/dataframe_methods/daft.DataFrame.melt", "api_docs/doc_gen/dataframe_methods/daft.DataFrame.min", "api_docs/doc_gen/dataframe_methods/daft.DataFrame.pivot", "api_docs/doc_gen/dataframe_methods/daft.DataFrame.repartition", "api_docs/doc_gen/dataframe_methods/daft.DataFrame.sample", "api_docs/doc_gen/dataframe_methods/daft.DataFrame.schema", "api_docs/doc_gen/dataframe_methods/daft.DataFrame.select", "api_docs/doc_gen/dataframe_methods/daft.DataFrame.show", "api_docs/doc_gen/dataframe_methods/daft.DataFrame.sort", "api_docs/doc_gen/dataframe_methods/daft.DataFrame.stddev", "api_docs/doc_gen/dataframe_methods/daft.DataFrame.sum", "api_docs/doc_gen/dataframe_methods/daft.DataFrame.to_arrow", "api_docs/doc_gen/dataframe_methods/daft.DataFrame.to_dask_dataframe", "api_docs/doc_gen/dataframe_methods/daft.DataFrame.to_pandas", "api_docs/doc_gen/dataframe_methods/daft.DataFrame.to_pydict", "api_docs/doc_gen/dataframe_methods/daft.DataFrame.to_pylist", "api_docs/doc_gen/dataframe_methods/daft.DataFrame.to_ray_dataset", "api_docs/doc_gen/dataframe_methods/daft.DataFrame.to_torch_iter_dataset", "api_docs/doc_gen/dataframe_methods/daft.DataFrame.to_torch_map_dataset", "api_docs/doc_gen/dataframe_methods/daft.DataFrame.transform", "api_docs/doc_gen/dataframe_methods/daft.DataFrame.unpivot", "api_docs/doc_gen/dataframe_methods/daft.DataFrame.where", "api_docs/doc_gen/dataframe_methods/daft.DataFrame.with_column", "api_docs/doc_gen/dataframe_methods/daft.DataFrame.with_columns", "api_docs/doc_gen/dataframe_methods/daft.DataFrame.write_csv", "api_docs/doc_gen/dataframe_methods/daft.DataFrame.write_deltalake", "api_docs/doc_gen/dataframe_methods/daft.DataFrame.write_iceberg", "api_docs/doc_gen/dataframe_methods/daft.DataFrame.write_parquet", "api_docs/doc_gen/expression_methods/daft.Expression.__abs__", "api_docs/doc_gen/expression_methods/daft.Expression.__add__", "api_docs/doc_gen/expression_methods/daft.Expression.__and__", "api_docs/doc_gen/expression_methods/daft.Expression.__eq__", "api_docs/doc_gen/expression_methods/daft.Expression.__ge__", "api_docs/doc_gen/expression_methods/daft.Expression.__gt__", "api_docs/doc_gen/expression_methods/daft.Expression.__invert__", "api_docs/doc_gen/expression_methods/daft.Expression.__le__", "api_docs/doc_gen/expression_methods/daft.Expression.__lshift__", "api_docs/doc_gen/expression_methods/daft.Expression.__lt__", "api_docs/doc_gen/expression_methods/daft.Expression.__mod__", "api_docs/doc_gen/expression_methods/daft.Expression.__mul__", "api_docs/doc_gen/expression_methods/daft.Expression.__ne__", "api_docs/doc_gen/expression_methods/daft.Expression.__or__", "api_docs/doc_gen/expression_methods/daft.Expression.__rshift__", "api_docs/doc_gen/expression_methods/daft.Expression.__sub__", "api_docs/doc_gen/expression_methods/daft.Expression.__truediv__", "api_docs/doc_gen/expression_methods/daft.Expression.agg_concat", "api_docs/doc_gen/expression_methods/daft.Expression.agg_list", "api_docs/doc_gen/expression_methods/daft.Expression.alias", "api_docs/doc_gen/expression_methods/daft.Expression.any_value", "api_docs/doc_gen/expression_methods/daft.Expression.apply", "api_docs/doc_gen/expression_methods/daft.Expression.approx_count_distinct", "api_docs/doc_gen/expression_methods/daft.Expression.approx_percentiles", "api_docs/doc_gen/expression_methods/daft.Expression.arccos", "api_docs/doc_gen/expression_methods/daft.Expression.arccosh", "api_docs/doc_gen/expression_methods/daft.Expression.arcsin", "api_docs/doc_gen/expression_methods/daft.Expression.arcsinh", "api_docs/doc_gen/expression_methods/daft.Expression.arctan", "api_docs/doc_gen/expression_methods/daft.Expression.arctan2", "api_docs/doc_gen/expression_methods/daft.Expression.arctanh", "api_docs/doc_gen/expression_methods/daft.Expression.between", "api_docs/doc_gen/expression_methods/daft.Expression.binary.concat", "api_docs/doc_gen/expression_methods/daft.Expression.binary.length", "api_docs/doc_gen/expression_methods/daft.Expression.binary.slice", "api_docs/doc_gen/expression_methods/daft.Expression.cast", "api_docs/doc_gen/expression_methods/daft.Expression.cbrt", "api_docs/doc_gen/expression_methods/daft.Expression.ceil", "api_docs/doc_gen/expression_methods/daft.Expression.clip", "api_docs/doc_gen/expression_methods/daft.Expression.cos", "api_docs/doc_gen/expression_methods/daft.Expression.cot", "api_docs/doc_gen/expression_methods/daft.Expression.count", "api_docs/doc_gen/expression_methods/daft.Expression.degrees", "api_docs/doc_gen/expression_methods/daft.Expression.dt.date", "api_docs/doc_gen/expression_methods/daft.Expression.dt.day", "api_docs/doc_gen/expression_methods/daft.Expression.dt.day_of_week", "api_docs/doc_gen/expression_methods/daft.Expression.dt.hour", "api_docs/doc_gen/expression_methods/daft.Expression.dt.minute", "api_docs/doc_gen/expression_methods/daft.Expression.dt.month", "api_docs/doc_gen/expression_methods/daft.Expression.dt.second", "api_docs/doc_gen/expression_methods/daft.Expression.dt.time", "api_docs/doc_gen/expression_methods/daft.Expression.dt.truncate", "api_docs/doc_gen/expression_methods/daft.Expression.dt.year", "api_docs/doc_gen/expression_methods/daft.Expression.embedding.cosine_distance", "api_docs/doc_gen/expression_methods/daft.Expression.eq_null_safe", "api_docs/doc_gen/expression_methods/daft.Expression.exp", "api_docs/doc_gen/expression_methods/daft.Expression.fill_null", "api_docs/doc_gen/expression_methods/daft.Expression.float.fill_nan", "api_docs/doc_gen/expression_methods/daft.Expression.float.is_inf", "api_docs/doc_gen/expression_methods/daft.Expression.float.is_nan", "api_docs/doc_gen/expression_methods/daft.Expression.float.not_nan", "api_docs/doc_gen/expression_methods/daft.Expression.floor", "api_docs/doc_gen/expression_methods/daft.Expression.hash", "api_docs/doc_gen/expression_methods/daft.Expression.if_else", "api_docs/doc_gen/expression_methods/daft.Expression.image.crop", "api_docs/doc_gen/expression_methods/daft.Expression.image.decode", "api_docs/doc_gen/expression_methods/daft.Expression.image.encode", "api_docs/doc_gen/expression_methods/daft.Expression.image.resize", "api_docs/doc_gen/expression_methods/daft.Expression.image.to_mode", "api_docs/doc_gen/expression_methods/daft.Expression.is_in", "api_docs/doc_gen/expression_methods/daft.Expression.is_null", "api_docs/doc_gen/expression_methods/daft.Expression.json.query", "api_docs/doc_gen/expression_methods/daft.Expression.list.chunk", "api_docs/doc_gen/expression_methods/daft.Expression.list.count", "api_docs/doc_gen/expression_methods/daft.Expression.list.get", "api_docs/doc_gen/expression_methods/daft.Expression.list.join", "api_docs/doc_gen/expression_methods/daft.Expression.list.length", "api_docs/doc_gen/expression_methods/daft.Expression.list.max", "api_docs/doc_gen/expression_methods/daft.Expression.list.mean", "api_docs/doc_gen/expression_methods/daft.Expression.list.min", "api_docs/doc_gen/expression_methods/daft.Expression.list.slice", "api_docs/doc_gen/expression_methods/daft.Expression.list.sort", "api_docs/doc_gen/expression_methods/daft.Expression.list.sum", "api_docs/doc_gen/expression_methods/daft.Expression.list.value_counts", "api_docs/doc_gen/expression_methods/daft.Expression.ln", "api_docs/doc_gen/expression_methods/daft.Expression.log", "api_docs/doc_gen/expression_methods/daft.Expression.log10", "api_docs/doc_gen/expression_methods/daft.Expression.log2", "api_docs/doc_gen/expression_methods/daft.Expression.map.get", "api_docs/doc_gen/expression_methods/daft.Expression.max", "api_docs/doc_gen/expression_methods/daft.Expression.mean", "api_docs/doc_gen/expression_methods/daft.Expression.min", "api_docs/doc_gen/expression_methods/daft.Expression.minhash", "api_docs/doc_gen/expression_methods/daft.Expression.not_null", "api_docs/doc_gen/expression_methods/daft.Expression.partitioning.days", "api_docs/doc_gen/expression_methods/daft.Expression.partitioning.hours", "api_docs/doc_gen/expression_methods/daft.Expression.partitioning.iceberg_bucket", "api_docs/doc_gen/expression_methods/daft.Expression.partitioning.iceberg_truncate", "api_docs/doc_gen/expression_methods/daft.Expression.partitioning.months", "api_docs/doc_gen/expression_methods/daft.Expression.partitioning.years", "api_docs/doc_gen/expression_methods/daft.Expression.radians", "api_docs/doc_gen/expression_methods/daft.Expression.round", "api_docs/doc_gen/expression_methods/daft.Expression.shift_left", "api_docs/doc_gen/expression_methods/daft.Expression.shift_right", "api_docs/doc_gen/expression_methods/daft.Expression.sign", "api_docs/doc_gen/expression_methods/daft.Expression.sin", "api_docs/doc_gen/expression_methods/daft.Expression.sqrt", "api_docs/doc_gen/expression_methods/daft.Expression.stddev", "api_docs/doc_gen/expression_methods/daft.Expression.str.capitalize", "api_docs/doc_gen/expression_methods/daft.Expression.str.concat", "api_docs/doc_gen/expression_methods/daft.Expression.str.contains", "api_docs/doc_gen/expression_methods/daft.Expression.str.count_matches", "api_docs/doc_gen/expression_methods/daft.Expression.str.endswith", "api_docs/doc_gen/expression_methods/daft.Expression.str.extract", "api_docs/doc_gen/expression_methods/daft.Expression.str.extract_all", "api_docs/doc_gen/expression_methods/daft.Expression.str.find", "api_docs/doc_gen/expression_methods/daft.Expression.str.ilike", "api_docs/doc_gen/expression_methods/daft.Expression.str.left", "api_docs/doc_gen/expression_methods/daft.Expression.str.length", "api_docs/doc_gen/expression_methods/daft.Expression.str.length_bytes", "api_docs/doc_gen/expression_methods/daft.Expression.str.like", "api_docs/doc_gen/expression_methods/daft.Expression.str.lower", "api_docs/doc_gen/expression_methods/daft.Expression.str.lpad", "api_docs/doc_gen/expression_methods/daft.Expression.str.lstrip", "api_docs/doc_gen/expression_methods/daft.Expression.str.match", "api_docs/doc_gen/expression_methods/daft.Expression.str.normalize", "api_docs/doc_gen/expression_methods/daft.Expression.str.repeat", "api_docs/doc_gen/expression_methods/daft.Expression.str.replace", "api_docs/doc_gen/expression_methods/daft.Expression.str.reverse", "api_docs/doc_gen/expression_methods/daft.Expression.str.right", "api_docs/doc_gen/expression_methods/daft.Expression.str.rpad", "api_docs/doc_gen/expression_methods/daft.Expression.str.rstrip", "api_docs/doc_gen/expression_methods/daft.Expression.str.split", "api_docs/doc_gen/expression_methods/daft.Expression.str.startswith", "api_docs/doc_gen/expression_methods/daft.Expression.str.substr", "api_docs/doc_gen/expression_methods/daft.Expression.str.to_date", "api_docs/doc_gen/expression_methods/daft.Expression.str.to_datetime", "api_docs/doc_gen/expression_methods/daft.Expression.str.tokenize_decode", "api_docs/doc_gen/expression_methods/daft.Expression.str.tokenize_encode", "api_docs/doc_gen/expression_methods/daft.Expression.str.upper", "api_docs/doc_gen/expression_methods/daft.Expression.struct.get", "api_docs/doc_gen/expression_methods/daft.Expression.sum", "api_docs/doc_gen/expression_methods/daft.Expression.tan", "api_docs/doc_gen/expression_methods/daft.Expression.url.download", "api_docs/doc_gen/expression_methods/daft.col", "api_docs/doc_gen/expression_methods/daft.lit", "api_docs/doc_gen/expression_methods/daft.to_struct", "api_docs/doc_gen/io_configs/daft.io.AzureConfig", "api_docs/doc_gen/io_configs/daft.io.GCSConfig", "api_docs/doc_gen/io_configs/daft.io.IOConfig", "api_docs/doc_gen/io_configs/daft.io.S3Config", "api_docs/doc_gen/io_configs/daft.io.S3Credentials", "api_docs/doc_gen/io_functions/daft.from_arrow", "api_docs/doc_gen/io_functions/daft.from_dask_dataframe", "api_docs/doc_gen/io_functions/daft.from_glob_path", "api_docs/doc_gen/io_functions/daft.from_pandas", "api_docs/doc_gen/io_functions/daft.from_pydict", "api_docs/doc_gen/io_functions/daft.from_pylist", "api_docs/doc_gen/io_functions/daft.from_ray_dataset", "api_docs/doc_gen/io_functions/daft.read_csv", "api_docs/doc_gen/io_functions/daft.read_deltalake", "api_docs/doc_gen/io_functions/daft.read_hudi", "api_docs/doc_gen/io_functions/daft.read_iceberg", "api_docs/doc_gen/io_functions/daft.read_json", "api_docs/doc_gen/io_functions/daft.read_lance", "api_docs/doc_gen/io_functions/daft.read_parquet", "api_docs/doc_gen/io_functions/daft.read_sql", "api_docs/doc_gen/misc/daft.ImageFormat", "api_docs/doc_gen/misc/daft.ImageMode", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.AzureConfig", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.GCSConfig", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.HTTPConfig", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.S3Config", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.abs", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.acos", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.acosh", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.array_to_string", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.asin", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.asinh", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.atan", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.atan2", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.atanh", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.avg", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.capitalize", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.ceil", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.clip", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.coalesce", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.concat", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.contains", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.cos", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.cot", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.count", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.count_distinct", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.count_matches", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.date", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.day", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.dayofweek", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.degrees", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.ends_with", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.exp", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.explode", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.fill_nan", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.find", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.floor", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.hash", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.hour", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.image_crop", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.image_decode", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.image_encode", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.image_resize", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.image_to_mode", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.is_inf", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.is_nan", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.json_query", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.left", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.length", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.length_bytes", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.list_chunk", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.list_count", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.list_join", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.list_max", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.list_mean", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.list_min", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.list_slice", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.list_sort", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.list_sum", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.ln", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.log", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.log10", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.log2", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.lower", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.lpad", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.lstrip", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.map_extract", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.map_get", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.max", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.mean", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.min", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.minhash", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.minute", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.month", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.normalize", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.not_nan", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.partitioning_days", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.partitioning_hours", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.partitioning_iceberg_bucket", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.partitioning_iceberg_truncate", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.partitioning_months", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.partitioning_years", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.radians", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.regexp_extract", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.regexp_extract_all", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.regexp_match", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.regexp_replace", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.regexp_split", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.repeat", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.reverse", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.right", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.round", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.rpad", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.rstrip", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.second", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.sign", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.sin", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.split", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.sqrt", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.starts_with", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.stddev", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.stddev_samp", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.struct_extract", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.struct_get", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.sum", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.tan", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.time", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.to_date", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.to_datetime", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.tokenize_decode", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.tokenize_encode", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.unnest", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.upper", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.url_download", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.url_upload", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.year", "api_docs/expressions", "api_docs/groupby", "api_docs/index", "api_docs/misc", "api_docs/schema", "api_docs/series", "api_docs/sql", "api_docs/udf", "faq/benchmarks", "faq/dataframe_comparison", "faq/index", "faq/technical_architecture", "faq/telemetry", "index", "install", "migration_guides/coming_from_dask", "migration_guides/index", "user_guide/aggregations", "user_guide/basic_concepts", "user_guide/dataframe-operations", "user_guide/datatypes", "user_guide/expressions", "user_guide/fotw/fotw-000-data-access", "user_guide/fotw/fotw-001-images", "user_guide/fotw/index", "user_guide/index", "user_guide/integrations", "user_guide/integrations/aws", "user_guide/integrations/delta_lake", "user_guide/integrations/hudi", "user_guide/integrations/huggingface", "user_guide/integrations/iceberg", "user_guide/integrations/microsoft-azure", "user_guide/integrations/ray", "user_guide/integrations/sql", "user_guide/integrations/unity-catalog", "user_guide/poweruser", "user_guide/poweruser/distributed-computing", "user_guide/poweruser/memory", "user_guide/poweruser/partitioning", "user_guide/read-and-write", "user_guide/sql", "user_guide/tutorials", "user_guide/udf"], "filenames": ["10-min.ipynb", "api_docs/configs.rst", "api_docs/creation.rst", "api_docs/dataframe.rst", "api_docs/datatype.rst", "api_docs/doc_gen/configuration_functions/daft.context.set_runner_py.rst", "api_docs/doc_gen/configuration_functions/daft.context.set_runner_ray.rst", "api_docs/doc_gen/configuration_functions/daft.execution_config_ctx.rst", "api_docs/doc_gen/configuration_functions/daft.planning_config_ctx.rst", "api_docs/doc_gen/configuration_functions/daft.set_execution_config.rst", "api_docs/doc_gen/configuration_functions/daft.set_planning_config.rst", "api_docs/doc_gen/dataframe_methods/daft.DataFrame.rst", "api_docs/doc_gen/dataframe_methods/daft.DataFrame.__getitem__.rst", "api_docs/doc_gen/dataframe_methods/daft.DataFrame.agg.rst", "api_docs/doc_gen/dataframe_methods/daft.DataFrame.collect.rst", "api_docs/doc_gen/dataframe_methods/daft.DataFrame.column_names.rst", "api_docs/doc_gen/dataframe_methods/daft.DataFrame.concat.rst", "api_docs/doc_gen/dataframe_methods/daft.DataFrame.count.rst", "api_docs/doc_gen/dataframe_methods/daft.DataFrame.distinct.rst", "api_docs/doc_gen/dataframe_methods/daft.DataFrame.exclude.rst", "api_docs/doc_gen/dataframe_methods/daft.DataFrame.explain.rst", "api_docs/doc_gen/dataframe_methods/daft.DataFrame.explode.rst", "api_docs/doc_gen/dataframe_methods/daft.DataFrame.filter.rst", "api_docs/doc_gen/dataframe_methods/daft.DataFrame.groupby.rst", "api_docs/doc_gen/dataframe_methods/daft.DataFrame.into_partitions.rst", "api_docs/doc_gen/dataframe_methods/daft.DataFrame.iter_partitions.rst", "api_docs/doc_gen/dataframe_methods/daft.DataFrame.iter_rows.rst", "api_docs/doc_gen/dataframe_methods/daft.DataFrame.join.rst", "api_docs/doc_gen/dataframe_methods/daft.DataFrame.limit.rst", "api_docs/doc_gen/dataframe_methods/daft.DataFrame.max.rst", "api_docs/doc_gen/dataframe_methods/daft.DataFrame.mean.rst", "api_docs/doc_gen/dataframe_methods/daft.DataFrame.melt.rst", "api_docs/doc_gen/dataframe_methods/daft.DataFrame.min.rst", "api_docs/doc_gen/dataframe_methods/daft.DataFrame.pivot.rst", "api_docs/doc_gen/dataframe_methods/daft.DataFrame.repartition.rst", "api_docs/doc_gen/dataframe_methods/daft.DataFrame.sample.rst", "api_docs/doc_gen/dataframe_methods/daft.DataFrame.schema.rst", "api_docs/doc_gen/dataframe_methods/daft.DataFrame.select.rst", "api_docs/doc_gen/dataframe_methods/daft.DataFrame.show.rst", "api_docs/doc_gen/dataframe_methods/daft.DataFrame.sort.rst", "api_docs/doc_gen/dataframe_methods/daft.DataFrame.stddev.rst", "api_docs/doc_gen/dataframe_methods/daft.DataFrame.sum.rst", "api_docs/doc_gen/dataframe_methods/daft.DataFrame.to_arrow.rst", "api_docs/doc_gen/dataframe_methods/daft.DataFrame.to_dask_dataframe.rst", "api_docs/doc_gen/dataframe_methods/daft.DataFrame.to_pandas.rst", "api_docs/doc_gen/dataframe_methods/daft.DataFrame.to_pydict.rst", "api_docs/doc_gen/dataframe_methods/daft.DataFrame.to_pylist.rst", "api_docs/doc_gen/dataframe_methods/daft.DataFrame.to_ray_dataset.rst", "api_docs/doc_gen/dataframe_methods/daft.DataFrame.to_torch_iter_dataset.rst", "api_docs/doc_gen/dataframe_methods/daft.DataFrame.to_torch_map_dataset.rst", "api_docs/doc_gen/dataframe_methods/daft.DataFrame.transform.rst", "api_docs/doc_gen/dataframe_methods/daft.DataFrame.unpivot.rst", "api_docs/doc_gen/dataframe_methods/daft.DataFrame.where.rst", "api_docs/doc_gen/dataframe_methods/daft.DataFrame.with_column.rst", "api_docs/doc_gen/dataframe_methods/daft.DataFrame.with_columns.rst", "api_docs/doc_gen/dataframe_methods/daft.DataFrame.write_csv.rst", "api_docs/doc_gen/dataframe_methods/daft.DataFrame.write_deltalake.rst", "api_docs/doc_gen/dataframe_methods/daft.DataFrame.write_iceberg.rst", "api_docs/doc_gen/dataframe_methods/daft.DataFrame.write_parquet.rst", "api_docs/doc_gen/expression_methods/daft.Expression.__abs__.rst", "api_docs/doc_gen/expression_methods/daft.Expression.__add__.rst", "api_docs/doc_gen/expression_methods/daft.Expression.__and__.rst", "api_docs/doc_gen/expression_methods/daft.Expression.__eq__.rst", "api_docs/doc_gen/expression_methods/daft.Expression.__ge__.rst", "api_docs/doc_gen/expression_methods/daft.Expression.__gt__.rst", "api_docs/doc_gen/expression_methods/daft.Expression.__invert__.rst", "api_docs/doc_gen/expression_methods/daft.Expression.__le__.rst", "api_docs/doc_gen/expression_methods/daft.Expression.__lshift__.rst", "api_docs/doc_gen/expression_methods/daft.Expression.__lt__.rst", "api_docs/doc_gen/expression_methods/daft.Expression.__mod__.rst", "api_docs/doc_gen/expression_methods/daft.Expression.__mul__.rst", "api_docs/doc_gen/expression_methods/daft.Expression.__ne__.rst", "api_docs/doc_gen/expression_methods/daft.Expression.__or__.rst", "api_docs/doc_gen/expression_methods/daft.Expression.__rshift__.rst", "api_docs/doc_gen/expression_methods/daft.Expression.__sub__.rst", "api_docs/doc_gen/expression_methods/daft.Expression.__truediv__.rst", "api_docs/doc_gen/expression_methods/daft.Expression.agg_concat.rst", "api_docs/doc_gen/expression_methods/daft.Expression.agg_list.rst", "api_docs/doc_gen/expression_methods/daft.Expression.alias.rst", "api_docs/doc_gen/expression_methods/daft.Expression.any_value.rst", "api_docs/doc_gen/expression_methods/daft.Expression.apply.rst", "api_docs/doc_gen/expression_methods/daft.Expression.approx_count_distinct.rst", "api_docs/doc_gen/expression_methods/daft.Expression.approx_percentiles.rst", "api_docs/doc_gen/expression_methods/daft.Expression.arccos.rst", "api_docs/doc_gen/expression_methods/daft.Expression.arccosh.rst", "api_docs/doc_gen/expression_methods/daft.Expression.arcsin.rst", "api_docs/doc_gen/expression_methods/daft.Expression.arcsinh.rst", "api_docs/doc_gen/expression_methods/daft.Expression.arctan.rst", "api_docs/doc_gen/expression_methods/daft.Expression.arctan2.rst", "api_docs/doc_gen/expression_methods/daft.Expression.arctanh.rst", "api_docs/doc_gen/expression_methods/daft.Expression.between.rst", "api_docs/doc_gen/expression_methods/daft.Expression.binary.concat.rst", "api_docs/doc_gen/expression_methods/daft.Expression.binary.length.rst", "api_docs/doc_gen/expression_methods/daft.Expression.binary.slice.rst", "api_docs/doc_gen/expression_methods/daft.Expression.cast.rst", "api_docs/doc_gen/expression_methods/daft.Expression.cbrt.rst", "api_docs/doc_gen/expression_methods/daft.Expression.ceil.rst", "api_docs/doc_gen/expression_methods/daft.Expression.clip.rst", "api_docs/doc_gen/expression_methods/daft.Expression.cos.rst", "api_docs/doc_gen/expression_methods/daft.Expression.cot.rst", "api_docs/doc_gen/expression_methods/daft.Expression.count.rst", "api_docs/doc_gen/expression_methods/daft.Expression.degrees.rst", "api_docs/doc_gen/expression_methods/daft.Expression.dt.date.rst", "api_docs/doc_gen/expression_methods/daft.Expression.dt.day.rst", "api_docs/doc_gen/expression_methods/daft.Expression.dt.day_of_week.rst", "api_docs/doc_gen/expression_methods/daft.Expression.dt.hour.rst", "api_docs/doc_gen/expression_methods/daft.Expression.dt.minute.rst", "api_docs/doc_gen/expression_methods/daft.Expression.dt.month.rst", "api_docs/doc_gen/expression_methods/daft.Expression.dt.second.rst", "api_docs/doc_gen/expression_methods/daft.Expression.dt.time.rst", "api_docs/doc_gen/expression_methods/daft.Expression.dt.truncate.rst", "api_docs/doc_gen/expression_methods/daft.Expression.dt.year.rst", "api_docs/doc_gen/expression_methods/daft.Expression.embedding.cosine_distance.rst", "api_docs/doc_gen/expression_methods/daft.Expression.eq_null_safe.rst", "api_docs/doc_gen/expression_methods/daft.Expression.exp.rst", "api_docs/doc_gen/expression_methods/daft.Expression.fill_null.rst", "api_docs/doc_gen/expression_methods/daft.Expression.float.fill_nan.rst", "api_docs/doc_gen/expression_methods/daft.Expression.float.is_inf.rst", "api_docs/doc_gen/expression_methods/daft.Expression.float.is_nan.rst", "api_docs/doc_gen/expression_methods/daft.Expression.float.not_nan.rst", "api_docs/doc_gen/expression_methods/daft.Expression.floor.rst", "api_docs/doc_gen/expression_methods/daft.Expression.hash.rst", "api_docs/doc_gen/expression_methods/daft.Expression.if_else.rst", "api_docs/doc_gen/expression_methods/daft.Expression.image.crop.rst", "api_docs/doc_gen/expression_methods/daft.Expression.image.decode.rst", "api_docs/doc_gen/expression_methods/daft.Expression.image.encode.rst", "api_docs/doc_gen/expression_methods/daft.Expression.image.resize.rst", "api_docs/doc_gen/expression_methods/daft.Expression.image.to_mode.rst", "api_docs/doc_gen/expression_methods/daft.Expression.is_in.rst", "api_docs/doc_gen/expression_methods/daft.Expression.is_null.rst", "api_docs/doc_gen/expression_methods/daft.Expression.json.query.rst", "api_docs/doc_gen/expression_methods/daft.Expression.list.chunk.rst", "api_docs/doc_gen/expression_methods/daft.Expression.list.count.rst", "api_docs/doc_gen/expression_methods/daft.Expression.list.get.rst", "api_docs/doc_gen/expression_methods/daft.Expression.list.join.rst", "api_docs/doc_gen/expression_methods/daft.Expression.list.length.rst", "api_docs/doc_gen/expression_methods/daft.Expression.list.max.rst", "api_docs/doc_gen/expression_methods/daft.Expression.list.mean.rst", "api_docs/doc_gen/expression_methods/daft.Expression.list.min.rst", "api_docs/doc_gen/expression_methods/daft.Expression.list.slice.rst", "api_docs/doc_gen/expression_methods/daft.Expression.list.sort.rst", "api_docs/doc_gen/expression_methods/daft.Expression.list.sum.rst", "api_docs/doc_gen/expression_methods/daft.Expression.list.value_counts.rst", "api_docs/doc_gen/expression_methods/daft.Expression.ln.rst", "api_docs/doc_gen/expression_methods/daft.Expression.log.rst", "api_docs/doc_gen/expression_methods/daft.Expression.log10.rst", "api_docs/doc_gen/expression_methods/daft.Expression.log2.rst", "api_docs/doc_gen/expression_methods/daft.Expression.map.get.rst", "api_docs/doc_gen/expression_methods/daft.Expression.max.rst", "api_docs/doc_gen/expression_methods/daft.Expression.mean.rst", "api_docs/doc_gen/expression_methods/daft.Expression.min.rst", "api_docs/doc_gen/expression_methods/daft.Expression.minhash.rst", "api_docs/doc_gen/expression_methods/daft.Expression.not_null.rst", "api_docs/doc_gen/expression_methods/daft.Expression.partitioning.days.rst", "api_docs/doc_gen/expression_methods/daft.Expression.partitioning.hours.rst", "api_docs/doc_gen/expression_methods/daft.Expression.partitioning.iceberg_bucket.rst", "api_docs/doc_gen/expression_methods/daft.Expression.partitioning.iceberg_truncate.rst", "api_docs/doc_gen/expression_methods/daft.Expression.partitioning.months.rst", "api_docs/doc_gen/expression_methods/daft.Expression.partitioning.years.rst", "api_docs/doc_gen/expression_methods/daft.Expression.radians.rst", "api_docs/doc_gen/expression_methods/daft.Expression.round.rst", "api_docs/doc_gen/expression_methods/daft.Expression.shift_left.rst", "api_docs/doc_gen/expression_methods/daft.Expression.shift_right.rst", "api_docs/doc_gen/expression_methods/daft.Expression.sign.rst", "api_docs/doc_gen/expression_methods/daft.Expression.sin.rst", "api_docs/doc_gen/expression_methods/daft.Expression.sqrt.rst", "api_docs/doc_gen/expression_methods/daft.Expression.stddev.rst", "api_docs/doc_gen/expression_methods/daft.Expression.str.capitalize.rst", "api_docs/doc_gen/expression_methods/daft.Expression.str.concat.rst", "api_docs/doc_gen/expression_methods/daft.Expression.str.contains.rst", "api_docs/doc_gen/expression_methods/daft.Expression.str.count_matches.rst", "api_docs/doc_gen/expression_methods/daft.Expression.str.endswith.rst", "api_docs/doc_gen/expression_methods/daft.Expression.str.extract.rst", "api_docs/doc_gen/expression_methods/daft.Expression.str.extract_all.rst", "api_docs/doc_gen/expression_methods/daft.Expression.str.find.rst", "api_docs/doc_gen/expression_methods/daft.Expression.str.ilike.rst", "api_docs/doc_gen/expression_methods/daft.Expression.str.left.rst", "api_docs/doc_gen/expression_methods/daft.Expression.str.length.rst", "api_docs/doc_gen/expression_methods/daft.Expression.str.length_bytes.rst", "api_docs/doc_gen/expression_methods/daft.Expression.str.like.rst", "api_docs/doc_gen/expression_methods/daft.Expression.str.lower.rst", "api_docs/doc_gen/expression_methods/daft.Expression.str.lpad.rst", "api_docs/doc_gen/expression_methods/daft.Expression.str.lstrip.rst", "api_docs/doc_gen/expression_methods/daft.Expression.str.match.rst", "api_docs/doc_gen/expression_methods/daft.Expression.str.normalize.rst", "api_docs/doc_gen/expression_methods/daft.Expression.str.repeat.rst", "api_docs/doc_gen/expression_methods/daft.Expression.str.replace.rst", "api_docs/doc_gen/expression_methods/daft.Expression.str.reverse.rst", "api_docs/doc_gen/expression_methods/daft.Expression.str.right.rst", "api_docs/doc_gen/expression_methods/daft.Expression.str.rpad.rst", "api_docs/doc_gen/expression_methods/daft.Expression.str.rstrip.rst", "api_docs/doc_gen/expression_methods/daft.Expression.str.split.rst", "api_docs/doc_gen/expression_methods/daft.Expression.str.startswith.rst", "api_docs/doc_gen/expression_methods/daft.Expression.str.substr.rst", "api_docs/doc_gen/expression_methods/daft.Expression.str.to_date.rst", "api_docs/doc_gen/expression_methods/daft.Expression.str.to_datetime.rst", "api_docs/doc_gen/expression_methods/daft.Expression.str.tokenize_decode.rst", "api_docs/doc_gen/expression_methods/daft.Expression.str.tokenize_encode.rst", "api_docs/doc_gen/expression_methods/daft.Expression.str.upper.rst", "api_docs/doc_gen/expression_methods/daft.Expression.struct.get.rst", "api_docs/doc_gen/expression_methods/daft.Expression.sum.rst", "api_docs/doc_gen/expression_methods/daft.Expression.tan.rst", "api_docs/doc_gen/expression_methods/daft.Expression.url.download.rst", "api_docs/doc_gen/expression_methods/daft.col.rst", "api_docs/doc_gen/expression_methods/daft.lit.rst", "api_docs/doc_gen/expression_methods/daft.to_struct.rst", "api_docs/doc_gen/io_configs/daft.io.AzureConfig.rst", "api_docs/doc_gen/io_configs/daft.io.GCSConfig.rst", "api_docs/doc_gen/io_configs/daft.io.IOConfig.rst", "api_docs/doc_gen/io_configs/daft.io.S3Config.rst", "api_docs/doc_gen/io_configs/daft.io.S3Credentials.rst", "api_docs/doc_gen/io_functions/daft.from_arrow.rst", "api_docs/doc_gen/io_functions/daft.from_dask_dataframe.rst", "api_docs/doc_gen/io_functions/daft.from_glob_path.rst", "api_docs/doc_gen/io_functions/daft.from_pandas.rst", "api_docs/doc_gen/io_functions/daft.from_pydict.rst", "api_docs/doc_gen/io_functions/daft.from_pylist.rst", "api_docs/doc_gen/io_functions/daft.from_ray_dataset.rst", "api_docs/doc_gen/io_functions/daft.read_csv.rst", "api_docs/doc_gen/io_functions/daft.read_deltalake.rst", "api_docs/doc_gen/io_functions/daft.read_hudi.rst", "api_docs/doc_gen/io_functions/daft.read_iceberg.rst", "api_docs/doc_gen/io_functions/daft.read_json.rst", "api_docs/doc_gen/io_functions/daft.read_lance.rst", "api_docs/doc_gen/io_functions/daft.read_parquet.rst", "api_docs/doc_gen/io_functions/daft.read_sql.rst", "api_docs/doc_gen/misc/daft.ImageFormat.rst", "api_docs/doc_gen/misc/daft.ImageMode.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.AzureConfig.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.GCSConfig.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.HTTPConfig.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.S3Config.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.abs.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.acos.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.acosh.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.array_to_string.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.asin.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.asinh.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.atan.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.atan2.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.atanh.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.avg.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.capitalize.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.ceil.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.clip.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.coalesce.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.concat.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.contains.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.cos.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.cot.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.count.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.count_distinct.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.count_matches.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.date.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.day.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.dayofweek.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.degrees.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.ends_with.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.exp.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.explode.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.fill_nan.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.find.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.floor.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.hash.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.hour.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.image_crop.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.image_decode.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.image_encode.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.image_resize.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.image_to_mode.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.is_inf.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.is_nan.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.json_query.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.left.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.length.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.length_bytes.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.list_chunk.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.list_count.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.list_join.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.list_max.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.list_mean.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.list_min.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.list_slice.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.list_sort.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.list_sum.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.ln.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.log.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.log10.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.log2.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.lower.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.lpad.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.lstrip.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.map_extract.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.map_get.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.max.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.mean.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.min.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.minhash.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.minute.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.month.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.normalize.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.not_nan.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.partitioning_days.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.partitioning_hours.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.partitioning_iceberg_bucket.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.partitioning_iceberg_truncate.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.partitioning_months.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.partitioning_years.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.radians.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.regexp_extract.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.regexp_extract_all.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.regexp_match.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.regexp_replace.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.regexp_split.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.repeat.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.reverse.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.right.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.round.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.rpad.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.rstrip.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.second.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.sign.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.sin.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.split.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.sqrt.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.starts_with.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.stddev.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.stddev_samp.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.struct_extract.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.struct_get.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.sum.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.tan.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.time.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.to_date.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.to_datetime.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.tokenize_decode.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.tokenize_encode.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.unnest.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.upper.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.url_download.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.url_upload.rst", "api_docs/doc_gen/sql_funcs/daft.sql._sql_funcs.year.rst", "api_docs/expressions.rst", "api_docs/groupby.rst", "api_docs/index.rst", "api_docs/misc.rst", "api_docs/schema.rst", "api_docs/series.rst", "api_docs/sql.rst", "api_docs/udf.rst", "faq/benchmarks.rst", "faq/dataframe_comparison.rst", "faq/index.rst", "faq/technical_architecture.rst", "faq/telemetry.rst", "index.rst", "install.rst", "migration_guides/coming_from_dask.rst", "migration_guides/index.rst", "user_guide/aggregations.rst", "user_guide/basic_concepts.rst", "user_guide/dataframe-operations.rst", "user_guide/datatypes.rst", "user_guide/expressions.rst", "user_guide/fotw/fotw-000-data-access.ipynb", "user_guide/fotw/fotw-001-images.ipynb", "user_guide/fotw/index.rst", "user_guide/index.rst", "user_guide/integrations.rst", "user_guide/integrations/aws.rst", "user_guide/integrations/delta_lake.rst", "user_guide/integrations/hudi.rst", "user_guide/integrations/huggingface.rst", "user_guide/integrations/iceberg.rst", "user_guide/integrations/microsoft-azure.rst", "user_guide/integrations/ray.rst", "user_guide/integrations/sql.rst", "user_guide/integrations/unity-catalog.rst", "user_guide/poweruser.rst", "user_guide/poweruser/distributed-computing.rst", "user_guide/poweruser/memory.rst", "user_guide/poweruser/partitioning.rst", "user_guide/read-and-write.rst", "user_guide/sql.rst", "user_guide/tutorials.rst", "user_guide/udf.rst"], "titles": ["10 minutes Quickstart", "Configuration", "Dataframe Creation", "DataFrame", "DataTypes", "daft.context.set_runner_py", "daft.context.set_runner_ray", "daft.execution_config_ctx", "daft.planning_config_ctx", "daft.set_execution_config", "daft.set_planning_config", "daft.DataFrame", "daft.DataFrame.__getitem__", "daft.DataFrame.agg", "daft.DataFrame.collect", "daft.DataFrame.column_names", "daft.DataFrame.concat", "daft.DataFrame.count", "daft.DataFrame.distinct", "daft.DataFrame.exclude", "daft.DataFrame.explain", "daft.DataFrame.explode", "daft.DataFrame.filter", "daft.DataFrame.groupby", "daft.DataFrame.into_partitions", "daft.DataFrame.iter_partitions", "daft.DataFrame.iter_rows", "daft.DataFrame.join", "daft.DataFrame.limit", "daft.DataFrame.max", "daft.DataFrame.mean", "daft.DataFrame.melt", "daft.DataFrame.min", "daft.DataFrame.pivot", "daft.DataFrame.repartition", "daft.DataFrame.sample", "daft.DataFrame.schema", "daft.DataFrame.select", "daft.DataFrame.show", "daft.DataFrame.sort", "daft.DataFrame.stddev", "daft.DataFrame.sum", "daft.DataFrame.to_arrow", "daft.DataFrame.to_dask_dataframe", "daft.DataFrame.to_pandas", "daft.DataFrame.to_pydict", "daft.DataFrame.to_pylist", "daft.DataFrame.to_ray_dataset", "daft.DataFrame.to_torch_iter_dataset", "daft.DataFrame.to_torch_map_dataset", "daft.DataFrame.transform", "daft.DataFrame.unpivot", "daft.DataFrame.where", "daft.DataFrame.with_column", "daft.DataFrame.with_columns", "daft.DataFrame.write_csv", "daft.DataFrame.write_deltalake", "daft.DataFrame.write_iceberg", "daft.DataFrame.write_parquet", "daft.Expression.__abs__", "daft.Expression.__add__", "daft.Expression.__and__", "daft.Expression.__eq__", "daft.Expression.__ge__", "daft.Expression.__gt__", "daft.Expression.__invert__", "daft.Expression.__le__", "daft.Expression.__lshift__", "daft.Expression.__lt__", "daft.Expression.__mod__", "daft.Expression.__mul__", "daft.Expression.__ne__", "daft.Expression.__or__", "daft.Expression.__rshift__", "daft.Expression.__sub__", "daft.Expression.__truediv__", "daft.Expression.agg_concat", "daft.Expression.agg_list", "daft.Expression.alias", "daft.Expression.any_value", "daft.Expression.apply", "daft.Expression.approx_count_distinct", "daft.Expression.approx_percentiles", "daft.Expression.arccos", "daft.Expression.arccosh", "daft.Expression.arcsin", "daft.Expression.arcsinh", "daft.Expression.arctan", "daft.Expression.arctan2", "daft.Expression.arctanh", "daft.Expression.between", "daft.Expression.binary.concat", "daft.Expression.binary.length", "daft.Expression.binary.slice", "daft.Expression.cast", "daft.Expression.cbrt", "daft.Expression.ceil", "daft.Expression.clip", "daft.Expression.cos", "daft.Expression.cot", "daft.Expression.count", "daft.Expression.degrees", "daft.Expression.dt.date", "daft.Expression.dt.day", "daft.Expression.dt.day_of_week", "daft.Expression.dt.hour", "daft.Expression.dt.minute", "daft.Expression.dt.month", "daft.Expression.dt.second", "daft.Expression.dt.time", "daft.Expression.dt.truncate", "daft.Expression.dt.year", "daft.Expression.embedding.cosine_distance", "daft.Expression.eq_null_safe", "daft.Expression.exp", "daft.Expression.fill_null", "daft.Expression.float.fill_nan", "daft.Expression.float.is_inf", "daft.Expression.float.is_nan", "daft.Expression.float.not_nan", "daft.Expression.floor", "daft.Expression.hash", "daft.Expression.if_else", "daft.Expression.image.crop", "daft.Expression.image.decode", "daft.Expression.image.encode", "daft.Expression.image.resize", "daft.Expression.image.to_mode", "daft.Expression.is_in", "daft.Expression.is_null", "daft.Expression.json.query", "daft.Expression.list.chunk", "daft.Expression.list.count", "daft.Expression.list.get", "daft.Expression.list.join", "daft.Expression.list.length", "daft.Expression.list.max", "daft.Expression.list.mean", "daft.Expression.list.min", "daft.Expression.list.slice", "daft.Expression.list.sort", "daft.Expression.list.sum", "daft.Expression.list.value_counts", "daft.Expression.ln", "daft.Expression.log", "daft.Expression.log10", "daft.Expression.log2", "daft.Expression.map.get", "daft.Expression.max", "daft.Expression.mean", "daft.Expression.min", "daft.Expression.minhash", "daft.Expression.not_null", "daft.Expression.partitioning.days", "daft.Expression.partitioning.hours", "daft.Expression.partitioning.iceberg_bucket", "daft.Expression.partitioning.iceberg_truncate", "daft.Expression.partitioning.months", "daft.Expression.partitioning.years", "daft.Expression.radians", "daft.Expression.round", "daft.Expression.shift_left", "daft.Expression.shift_right", "daft.Expression.sign", "daft.Expression.sin", "daft.Expression.sqrt", "daft.Expression.stddev", "daft.Expression.str.capitalize", "daft.Expression.str.concat", "daft.Expression.str.contains", "daft.Expression.str.count_matches", "daft.Expression.str.endswith", "daft.Expression.str.extract", "daft.Expression.str.extract_all", "daft.Expression.str.find", "daft.Expression.str.ilike", "daft.Expression.str.left", "daft.Expression.str.length", "daft.Expression.str.length_bytes", "daft.Expression.str.like", "daft.Expression.str.lower", "daft.Expression.str.lpad", "daft.Expression.str.lstrip", "daft.Expression.str.match", "daft.Expression.str.normalize", "daft.Expression.str.repeat", "daft.Expression.str.replace", "daft.Expression.str.reverse", "daft.Expression.str.right", "daft.Expression.str.rpad", "daft.Expression.str.rstrip", "daft.Expression.str.split", "daft.Expression.str.startswith", "daft.Expression.str.substr", "daft.Expression.str.to_date", "daft.Expression.str.to_datetime", "daft.Expression.str.tokenize_decode", "daft.Expression.str.tokenize_encode", "daft.Expression.str.upper", "daft.Expression.struct.get", "daft.Expression.sum", "daft.Expression.tan", "daft.Expression.url.download", "daft.col", "daft.lit", "daft.to_struct", "daft.io.AzureConfig", "daft.io.GCSConfig", "daft.io.IOConfig", "daft.io.S3Config", "daft.io.S3Credentials", "daft.from_arrow", "daft.from_dask_dataframe", "daft.from_glob_path", "daft.from_pandas", "daft.from_pydict", "daft.from_pylist", "daft.from_ray_dataset", "daft.read_csv", "daft.read_deltalake", "daft.read_hudi", "daft.read_iceberg", "daft.read_json", "daft.read_lance", "daft.read_parquet", "daft.read_sql", "daft.ImageFormat", "daft.ImageMode", "AzureConfig", "GCSConfig", "HTTPConfig", "S3Config", "abs", "acos", "acosh", "array_to_string", "asin", "asinh", "atan", "atan2", "atanh", "avg", "capitalize", "ceil", "clip", "coalesce", "concat", "contains", "cos", "cot", "count", "count_distinct", "count_matches", "date", "day", "dayofweek", "degrees", "ends_with", "exp", "explode", "fill_nan", "find", "floor", "hash", "hour", "image_crop", "image_decode", "image_encode", "image_resize", "image_to_mode", "is_inf", "is_nan", "json_query", "left", "length", "length_bytes", "list_chunk", "list_count", "list_join", "list_max", "list_mean", "list_min", "list_slice", "list_sort", "list_sum", "ln", "log", "log10", "log2", "lower", "lpad", "lstrip", "map_extract", "map_get", "max", "mean", "min", "minhash", "minute", "month", "normalize", "not_nan", "partitioning_days", "partitioning_hours", "partitioning_iceberg_bucket", "partitioning_iceberg_truncate", "partitioning_months", "partitioning_years", "radians", "regexp_extract", "regexp_extract_all", "regexp_match", "regexp_replace", "regexp_split", "repeat", "reverse", "right", "round", "rpad", "rstrip", "second", "sign", "sin", "split", "sqrt", "starts_with", "stddev", "stddev_samp", "struct_extract", "struct_get", "sum", "tan", "time", "to_date", "to_datetime", "tokenize_decode", "tokenize_encode", "unnest", "upper", "url_download", "url_upload", "year", "Expressions", "GroupBy", "API Documentation", "Miscellaneous", "Schema", "Series", "SQL", "User Defined Functions (UDFs)", "Benchmarks", "Dataframe Comparison", "Frequently Asked Questions", "Technical Architecture", "Telemetry", "&lt;no title&gt;", "Installation", "Dask Migration Guide", "Migration Guides", "Aggregations and Grouping", "Basic Concepts", "DataFrame Operations", "Datatypes", "Expressions", "#000 - Data Access", "Multimodal 101: Images", "Feature of the Week", "Daft User Guide", "Integrations", "Amazon Web Services", "Delta Lake", "Apache Hudi", "Huggingface Datasets", "Apache Iceberg", "Microsoft Azure", "Ray", "SQL", "Unity Catalog", "The Daft Poweruser", "Distributed Computing", "Managing Memory Usage", "Partitioning", "Reading/Writing Data", "SQL", "Tutorials", "User-Defined Functions (UDF)"], "terms": {"run": [0, 1, 3, 9, 25, 26, 43, 47, 57, 80, 151, 202, 212, 213, 217, 219, 224, 343, 347, 348, 349, 350, 351, 353, 356, 357, 359, 363, 365, 367, 375, 379, 380, 381, 385], "thi": [0, 4, 5, 6, 9, 11, 13, 14, 15, 17, 19, 20, 24, 25, 26, 27, 33, 34, 38, 39, 42, 43, 44, 45, 46, 47, 48, 49, 52, 55, 56, 57, 58, 73, 80, 82, 117, 118, 119, 124, 130, 139, 142, 162, 168, 170, 173, 197, 206, 207, 209, 212, 213, 217, 218, 219, 221, 222, 223, 224, 225, 241, 295, 342, 343, 347, 348, 349, 350, 351, 353, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 369, 370, 372, 373, 374, 375, 376, 379, 380, 381, 382, 383, 384, 385], "notebook": [0, 38, 351, 364, 365, 367], "googl": [0, 207, 229, 363, 364, 376, 384], "colab": [0, 376, 384], "you": [0, 16, 17, 26, 27, 33, 34, 39, 48, 49, 52, 202, 206, 207, 223, 225, 266, 342, 343, 348, 349, 350, 351, 356, 357, 359, 360, 361, 362, 363, 364, 365, 367, 369, 370, 372, 374, 375, 376, 377, 379, 380, 381, 382, 383, 385], "can": [0, 4, 5, 6, 9, 27, 39, 43, 47, 52, 57, 82, 91, 124, 186, 202, 207, 212, 217, 219, 221, 224, 225, 227, 266, 342, 343, 347, 348, 349, 350, 351, 353, 357, 359, 360, 361, 362, 363, 364, 365, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 385], "yourself": [0, 151, 363, 364, 376], "short": [0, 354, 370, 371], "introduct": 0, "all": [0, 4, 6, 11, 17, 19, 21, 51, 53, 54, 82, 93, 100, 132, 141, 151, 173, 180, 184, 186, 193, 198, 209, 215, 310, 312, 342, 347, 350, 353, 356, 357, 360, 361, 362, 363, 364, 365, 367, 370, 371, 372, 373, 376, 377, 381, 383, 385], "main": [0, 350, 351, 355, 356, 360, 364, 375, 385], "gear": 0, "toward": 0, "new": [0, 9, 17, 37, 53, 54, 55, 56, 57, 58, 78, 80, 82, 93, 94, 122, 312, 343, 349, 360, 361, 362, 363, 364, 365, 370, 381, 382, 383, 385], "distribut": [0, 47, 48, 49, 188, 191, 350, 351, 353, 356, 358, 360, 361, 368, 369, 370, 371, 373, 374, 375, 378, 381, 382], "engin": [0, 52, 175, 176, 179, 181, 185, 188, 189, 193, 350, 351, 360, 364, 376, 381], "built": [0, 196, 197, 348, 351, 353, 354, 356, 358, 364, 367, 380], "etl": [0, 351], "analyt": [0, 350, 351, 354, 370, 373], "ai": 0, "scale": [0, 4, 351, 357, 370, 371, 373, 375], "implement": [0, 4, 82, 353, 354, 357, 364, 373], "rust": [0, 82, 349, 351, 353, 356, 358, 360, 364, 376], "fast": [0, 82, 353, 357, 364, 376], "expos": [0, 351, 353, 360], "familiar": [0, 351, 357, 365, 383], "python": [0, 4, 5, 20, 25, 26, 38, 45, 46, 94, 168, 215, 219, 221, 223, 347, 348, 349, 350, 351, 353, 354, 358, 360, 363, 364, 367, 370, 373, 375, 380, 382, 383, 385], "api": [0, 348, 351, 353, 355, 357, 360, 362, 363, 365, 367, 370, 377, 382, 383], "friendli": 0, "In": [0, 9, 344, 347, 349, 350, 354, 357, 360, 361, 363, 364, 365, 369, 370, 374, 375, 376, 381, 382, 383, 385], "learn": [0, 351, 358, 365, 367, 382, 384], "featur": [0, 348, 351, 357, 364, 370, 371, 373, 376, 377, 382, 383], "set": [0, 5, 6, 7, 8, 9, 10, 25, 26, 56, 57, 196, 197, 204, 206, 207, 218, 219, 221, 224, 225, 344, 347, 350, 354, 357, 369, 374, 381], "apart": [0, 364], "from": [0, 4, 9, 12, 13, 16, 17, 19, 23, 25, 26, 27, 35, 37, 42, 43, 44, 45, 46, 51, 80, 93, 103, 104, 105, 106, 107, 108, 111, 113, 122, 133, 139, 142, 169, 171, 172, 173, 176, 182, 183, 188, 190, 191, 192, 193, 196, 197, 199, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 239, 241, 245, 250, 251, 253, 254, 255, 256, 264, 266, 272, 273, 282, 291, 292, 293, 294, 295, 296, 298, 299, 302, 303, 306, 307, 308, 316, 319, 320, 326, 327, 328, 329, 330, 332, 341, 343, 346, 347, 348, 350, 351, 353, 357, 360, 361, 363, 365, 368, 369, 370, 371, 372, 373, 374, 375, 376, 380, 381, 384, 385], "framework": [0, 350, 351, 357, 370, 375, 379], "like": [0, 113, 175, 207, 348, 349, 351, 357, 360, 361, 362, 363, 364, 365, 370, 373, 376, 377, 379, 380, 383], "panda": [0, 43, 44, 214, 347, 358, 360, 364, 370, 385], "pyspark": [0, 351], "dask": [0, 43, 212, 358], "rai": [0, 6, 9, 25, 43, 47, 212, 217, 219, 224, 239, 353, 356, 357, 367, 368, 369, 370, 371, 373, 374, 376, 379, 380, 385], "build": [0, 10, 225, 356, 357, 360, 362, 364, 380], "databas": [0, 9, 225, 357, 360, 371, 376], "dog": [0, 23, 343, 365], "owner": [0, 365], "fluffi": [0, 365], "companion": 0, "see": [0, 13, 21, 26, 44, 130, 155, 194, 195, 203, 225, 343, 350, 354, 355, 357, 359, 362, 364, 365, 370, 375, 376, 377, 379, 380, 381, 383], "how": [0, 9, 20, 25, 26, 27, 55, 56, 58, 349, 350, 353, 354, 357, 360, 361, 363, 364, 365, 366, 367, 370, 371, 372, 373, 375, 377, 378, 379, 380, 382, 383, 385], "download": [0, 10, 33, 196, 197, 218, 222, 224, 339, 363, 364, 382, 383, 385], "imag": [0, 4, 94, 213, 226, 227, 265, 266, 267, 268, 269, 344, 351, 357, 360, 361, 362, 363, 366, 377, 382, 383, 385], "url": [0, 10, 206, 208, 209, 223, 225, 339, 344, 351, 356, 357, 364, 369, 374, 376, 379, 383], "an": [0, 4, 5, 6, 9, 10, 12, 25, 26, 27, 33, 39, 43, 49, 52, 53, 56, 57, 62, 63, 64, 66, 67, 68, 71, 73, 91, 92, 94, 97, 123, 124, 125, 126, 131, 133, 139, 140, 141, 161, 162, 173, 174, 177, 178, 186, 196, 197, 202, 203, 204, 205, 207, 209, 210, 221, 225, 231, 248, 249, 256, 265, 266, 267, 268, 269, 282, 304, 308, 313, 322, 323, 331, 342, 343, 347, 350, 351, 353, 358, 359, 360, 361, 362, 363, 364, 365, 369, 370, 371, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 385], "classifi": 0, "call": [0, 1, 3, 6, 9, 10, 11, 14, 17, 38, 42, 44, 45, 55, 56, 57, 58, 343, 348, 349, 351, 353, 354, 357, 359, 360, 363, 365, 369, 373, 374, 375, 376, 381, 383, 385], "custom": [0, 56, 57, 206, 209, 219, 220, 221, 223, 349, 357, 360, 362, 385], "udf": [0, 80, 343, 344, 351, 355, 358, 362, 365, 367, 380], "within": [0, 4, 261, 343, 348, 360, 361, 369], "interact": [0, 1, 55, 56, 58, 219, 351, 353, 356, 357, 360], "interfac": [0, 353, 360, 367, 377], "woof": 0, "right": [0, 9, 27, 73, 162, 181, 189, 190, 244, 318, 351, 365, 385], "tool": [0, 357, 384], "ar": [0, 1, 3, 4, 9, 10, 11, 17, 21, 26, 27, 34, 43, 46, 49, 57, 82, 90, 110, 113, 117, 118, 119, 122, 128, 129, 142, 151, 152, 168, 170, 184, 202, 206, 209, 210, 219, 221, 342, 343, 347, 349, 350, 351, 353, 354, 356, 357, 359, 360, 361, 362, 363, 364, 365, 367, 370, 371, 372, 373, 374, 376, 377, 379, 380, 381, 382, 383, 385], "ani": [0, 6, 10, 20, 25, 26, 43, 45, 46, 50, 79, 90, 121, 128, 170, 206, 207, 209, 213, 216, 343, 347, 349, 350, 354, 357, 360, 361, 362, 364, 365, 369, 370, 373, 374, 375, 376, 377, 383, 385], "follow": [0, 94, 155, 156, 213, 342, 349, 350, 354, 357, 360, 364, 365, 366, 367, 371, 373, 379, 383, 385], "larg": [0, 350, 351, 357, 360, 361, 373, 374, 376, 380, 381, 382], "dataset": [0, 47, 48, 49, 217, 350, 357, 360, 364, 367, 368, 373, 376, 382], "don": [0, 46, 357, 365], "t": [0, 9, 46, 211, 349, 357, 360, 365, 370], "fit": [0, 367, 382], "memori": [0, 9, 25, 26, 46, 344, 349, 350, 360, 361, 362, 370, 376, 378, 379, 381], "would": [0, 17, 170, 357, 360, 362, 370, 372, 376, 383, 385], "benefit": [0, 80, 351, 357, 370], "parallel": [0, 25, 26, 202, 351, 353, 358, 360, 361, 368, 370, 371, 374, 379, 381, 382, 385], "json": [0, 207, 222, 272, 344, 351, 357, 360, 375, 376, 381, 382], "vector": [0, 351, 362, 370], "embed": [0, 4, 94, 344, 362, 384], "tensor": [0, 4, 94, 351, 357, 362, 365], "format": [0, 20, 48, 49, 51, 54, 110, 125, 194, 195, 196, 197, 219, 226, 267, 333, 334, 350, 351, 357, 360, 364, 365, 371, 372, 373, 382, 385], "support": [0, 4, 27, 39, 48, 52, 56, 130, 196, 197, 209, 213, 218, 223, 225, 226, 227, 340, 351, 353, 358, 361, 362, 363, 364, 365, 368, 369, 373, 374, 375, 380, 382, 383, 385], "skip": [0, 357, 365, 368, 371, 373], "through": [0, 347, 351, 357, 363, 364, 371, 383, 385], "automat": [0, 27, 197, 348, 357, 364, 369, 370, 372, 374, 376, 381, 383], "partit": [0, 9, 24, 25, 26, 28, 34, 55, 56, 58, 218, 222, 224, 225, 344, 350, 357, 360, 361, 364, 370, 371, 373, 376, 377, 378, 380, 382], "prune": [0, 351, 353, 357, 360, 370, 373, 377], "stat": [0, 370, 379], "base": [0, 93, 144, 145, 146, 174, 219, 224, 225, 286, 287, 288, 304, 347, 351, 357, 360, 361, 363, 364, 365, 374, 376, 381], "file": [0, 9, 20, 55, 58, 125, 196, 197, 207, 213, 218, 222, 224, 267, 344, 349, 350, 353, 357, 360, 363, 365, 370, 371, 372, 373, 374, 377, 381], "predic": [0, 22, 52, 351, 353, 357, 361, 370, 373], "comput": [0, 3, 18, 42, 44, 45, 48, 82, 112, 151, 304, 342, 347, 349, 350, 351, 353, 358, 361, 362, 363, 365, 373, 375, 378, 380, 382], "via": [0, 5, 6, 22, 52, 225, 359, 360, 364, 370, 372, 376], "read": [0, 1, 9, 206, 207, 209, 219, 221, 224, 225, 350, 351, 353, 357, 360, 365, 367, 368, 369, 374, 377, 380, 381], "about": [0, 36, 349, 354, 357, 360, 361, 362, 370, 375, 377, 379, 381, 382, 383], "compar": [0, 62, 63, 64, 66, 68, 71, 113, 350, 351, 363, 383], "our": [0, 349, 350, 353, 354, 355, 357, 362, 364, 365, 367, 370, 373, 376, 380, 381, 382, 385], "faq": 0, "let": [0, 219, 224, 225, 359, 360, 363, 364, 365, 370, 376, 383, 385], "jump": [0, 351, 367], "pip": [0, 223, 356, 364, 365, 370, 371, 375, 376, 377, 379], "getdaft": [0, 223, 356, 364, 370, 371, 375, 376, 377], "And": [0, 365], "some": [0, 4, 17, 19, 25, 26, 43, 195, 197, 206, 207, 208, 209, 210, 219, 220, 342, 348, 350, 351, 353, 356, 357, 359, 360, 361, 363, 364, 365, 367, 369, 370, 371, 373, 374, 380, 381, 382, 383, 385], "its": [0, 7, 8, 21, 151, 205, 347, 353, 357, 360, 363, 374, 376, 379, 381, 385], "class": [0, 4, 11, 82, 206, 207, 208, 209, 210, 226, 227, 343, 346, 347, 349, 351, 354, 359, 362, 365], "which": [0, 4, 6, 9, 10, 20, 33, 34, 36, 39, 47, 49, 57, 82, 123, 125, 132, 134, 135, 167, 168, 176, 180, 181, 182, 184, 185, 187, 188, 189, 190, 191, 194, 195, 198, 202, 206, 207, 209, 219, 221, 223, 224, 225, 343, 348, 349, 350, 351, 353, 354, 356, 360, 361, 362, 363, 364, 365, 369, 373, 375, 377, 379, 380, 381, 382, 383, 385], "we": [0, 27, 82, 211, 214, 347, 349, 350, 351, 353, 357, 359, 360, 361, 362, 363, 364, 365, 370, 372, 373, 374, 376, 378, 380, 382, 383, 385], "ll": [0, 364, 365, 383], "need": [0, 49, 342, 351, 353, 357, 360, 363, 364, 365, 367, 369, 372, 374, 377, 378, 380, 385], "later": 0, "datatyp": [0, 80, 94, 218, 222, 224, 225, 343, 344, 349, 355, 365, 367, 370, 371, 373, 385], "also": [0, 4, 17, 39, 43, 52, 82, 170, 196, 197, 225, 340, 348, 349, 350, 351, 353, 356, 357, 359, 360, 361, 362, 363, 364, 365, 369, 370, 372, 374, 376, 377, 380, 382, 383, 385], "refer": [0, 4, 203, 350, 357, 362, 367, 369, 374, 375, 381, 383], "construct": [0, 4, 10, 11, 347, 357, 381, 383], "To": [0, 206, 223, 349, 350, 354, 356, 359, 360, 362, 364, 371, 373, 375, 376, 377, 379, 381, 382, 385], "begin": [0, 25, 48], "dictionari": [0, 26, 45, 54, 215, 216, 360, 382], "datetim": [0, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 195, 210, 219, 253, 254, 255, 264, 298, 299, 302, 303, 306, 307, 320, 332, 334, 341, 363, 364, 376], "df": [0, 12, 13, 16, 17, 18, 19, 21, 23, 24, 25, 26, 28, 33, 34, 35, 37, 39, 40, 46, 50, 51, 52, 53, 54, 78, 80, 81, 82, 90, 91, 92, 93, 94, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 115, 116, 117, 118, 119, 122, 128, 129, 130, 140, 142, 147, 152, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 198, 203, 204, 205, 211, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 343, 348, 349, 351, 353, 357, 359, 360, 361, 363, 364, 365, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 385], "from_pydict": [0, 13, 17, 18, 19, 21, 23, 24, 25, 26, 27, 28, 33, 34, 35, 37, 39, 40, 46, 50, 51, 52, 53, 54, 78, 80, 81, 82, 90, 91, 92, 93, 94, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 115, 116, 117, 118, 119, 122, 128, 129, 130, 140, 142, 152, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 198, 203, 204, 205, 343, 348, 349, 359, 360, 361, 363, 365, 375, 379, 382, 383, 385], "integ": [0, 4, 61, 67, 72, 73, 94, 110, 151, 161, 162, 196, 197, 243, 262, 335, 336, 347, 362, 363, 364, 365, 376, 385], "1": [0, 9, 13, 17, 18, 19, 21, 23, 24, 25, 26, 27, 28, 33, 34, 35, 37, 39, 40, 46, 50, 52, 53, 54, 78, 80, 81, 82, 90, 93, 94, 102, 103, 105, 106, 108, 109, 110, 115, 116, 118, 119, 122, 128, 129, 130, 140, 147, 151, 152, 172, 173, 174, 191, 203, 204, 205, 209, 210, 211, 214, 215, 216, 241, 250, 251, 294, 295, 296, 321, 326, 327, 330, 343, 347, 348, 349, 350, 357, 359, 360, 361, 363, 364, 370, 371, 375, 376, 379, 382, 383, 385], "2": [0, 9, 13, 17, 18, 19, 21, 23, 24, 25, 26, 27, 28, 33, 34, 35, 37, 39, 40, 44, 46, 50, 52, 53, 54, 78, 80, 81, 82, 88, 90, 94, 102, 103, 104, 105, 106, 108, 110, 115, 116, 122, 128, 130, 140, 142, 144, 146, 147, 191, 193, 203, 204, 205, 211, 214, 215, 216, 250, 251, 288, 343, 348, 349, 350, 351, 359, 360, 361, 363, 364, 370, 375, 376, 379, 380, 381, 382, 383, 385], "3": [0, 9, 13, 17, 19, 21, 23, 24, 25, 26, 27, 28, 33, 34, 35, 37, 39, 46, 50, 52, 53, 54, 78, 80, 81, 82, 90, 92, 93, 94, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 115, 116, 118, 119, 122, 128, 129, 130, 140, 147, 152, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 203, 204, 205, 211, 214, 225, 241, 250, 251, 294, 295, 296, 326, 327, 330, 343, 348, 349, 350, 357, 360, 361, 363, 364, 370, 375, 376, 381, 382, 383], "4": [0, 13, 17, 18, 19, 23, 24, 28, 33, 34, 35, 37, 39, 46, 50, 52, 53, 54, 82, 90, 91, 104, 107, 111, 117, 122, 123, 140, 173, 176, 188, 193, 203, 205, 343, 348, 349, 350, 359, 360, 361, 363, 364, 370, 375, 376, 383], "float": [0, 4, 9, 35, 82, 94, 123, 129, 144, 152, 227, 344, 347, 349, 362, 363, 365, 370, 371, 373, 385], "5": [0, 9, 13, 17, 18, 19, 24, 28, 34, 35, 37, 39, 52, 54, 82, 94, 102, 103, 104, 105, 106, 107, 111, 178, 185, 203, 207, 219, 220, 221, 348, 349, 350, 360, 361, 363, 364, 371, 373, 375], "bool": [0, 4, 5, 6, 9, 20, 28, 35, 39, 44, 56, 140, 170, 184, 186, 191, 197, 206, 207, 209, 218, 219, 222, 224, 225, 348, 362, 370, 371, 373, 385], "true": [0, 4, 6, 20, 22, 39, 52, 75, 90, 113, 117, 118, 119, 122, 128, 129, 152, 169, 170, 171, 175, 179, 183, 184, 186, 191, 192, 206, 207, 208, 209, 218, 222, 224, 225, 247, 257, 311, 325, 348, 360, 361, 362, 363, 364, 365, 367, 370, 371, 374, 375, 376, 379, 381], "fals": [0, 4, 6, 9, 20, 35, 39, 44, 56, 79, 90, 113, 117, 118, 119, 122, 128, 129, 140, 152, 169, 170, 171, 175, 179, 183, 184, 186, 191, 192, 206, 207, 209, 218, 219, 222, 224, 225, 360, 362, 363, 364, 365, 375], "string": [0, 4, 15, 17, 52, 55, 58, 60, 76, 91, 92, 93, 94, 100, 110, 130, 132, 134, 147, 151, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 202, 207, 219, 235, 242, 246, 247, 257, 261, 272, 273, 274, 275, 278, 289, 290, 291, 300, 311, 312, 313, 314, 315, 316, 318, 319, 323, 325, 333, 334, 335, 336, 338, 339, 344, 347, 348, 349, 360, 365, 370, 371, 373, 383], "b": [0, 21, 25, 26, 27, 46, 82, 91, 92, 93, 122, 142, 147, 155, 168, 191, 205, 211, 214, 343, 348, 357, 359, 360, 361, 363, 365, 370, 375, 382, 383], "c": [0, 21, 25, 26, 82, 142, 168, 191, 205, 348, 349, 360, 361, 363, 370, 383], "d": [0, 170, 172, 173, 194, 195, 217, 360, 363, 364, 370, 374, 376, 383], "byte": [0, 4, 9, 91, 92, 125, 178, 202, 207, 209, 213, 267, 275, 339, 349, 360, 362, 370, 371, 381, 382], "date": [0, 4, 94, 194, 219, 333, 362, 364, 370, 371, 373, 376, 382], "1994": 0, "list": [0, 4, 13, 15, 21, 27, 33, 39, 45, 46, 55, 56, 58, 77, 82, 94, 123, 128, 130, 151, 170, 173, 191, 196, 197, 211, 214, 215, 216, 218, 222, 224, 225, 235, 245, 259, 276, 277, 278, 279, 280, 281, 282, 283, 284, 335, 336, 337, 343, 344, 347, 348, 349, 357, 359, 361, 362, 363, 370, 371, 373, 374, 376, 382, 385], "null": [0, 4, 17, 21, 79, 81, 82, 94, 97, 100, 113, 115, 117, 118, 119, 121, 124, 129, 132, 136, 137, 138, 141, 152, 172, 202, 218, 241, 245, 250, 251, 294, 295, 296, 326, 327, 330, 360, 362, 365, 385], "none": [0, 4, 5, 6, 9, 10, 11, 17, 20, 25, 26, 27, 33, 34, 35, 38, 43, 55, 56, 57, 58, 81, 82, 93, 94, 97, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 115, 117, 118, 119, 121, 124, 129, 133, 139, 140, 147, 152, 193, 194, 195, 196, 197, 202, 206, 207, 208, 209, 210, 213, 218, 219, 220, 221, 222, 223, 224, 225, 244, 348, 349, 360, 363, 364, 365, 370, 371, 373, 379, 385], "integersint64floatsfloat64boolsbooleanstringsutf8bytesbinarydatesdatelistslist": 0, "int64": [0, 4, 18, 19, 21, 23, 25, 27, 28, 33, 35, 37, 39, 50, 51, 52, 53, 54, 78, 80, 94, 115, 122, 140, 147, 174, 203, 204, 205, 211, 214, 215, 216, 241, 250, 251, 294, 295, 296, 326, 327, 330, 343, 348, 349, 360, 361, 363, 370, 371, 373, 375, 383, 385], "nullsnul": 0, "11": [0, 363], "5trueab": 0, "01": [0, 102, 103, 105, 106, 108, 109, 110, 153, 154, 157, 158, 194, 195, 363, 364, 376], "22": [0, 349, 364], "5truebb": 0, "02": [0, 102, 103, 105, 106, 108, 110, 194, 195, 363, 364], "33": [0, 364, 381], "5falsecb": 0, "03": [0, 102, 103, 104, 105, 106, 107, 111, 364], "44": [0, 350, 364], "5falsedb": 0, "04": [0, 104, 107, 111, 364, 376], "show": [0, 9, 13, 17, 18, 19, 20, 21, 23, 27, 28, 33, 37, 39, 40, 50, 51, 52, 53, 54, 78, 80, 81, 82, 90, 91, 92, 93, 94, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 115, 116, 117, 118, 119, 122, 128, 129, 130, 140, 142, 147, 152, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 198, 203, 204, 205, 211, 214, 215, 216, 219, 220, 221, 223, 241, 250, 251, 294, 295, 296, 326, 327, 330, 343, 348, 349, 350, 359, 360, 361, 363, 364, 365, 370, 371, 373, 375, 376, 377, 379, 382, 383, 385], "row": [0, 9, 11, 13, 14, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 35, 37, 38, 39, 40, 41, 46, 48, 49, 50, 51, 52, 53, 54, 57, 78, 80, 81, 82, 90, 91, 92, 93, 94, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 115, 116, 117, 118, 119, 122, 128, 129, 130, 140, 142, 147, 152, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 198, 203, 204, 205, 211, 213, 214, 215, 216, 218, 224, 225, 241, 250, 251, 259, 294, 295, 296, 326, 327, 330, 337, 343, 348, 349, 351, 353, 357, 359, 360, 363, 364, 365, 373, 375, 379, 381, 382, 383], "nice": [0, 365, 381], "If": [0, 4, 6, 9, 17, 21, 26, 27, 34, 38, 42, 44, 45, 49, 51, 56, 57, 82, 93, 97, 110, 136, 137, 138, 139, 170, 172, 173, 174, 181, 189, 193, 195, 197, 202, 206, 209, 218, 219, 221, 225, 227, 244, 347, 349, 351, 353, 356, 357, 360, 361, 362, 364, 365, 369, 374, 375, 376, 379, 380, 382, 385], "ve": [0, 364, 385], "librari": [0, 219, 221, 223, 350, 351, 353, 357, 360, 362, 364, 365, 375, 382], "spark": 0, "look": [0, 26, 363, 364, 365, 367, 380], "contain": [0, 4, 21, 45, 56, 91, 124, 191, 213, 225, 348, 357, 360, 361, 363, 364, 365, 369, 373, 374, 382, 385], "than": [0, 6, 9, 20, 63, 64, 66, 68, 131, 181, 189, 206, 209, 218, 225, 347, 349, 350, 360, 361, 363, 365, 381, 383], "get": [0, 12, 49, 135, 139, 176, 188, 202, 232, 343, 347, 350, 351, 357, 359, 362, 365, 367, 372, 375, 380], "moment": 0, "For": [0, 13, 43, 48, 49, 73, 80, 82, 142, 151, 162, 170, 225, 343, 347, 349, 350, 351, 353, 355, 357, 359, 360, 361, 362, 363, 364, 365, 372, 375, 376, 379, 380, 381, 382, 385], "complet": [0, 9, 49, 350, 380], "load": [0, 25, 48, 196, 197, 202, 209, 350, 351, 364, 368, 371, 373, 382, 384, 385], "csv": [0, 9, 55, 218, 353, 360, 372, 377, 381, 382], "read_csv": [0, 353, 364, 369, 372, 374, 382], "s3": [0, 56, 202, 208, 209, 210, 218, 222, 223, 224, 231, 340, 350, 353, 356, 363, 365, 369, 370, 371, 374, 381, 382, 383], "bucket": [0, 155, 209, 223, 304, 350, 365, 369, 374, 381], "parquet": [0, 9, 55, 58, 224, 350, 360, 365, 370, 372, 377, 381, 382], "read_parquet": [0, 10, 206, 207, 208, 209, 210, 364, 369, 372, 374, 381, 382, 383], "path": [0, 55, 56, 58, 196, 197, 206, 207, 208, 209, 210, 213, 218, 222, 224, 347, 350, 363, 364, 370, 372, 376, 381], "line": [0, 218, 222, 364, 376, 382], "delimit": [0, 134, 151, 218, 222, 313, 323, 347, 364, 382], "read_json": [0, 364, 382], "disk": [0, 56, 213, 350, 353, 360, 365, 380], "from_glob_path": [0, 365, 382], "jpeg": [0, 124, 213, 363, 365, 382], "local": [0, 5, 9, 48, 49, 56, 340, 351, 353, 357, 363, 365, 370, 371, 372, 373, 375, 376, 379, 380, 381, 382], "well": [0, 39, 351, 357, 363, 370, 371, 381, 382, 383], "object": [0, 4, 9, 10, 25, 45, 46, 57, 60, 70, 74, 75, 133, 204, 209, 213, 219, 220, 221, 223, 272, 343, 349, 351, 353, 354, 360, 362, 363, 364, 369, 373, 374, 377, 379, 380, 382, 383, 385], "storag": [0, 1, 9, 55, 56, 57, 58, 196, 197, 202, 206, 207, 208, 219, 220, 221, 228, 229, 350, 351, 364, 365, 369, 370, 374, 382], "aw": [0, 209, 210, 219, 350, 356, 363, 364, 369, 370, 371, 379, 380, 382], "jsonl": [0, 364], "guid": [0, 349, 351, 360, 361, 364, 366, 381, 382, 385], "integr": [0, 344, 351, 364, 373, 377, 379, 382, 383], "delta": [0, 56, 219, 351, 353, 357, 365, 368], "lake": [0, 56, 219, 353, 365, 368, 371], "iceberg": [0, 57, 155, 156, 221, 304, 351, 353, 357, 367, 368, 377, 382], "public": [0, 350, 354, 363, 367, 368, 376], "note": [0, 25, 26, 43, 52, 172, 173, 197, 202, 225, 349, 350, 356, 357, 372, 375, 381, 382, 383, 385], "countri": 0, "io": [0, 20, 130, 171, 192, 213, 219, 224, 350, 351, 365, 369, 372, 374, 379], "configur": [0, 9, 10, 20, 25, 26, 55, 56, 57, 58, 206, 207, 208, 209, 213, 221, 228, 229, 230, 231, 344, 349, 350, 351, 355, 365, 367, 369], "anonym": [0, 206, 207, 208, 209, 228, 229, 231, 364], "access": [0, 9, 49, 57, 196, 197, 202, 206, 207, 208, 209, 210, 219, 220, 221, 223, 228, 229, 231, 349, 353, 363, 365, 373, 374, 383], "mode": [0, 4, 55, 56, 57, 58, 100, 124, 127, 132, 206, 207, 209, 227, 266, 269, 277, 370, 373], "set_planning_config": [0, 8, 364, 369, 374], "default_io_config": [0, 10, 364, 369, 374], "ioconfig": [0, 10, 55, 56, 57, 58, 196, 197, 202, 206, 207, 209, 210, 213, 218, 219, 220, 221, 222, 223, 224, 365, 369, 372, 374], "s3config": [0, 202, 208, 210, 364, 365, 369], "tutori": [0, 364, 365, 366, 385], "min": [0, 13, 23, 97, 225, 244, 343, 376], "sampl": [0, 9, 360, 364], "pq": 0, "first_nameutf8last_nameutf8ageint64dobdatecountryutf8has_dogboolean": 0, "No": [0, 350, 360], "materi": [0, 14, 46, 49, 367, 381], "lazi": [0, 3, 171, 192, 353, 360], "default": [0, 4, 5, 6, 9, 10, 14, 20, 25, 26, 27, 35, 38, 39, 43, 44, 51, 55, 56, 57, 58, 79, 100, 121, 132, 133, 140, 144, 151, 160, 170, 184, 186, 191, 197, 202, 206, 207, 209, 210, 218, 219, 220, 222, 223, 224, 225, 343, 347, 348, 349, 353, 357, 369, 370, 371, 374, 375, 376, 379, 382], "mean": [0, 3, 13, 25, 26, 34, 241, 280, 343, 351, 353, 357, 359, 360, 361, 362, 364, 365, 375, 380, 381, 383], "content": [0, 202, 219, 224, 339, 344, 382], "unless": [0, 9, 219, 225], "explicitli": [0, 10, 348, 364], "tell": [0, 349, 351, 357, 360, 375], "do": [0, 3, 48, 49, 56, 349, 350, 361, 362, 363, 364, 365, 369, 374, 378, 379, 380, 383, 385], "so": [0, 151, 349, 353, 357, 360, 362, 363, 364, 365, 369, 372, 373, 374, 377, 380, 385], "best": [0, 357, 360, 365], "practic": [0, 360], "larger": [0, 350, 351, 381], "architectur": [0, 352, 357], "The": [0, 4, 9, 16, 20, 24, 25, 26, 27, 43, 45, 48, 55, 56, 57, 58, 67, 73, 83, 84, 85, 86, 87, 89, 91, 93, 94, 95, 96, 98, 99, 101, 110, 113, 114, 120, 125, 139, 143, 144, 145, 146, 151, 159, 160, 161, 162, 163, 164, 165, 172, 173, 174, 181, 186, 189, 191, 194, 195, 196, 197, 201, 202, 212, 213, 217, 225, 265, 342, 343, 347, 349, 350, 351, 353, 357, 360, 361, 362, 363, 364, 365, 366, 369, 370, 371, 373, 375, 376, 382, 383, 385], "have": [0, 4, 6, 9, 16, 25, 26, 27, 39, 42, 44, 45, 80, 212, 213, 215, 347, 349, 350, 351, 357, 360, 361, 362, 363, 364, 365, 369, 370, 371, 373, 374, 376, 377, 379, 380, 381, 382, 383, 385], "just": [0, 80, 103, 104, 105, 106, 107, 108, 111, 349, 351, 360, 362, 363, 364, 365, 381, 385], "onli": [0, 3, 6, 17, 18, 20, 28, 43, 44, 47, 80, 124, 170, 196, 197, 209, 210, 212, 217, 227, 347, 350, 351, 353, 354, 357, 360, 361, 363, 364, 370, 371, 372, 373, 374, 376, 381, 385], "ha": [0, 4, 11, 16, 18, 218, 241, 295, 347, 349, 351, 357, 360, 361, 362, 364, 365, 375, 379, 380, 383, 385], "whole": [0, 170], "easili": [0, 364, 370, 373, 376, 383], "collect": [0, 4, 9, 21, 42, 44, 45, 52, 80, 90, 104, 107, 110, 111, 115, 117, 118, 119, 122, 128, 129, 130, 142, 152, 168, 171, 172, 173, 183, 186, 191, 192, 353, 360, 363, 364, 365, 375, 379], "method": [0, 3, 11, 16, 46, 48, 49, 52, 206, 207, 208, 209, 210, 213, 226, 227, 342, 343, 350, 353, 354, 357, 359, 360, 361, 362, 363, 364, 365, 369, 372, 373, 374, 375, 376, 381, 382, 383], "shandrashamas571967": 0, "02unit": 0, "kingdomtru": 0, "zayazaphora401984": 0, "07unit": 0, "wolfgangwinter232001": 0, "12germanynon": 0, "ernestoevergreen341990": 0, "03canadatru": 0, "jamesjale621962": 0, "24canadatru": 0, "take": [0, 50, 61, 69, 72, 354, 360, 361, 363, 364, 365, 367, 373, 377, 379, 380, 381, 385], "few": [0, 351, 353, 357, 360, 365, 385], "quick": [0, 25, 26, 375], "visualis": 0, "most": [0, 1, 3, 176, 188, 349, 350, 353, 357, 360, 363, 364], "common": [0, 349, 353, 354, 357, 360, 362, 363, 364, 382, 383, 384], "specif": [0, 155, 156, 304, 350, 353, 357, 359, 360, 361, 363, 364, 365, 367, 381, 385], "first_nam": 0, "has_dog": 0, "first_nameutf8has_dogboolean": 0, "shandratru": 0, "zayatru": 0, "wolfgangnon": 0, "ernestotru": 0, "jamestru": 0, "limit": [0, 225, 350, 353, 357, 360, 361, 364, 371, 372, 376, 379, 385], "number": [0, 4, 9, 11, 14, 16, 21, 24, 25, 26, 34, 38, 67, 73, 81, 100, 118, 119, 132, 142, 151, 153, 154, 155, 157, 158, 160, 161, 162, 170, 202, 207, 209, 213, 218, 219, 224, 225, 232, 233, 234, 236, 237, 238, 240, 243, 244, 250, 251, 252, 258, 262, 271, 273, 277, 285, 286, 287, 288, 301, 302, 303, 304, 306, 307, 314, 316, 317, 321, 324, 347, 349, 350, 359, 360, 361, 362, 364, 365, 376, 380, 381, 382], "want": [0, 48, 49, 206, 207, 343, 347, 349, 351, 357, 359, 360, 364, 365, 372, 379, 382, 385], "return": [0, 5, 6, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 78, 79, 80, 82, 90, 91, 92, 93, 94, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 115, 116, 117, 118, 119, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 147, 151, 152, 153, 154, 155, 156, 157, 158, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 202, 203, 204, 205, 209, 211, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 247, 257, 261, 267, 273, 274, 275, 279, 281, 311, 313, 316, 321, 323, 325, 343, 346, 347, 348, 349, 357, 362, 363, 364, 365, 373, 375, 376], "further": [0, 55, 56, 58, 365, 373], "drop": [0, 18, 19, 357, 362, 364, 371], "dob": 0, "first_nameutf8last_nameutf8ageint64countryutf8has_dogboolean": 0, "shandrashamas57unit": 0, "zayazaphora40unit": 0, "wolfgangwinter23germanynon": 0, "ernestoevergreen34canadatru": 0, "jamesjale62canadatru": 0, "happen": [0, 9, 342, 353, 364, 365, 385], "over": [0, 25, 26, 46, 151, 206, 209, 297, 347, 349, 351, 357, 360, 363, 365, 370, 371, 373, 375, 376], "exampl": [0, 4, 13, 18, 19, 21, 23, 24, 26, 27, 28, 33, 34, 35, 37, 39, 40, 46, 50, 51, 52, 53, 54, 78, 80, 81, 82, 90, 91, 92, 93, 94, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 115, 116, 117, 118, 119, 122, 128, 129, 130, 140, 142, 147, 152, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 198, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 241, 250, 251, 294, 295, 296, 326, 327, 330, 343, 348, 349, 351, 353, 357, 359, 362, 363, 365, 370, 371, 373, 375, 376, 380, 381, 382, 383, 385], "col": [0, 13, 17, 21, 23, 27, 29, 30, 32, 37, 39, 40, 41, 46, 50, 52, 53, 78, 94, 130, 168, 205, 343, 353, 357, 360, 361, 363, 365, 376, 381, 383], "togeth": [0, 16, 168, 348, 362, 381], "with_column": [0, 80, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 116, 122, 130, 142, 147, 171, 172, 173, 183, 184, 186, 191, 192, 194, 195, 204, 348, 349, 357, 360, 361, 363, 365, 382, 385], "full_nam": [0, 365], "join": [0, 9, 235, 278, 348, 350, 353, 360, 361, 365, 381], "last_nam": 0, "ag": [0, 4, 23, 343, 363, 365], "full_nameutf8ageint64countryutf8has_dogboolean": 0, "shandra": [0, 365], "shamas57unit": 0, "zaya": [0, 365], "zaphora40unit": 0, "wolfgang": [0, 365], "winter23germanynon": 0, "ernesto": [0, 365], "evergreen34canadatru": 0, "jame": [0, 365], "jale62canadatru": 0, "altern": [0, 5, 6, 43, 202, 360, 369, 374, 375], "directli": [0, 46, 207, 350, 364, 372, 376, 383], "insid": [0, 348, 353, 365, 384, 385], "first_nameutf8ageint64countryutf8": 0, "kingdom": 0, "winter23germani": 0, "evergreen34canada": 0, "jale62canada": 0, "allow": [0, 4, 13, 25, 26, 28, 50, 56, 213, 218, 222, 224, 342, 343, 347, 348, 349, 350, 351, 353, 360, 361, 362, 363, 364, 373, 375, 381, 382, 385], "certain": [0, 197, 343, 349, 350, 351, 353, 360, 361, 364, 380, 381, 385], "accessor": 0, "properti": [0, 15], "dt": [0, 363], "year": [0, 4, 51, 307, 362, 363, 364, 376], "valid": [0, 94, 100, 110, 132, 194, 195, 209, 347, 363], "below": [0, 21, 349, 351, 357, 364, 365, 370, 371, 376, 383], "extract": [0, 103, 104, 105, 106, 107, 108, 111, 173, 193, 253, 254, 255, 264, 272, 282, 298, 299, 302, 303, 306, 307, 309, 310, 320, 328, 329, 332, 341, 351, 362], "df_year": 0, "dob_year": 0, "first_nameutf8last_nameutf8ageint64dobdatecountryutf8has_dogbooleanfull_nameutf8dob_yearint32": 0, "kingdomtrueshandra": 0, "shamas1967": 0, "kingdomtruezaya": 0, "zaphora1984": 0, "12germanynonewolfgang": 0, "winter2001": 0, "03canadatrueernesto": 0, "evergreen1990": 0, "24canadatruejam": 0, "jale1962": 0, "here": [0, 35, 349, 350, 360, 363, 364, 365, 370, 371, 373, 374, 375, 376, 379, 381, 382, 383, 385], "ascend": [0, 283], "order": [0, 24, 38, 39, 43, 140, 283, 315, 354, 356, 357, 360, 361, 364, 382], "desc": [0, 39, 140, 361, 364, 376], "first_nameutf8last_nameutf8ageint64dobdatecountryutf8has_dogbooleanfull_nameutf8": 0, "winter": [0, 365], "evergreen": [0, 365], "zaphora": [0, 365], "shama": [0, 365], "jale": [0, 365], "groupbi": [0, 82, 344, 355, 359, 360, 381], "phase": 0, "split": [0, 9, 24, 34, 50, 131, 196, 197, 276, 313, 350, 353, 360, 381], "criteria": [0, 381], "specifi": [0, 4, 17, 21, 39, 51, 56, 94, 110, 133, 134, 172, 173, 181, 189, 193, 194, 195, 219, 220, 221, 223, 225, 235, 244, 247, 257, 260, 265, 266, 267, 268, 269, 273, 276, 278, 290, 304, 305, 309, 310, 311, 313, 314, 316, 317, 318, 323, 325, 333, 334, 349, 356, 364, 368, 372, 375, 377, 379, 381, 382, 385], "each": [0, 4, 9, 11, 17, 20, 21, 25, 26, 36, 39, 45, 48, 49, 55, 56, 58, 80, 92, 93, 123, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 151, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 183, 185, 188, 189, 191, 192, 196, 197, 202, 213, 215, 216, 224, 335, 336, 339, 343, 347, 349, 350, 351, 353, 357, 359, 360, 361, 362, 363, 364, 365, 369, 374, 376, 380, 381, 382, 384, 385], "groupeddatafram": [0, 23, 342, 343, 344, 381], "agg": [0, 23, 81, 82, 342, 343, 359, 360, 381], "grouping_df": 0, "alia": [0, 13, 22, 23, 31, 81, 82, 343, 359, 361, 364, 376, 383], "count": [0, 23, 142, 170, 251, 252, 277, 314, 343, 359], "countryutf8countsuint64": 0, "canada2": 0, "germany1": 0, "unit": [0, 50, 110, 363], "kingdom2": 0, "quickli": [0, 351], "renam": [0, 56, 78], "nullabl": 0, "unlik": [0, 113, 360, 363, 383], "differenti": 0, "between": [0, 9, 112, 113, 122, 225, 239, 349, 351, 357, 362, 363, 375, 381, 385], "nan": [0, 116, 118, 119, 129, 152, 260, 271, 301, 385], "stand": [0, 350], "special": [0, 9, 118, 119, 129, 152, 196, 197, 362, 363], "valu": [0, 4, 9, 10, 17, 21, 25, 26, 31, 33, 48, 49, 51, 76, 77, 79, 80, 81, 82, 90, 94, 97, 100, 113, 115, 116, 117, 118, 119, 121, 122, 128, 129, 131, 132, 133, 136, 137, 138, 139, 141, 142, 147, 148, 149, 150, 152, 166, 169, 171, 172, 175, 179, 183, 192, 200, 202, 204, 207, 209, 215, 225, 232, 245, 260, 263, 279, 280, 281, 284, 292, 293, 294, 296, 343, 349, 360, 361, 362, 363, 364, 369, 373, 374, 376, 381, 382, 385], "indic": [0, 9, 10, 90, 113, 117, 118, 119, 128, 129, 133, 139, 152, 169, 171, 175, 179, 183, 192, 349, 362, 380, 381, 385], "invalid": [0, 118, 119], "missing_data_df": 0, "floats_is_nul": 0, "is_nul": 0, "floats_is_nan": 0, "is_nan": 0, "floatsfloat64floats_is_nullbooleanfloats_is_nanboolean": 0, "5falsefals": 0, "nonetruenon": 0, "nanfalsetru": 0, "correct": [0, 351, 365, 381], "one": [0, 9, 10, 20, 28, 53, 170, 199, 350, 353, 360, 361, 363, 364, 380, 382, 385], "if_els": [0, 362, 363], "12germanytruewolfgang": 0, "where": [0, 3, 4, 11, 21, 22, 27, 34, 82, 122, 123, 142, 209, 216, 219, 220, 221, 348, 353, 357, 360, 361, 362, 363, 364, 365, 370, 371, 373, 375, 376, 377, 380, 382, 383], "35": [0, 359, 363], "give": [0, 78, 349, 357, 365, 367, 383], "power": [0, 360, 379, 383], "optim": [0, 4, 20, 27, 351, 353, 358, 360, 367, 368, 371, 373, 377], "tabl": [0, 11, 25, 42, 44, 55, 56, 57, 58, 147, 211, 219, 220, 221, 223, 344, 348, 350, 351, 353, 355, 357, 360, 361, 364, 368, 374, 376, 383], "necessari": [0, 43, 196, 197, 353, 361, 365], "relev": [0, 357, 362], "canada": 0, "instead": [0, 3, 11, 17, 26, 34, 43, 46, 80, 121, 207, 349, 350, 351, 357, 360, 364, 369, 374, 377, 379, 381, 383], "immedi": [0, 3, 202, 360], "logicalplan": [0, 11, 353], "request": [0, 209, 230, 350, 351, 353, 360, 364, 380], "result": [0, 4, 9, 13, 14, 16, 25, 26, 28, 42, 44, 45, 48, 49, 82, 130, 136, 137, 138, 197, 225, 343, 347, 348, 349, 353, 360, 362, 363, 364, 370, 375, 376, 381, 383, 385], "think": [0, 360, 381], "recip": 0, "examin": [0, 360], "logic": [0, 4, 20, 27, 61, 72, 73, 162, 344, 357, 360, 361, 381], "explain": [0, 357, 360, 364, 376, 381], "df2": [0, 27, 348, 361, 369, 370, 374], "show_al": [0, 20, 360, 364, 376, 381], "unoptim": [0, 20, 360, 381], "lit": [0, 348, 363], "globscanoper": [0, 381], "glob": [0, 213, 372, 374, 381, 382], "coerc": [0, 44, 224, 349], "int96": [0, 224], "timestamp": [0, 4, 94, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 195, 219, 224, 362, 363, 370, 371, 373], "nanosecond": [0, 44], "config": [0, 7, 8, 9, 10, 218, 222, 224, 364, 369, 374], "max": [0, 13, 23, 97, 225, 244, 343, 359, 365], "connect": [0, 202, 207, 209, 219, 224, 225, 364, 368, 375, 376, 379], "8": [0, 4, 9, 13, 14, 18, 19, 24, 33, 34, 35, 37, 38, 39, 50, 52, 94, 167, 177, 178, 180, 182, 187, 190, 198, 207, 209, 227, 349, 350, 361, 362, 363, 364, 370, 376, 381, 385], "retri": [0, 1, 207, 209, 350, 380], "initi": [0, 151, 207, 209, 347, 349, 364, 365, 379, 385], "backoff": [0, 207, 209], "m": [0, 94, 194, 195, 224, 363, 365], "1000": [0, 364, 373, 377], "timeout": [0, 202, 207, 209, 350], "30000": 0, "25": [0, 82, 209, 359, 363, 364], "adapt": [0, 9, 209, 350], "ssl": [0, 206, 209], "verifi": [0, 209], "check": [0, 90, 117, 118, 119, 128, 129, 152, 169, 171, 175, 179, 183, 192, 209, 270, 271, 301, 360, 363, 365], "hostnam": [0, 209], "pai": 0, "forc": [0, 209, 347, 357], "virtual": [0, 209], "address": [0, 6, 209, 375, 379], "azur": [0, 206, 208, 228, 364, 368, 370, 371], "gc": [0, 207, 208, 364, 370, 371], "http": [0, 130, 155, 156, 194, 195, 206, 208, 209, 356, 363, 364, 365, 372, 375, 377, 379, 382, 383], "user_ag": [0, 230], "0": [0, 9, 13, 21, 35, 40, 44, 80, 82, 88, 93, 94, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 117, 118, 119, 121, 122, 129, 131, 152, 160, 172, 173, 174, 181, 189, 239, 241, 295, 321, 343, 349, 350, 351, 353, 354, 357, 363, 364, 365, 371, 379, 385], "multithread": [0, 48, 219, 224, 353, 370, 371, 373, 376], "schema": [0, 16, 43, 56, 218, 219, 220, 221, 222, 223, 224, 225, 344, 355, 364, 377], "utf8": [0, 4, 21, 23, 25, 27, 33, 51, 80, 82, 130, 142, 147, 167, 168, 171, 172, 173, 176, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 198, 205, 211, 214, 343, 348, 349, 359, 363, 364, 365, 373, 379, 382], "boolean": [0, 4, 61, 65, 72, 90, 94, 113, 117, 118, 119, 122, 128, 129, 140, 152, 169, 171, 175, 179, 183, 192, 360, 362, 363, 364, 370, 371, 373, 375], "kei": [0, 4, 26, 27, 142, 147, 206, 209, 210, 215, 216, 292, 293, 343, 351, 354, 360, 361, 364, 369, 373, 374, 381, 385], "output": [0, 20, 35, 241, 250, 251, 294, 295, 296, 326, 327, 330, 349, 360, 361, 363, 364, 365, 376, 379, 381, 382, 383], "pushdown": [0, 225, 351, 353, 357, 364, 376], "physic": [0, 4, 20, 360, 364, 376, 381], "tabularscan": [0, 381], "num": [0, 24, 28, 34, 360, 370, 381], "scan": [0, 9, 225, 381], "task": [0, 9, 351, 353, 357, 375, 380, 381], "estim": [0, 380, 381], "6336": 0, "cluster": [0, 6, 43, 349, 353, 356, 358, 360, 361, 370, 371, 379, 380, 381, 385], "spec": [0, 155, 156, 360, 381], "becaus": [0, 349, 357, 361, 362, 364, 365, 379, 380, 381, 382, 385], "save": 0, "u": [0, 4, 209, 224, 350, 356, 364, 365, 370, 371, 373, 376, 383], "time": [0, 4, 6, 28, 94, 110, 142, 170, 185, 207, 209, 210, 219, 252, 302, 303, 306, 307, 314, 349, 350, 353, 359, 360, 361, 362, 365, 373, 381, 385], "resourc": [0, 1, 25, 26, 219, 224, 351, 353, 357, 360, 361, 367, 373, 379, 380, 381, 382, 384], "singl": [0, 9, 13, 17, 21, 26, 29, 30, 32, 40, 41, 48, 76, 80, 82, 175, 179, 181, 189, 213, 235, 246, 278, 347, 350, 351, 353, 361, 363, 364, 365, 379, 381, 382, 385], "made": [0, 348], "half": [0, 350], "wai": [0, 1, 168, 357, 360, 361, 362, 363, 364, 365, 366, 369, 374, 375, 376, 378, 382, 383], "bring": [0, 371, 381], "beings": 0, "element": [0, 4, 9, 21, 123, 132, 133, 134, 139, 142, 235, 241, 250, 251, 277, 278, 283, 294, 295, 296, 326, 327, 330, 349, 357, 362, 363], "perform": [0, 1, 9, 13, 17, 19, 23, 27, 29, 30, 32, 33, 40, 41, 49, 73, 81, 113, 162, 343, 350, 351, 353, 354, 358, 360, 363, 364, 365, 367, 369, 373, 374, 381, 384, 385], "appli": [0, 9, 10, 33, 50, 97, 124, 170, 218, 222, 224, 225, 244, 343, 347, 349, 357, 359, 360, 363, 365], "reunit": 0, "sweet": [0, 383], "exist": [0, 10, 56, 57, 172, 173, 351, 357, 360, 364, 370, 375, 376, 379, 385], "df_dog": 0, "live": [0, 349, 365], "staticflickr": [0, 365], "com": [0, 206, 356, 363, 364, 365, 374, 377, 382, 383], "65535": [0, 365], "53671838774_03ba68d203_o": [0, 365], "jpg": [0, 363, 365, 382], "53671700073_2c9441422e_o": [0, 365], "53670606332_1ea5f2ce68_o": [0, 365], "53671838039_b97411a441_o": [0, 365], "53671698613_0230f8af3c_o": [0, 365], "dog_nam": [0, 365], "erni": [0, 365], "jacki": [0, 365], "wolfi": [0, 365], "shaggi": [0, 365], "zadi": [0, 365], "keep": [0, 22, 48, 51, 52, 350, 357, 360, 361, 365, 371], "easi": [0, 350, 351, 354, 357, 360, 373, 382], "df_famili": 0, "has_dogbooleanfull_nameutf8urlsutf8dog_nameutf8": 0, "trueernesto": 0, "evergreenhttp": [0, 365], "jpgerni": 0, "truejam": 0, "jalehttp": [0, 365], "jpgjacki": 0, "truewolfgang": 0, "winterhttp": [0, 365], "jpgwolfi": 0, "trueshandra": 0, "shamashttp": [0, 365], "jpgshaggi": 0, "truezaya": 0, "zaphorahttp": [0, 365], "jpgzadi": 0, "re": [0, 130, 357, 365], "easier": [0, 168], "full_nameutf8has_dogbooleandog_nameutf8urlsutf8": 0, "evergreentrueerniehttp": 0, "jaletruejackiehttp": 0, "wintertruewolfiehttp": 0, "shamastrueshaggiehttp": 0, "zaphoratruezadiehttp": 0, "comfort": 0, "includ": [0, 139, 193, 197, 213, 218, 222, 224, 227, 347, 350, 353, 357, 360, 364, 365, 375, 377, 382], "store": [0, 43, 124, 223, 227, 347, 350, 351, 357, 360, 363, 364, 369, 370, 371, 374, 377, 382], "them": [0, 3, 4, 76, 218, 222, 224, 351, 353, 360, 361, 362, 363, 365, 366, 381, 383], "image_byt": [0, 365], "on_error": [0, 124, 202, 266, 339, 340, 365], "full_nameutf8has_dogbooleandog_nameutf8urlsutf8image_bytesbinari": 0, "jpgb": [0, 365], "xff": [0, 91, 93, 363, 365, 382], "xd8": [0, 363, 365, 382], "xe0": [0, 363, 365, 382], "x00": [0, 91, 93, 363, 365, 382], "x10jfif": [0, 363, 365, 382], "x01": [0, 363, 365], "great": [0, 350, 364, 365, 376, 385], "But": [0, 357, 360, 365], "turn": [0, 225, 353, 361, 365], "human": [0, 365, 383], "readabl": [0, 357, 365, 383], "decod": [0, 196, 227, 266, 336, 365, 383], "full_nameutf8has_dogbooleandog_nameutf8urlsutf8image_bytesbinaryimageimag": 0, "mix": [0, 13, 343, 359, 365, 383], "img": [0, 365, 385], "style": [0, 49, 130, 363, 365], "height": [0, 4, 123, 126, 265, 268, 365], "128px": [0, 365], "width": [0, 4, 123, 126, 156, 265, 268, 305, 365], "auto": [0, 209, 210, 365, 372], "src": [0, 365], "png": [0, 124, 365, 383], "base64": [0, 365], "9j": [0, 365], "4aaqskzjrgabagaaaqabaad": [0, 365], "waarcacaagadareaahebaxeb": [0, 365], "9saqwaibgyhbguibwchcqkicgwudqwlcwwzehmpfb0ahx4dghwcicqujyailcmchcg3kswwmtq0nb8not04mjwumzqi": [0, 365], "9saqwejcqkmcwwydq0ymiecitiymjiymjiymjiymjiymjiymjiymjiymjiymjiymjiymjiymjiymjiymjiymjiymjii": [0, 365], "8qahwaaaqubaqebaqeaaaaaaaaaaaecawqfbgcicqol": [0, 365], "8qatraaagedawieawufbaqaaaf9aqidaaqrbrihmuege1fhbyjxfdkbkaeii0kxwrvs0fakm2jyggkkfhcygroljicokso0nty3odk6q0rfrkdisuptvfvwv1hzwmnkzwznaglqc3r1dnd4exqdhiwgh4ijipktljwwl5izmqkjpkwmp6ipqrkztlw2t7i5usldxmxgx8jjytlt1nxw19jz2uhi4": [0, 365], "tl5ufo6erx8vp09fb3": [0, 365], "pn6": [0, 365], "8qahweaawebaqebaqebaqaaaaaaaaecawqfbgcicqol": [0, 365], "8qatreaagecbaqdbacfbaqaaqj3aaecaxeebsexbhjbuqdhcrmimoeifekrobhbcsmzuvavynlrchyknoel8rcygromjygpkju2nzg5okneruzhselku1rvvldywvpjzgvmz2hpann0dxz3ehl6gooehyahiimkkpoulzaxmjmaoqokpaanqkmqsro0tba3ulm6wspexcbhymnk0tpu1dbx2nna4upk5ebn6onq8vp09fb3": [0, 365], "9oadambaairaxeapwdyaaeht3uvxtfycquvfjrauxbvc4ziqsvi": [0, 365], "w8bmzkxe43eyya2wxbqyz": [0, 365], "ygj0rmt7wluz5h2xlr171uknjencxyp3h0qrcnswvo3urzkat0nrobrgxq244rfe0vmablxxujghy17anhmxy5dhrwiehhnalmdgcgmsahpvvibsdl4j0qltnxkw25yzo1njjf70yyz2t7iuaubmzknbkznjmeyniwjnnrtfc3g": [0, 365], "hg2nlpbkjnpity3jdm9y8aax4avruqahzryzsmbpmkvcywbicgtt0efdvwmf": [0, 365], "5alqwpodp": [0, 365], "xrsyjbvhr4sdib": [0, 365], "w7bj2opyzrzawj": [0, 365], "bxhu6g2no1ptawckquj8rrofrhknj3wwpdkq3fq7tyucdd": [0, 365], "afq1lon2nyt7nm98c8nyvux2nsrpbutfqzsjrntnaddiviacuhm9a": [0, 365], "i0whafbh1kjugo6nol27177h6uutm3lar5c": [0, 365], "rut0wpamquragjzuzu3sfydhsokknzg8fdxlka7rgzwfazii": [0, 365], "mg": [0, 365], "prabrc2ejbc4ydqcevpbdwzzl0l": [0, 365], "l": [0, 227, 365, 373], "fbwra": [0, 365], "whz91sgxtzc1o2znuwh": [0, 365], "ibq": [0, 365], "lxxawc3dd0ns2oxonekryujnjmlgj4rgh1bw5fqnbloiorvp3qmj5km0aez3mn": [0, 365], "ndw": [0, 365], "zaocvgjg1yqzrmhzjgfwsm7oxfya2u7npnpmc5hfxd1qnyhnker8brk54hqvslyrcimahducudqbq2uoqfg46yrce9zohtynnuwcw4prvxwhenqvxk842irenpt0rrgbigkoi3totyo": [0, 365], "abhunwzviz": [0, 365], "d0jpoiyjghe2bjftjfjnxs3elapbck4huk2axknm47xh43t9hjui": [0, 365], "lacsnrl": [0, 365], "ahqaqiphkq3wudww5g3rgv8alnnfk2ox0ol8xazbrzaffrieeumsghqkc5": [0, 365], "wsqq6mcly5lycvmszermzmohpqv1s0rei": [0, 365], "vamzy0m9as1nakas654htpvwrvclvlmxkgjhz0wetunyhohed54oovl": [0, 365], "ambcadrvcqeppm0rhregvdkatc": [0, 365], "alzitogcw6zppvcj": [0, 365], "e2ubrk2eneqwsakhv": [0, 365], "uzfmrjafr15zyxxenzksoiplkgd0nid0": [0, 365], "6s7h4g": [0, 365], "hwkgxdf7aeb94jsfxv": [0, 365], "dfhpnnml6jpa3psrqmxuzbsd1bhi": [0, 365], "rut6jsudf4qt1i8nwik5ktcf98nnrpve1dgyvbrfiyobosqnynr6v1m1zonpbw8odzpmiyvzd3gr": [0, 365], "kpbuioru3yliggjklibbxt7fx61bqwtrtw1lhdidk84i6iktxnagkkihj8xkye961rkz0zrbka38nxsh2tock": [0, 365], "i1qhn6rpef0zp4o9zxth1xk4x1p61sfy5kwkjlq4": [0, 365], "yy6elfgpt": [0, 365], "h7dqw6m2aubh0xpsagijrcrsffc15cufgmgo5j0has2ujh8teilbuzfbwswkhi5jhqtuy2m6joex5mihesluzhmlszccui5sdbfp8qeeftl": [0, 365], "y8kc": [0, 365], "gxj": [0, 365], "zqjm0imt9soqptzi": [0, 365], "dtqiy40kj26wmpljjbj7vznyo4eoflzxgwukuocvzb32n3ajpjuoqionut0go": [0, 365], "pvcoikubu1ct7qiyabfjz9": [0, 365], "nph5uxsnlqxiitlnzvm65hqu7isi": [0, 365], "o97cwoq2k0hduzxhsdr0o5gsz": [0, 365], "inmh0g2krezcaskhhjwph0lzgypqrwl9vqjwrd": [0, 365], "sp5eplib": [0, 365], "gtw": [0, 365], "hq": [0, 365], "sge4xdbwq": [0, 365], "y4p8r7cma2o6jqa14svovrfmdsiaoxydkf0ogjzsyaeyrssnx24zjbqbffy4uxbw4wchttoepwtiktj4kilrvaibtr1eb0t99i0elvxuwqhjncapmlob4l0hllpdrurlckird": [0, 365], "wonlob0o21zpdsxpt5npbe1005wd": [0, 365], "qd0pxuircrkmrwssdkeshywkgvkj6dj": [0, 365], "waasy2rh8sl1rounw5j81nlj2agd": [0, 365], "mvrz1dzy4gk5xtuzpg6fxwoaewbpzphpzbpdk1wy7tpkccdqbj": [0, 365], "gpnusefbgwnipvtjlo0tkzyge47": [0, 365], "wbkbwgdtp8ae": [0, 365], "g02ty": [0, 365], "o2klowbe6az2h1htuo5aobuabpgbqcfzhfrj2": [0, 365], "gngrmoldt7ijzrubzipwy1oi": [0, 365], "fsi": [0, 365], "uilainyqca": [0, 365], "vns3zdsu7hawmztouhhuaadptwb0ya2rbjyyoec4p3juzmp3ax6tzxyy8sodzy4bwcfrra7kuri5z4kothpni": [0, 365], "lszlb1ya3s0oopuclfwdkuib4j9kbh0podmllrra3axhbn61mvzhs3qcj4zs7jtnrtvefivzwnegx1hqapdigd7yzjqgmwxc4kyxhvzfkxvzmvfd": [0, 365], "m3llms0l5zkdhnq0o5w3ilwbljefaljgm4": [0, 365], "nn": [0, 365], "eaiza0yokeouieeps0265c3dg9qupt7dubbnxfzzbpt": [0, 365], "z8njjqbji3iw3": [0, 365], "yqee4osnsbloseoswpkuerw5z3wc9k0gtsjs0sypxttov7atlgjhkm2rxjai6fpwjmjymordvnkxdjk2t0yckkx9kxp8umypmxsv7zzuekvqymdwehfsykudelglklbzijeis9h6ulifl2ogarnnhu1teil7n5oy7dhokiw0atet7qgfslyyksiamz7giwfcwftckw6cqsjl2keszzvau8vexdom": [0, 365], "kdvploduiiwjvyxx244obshjxpd2ydvebk7edqnh1aex16gky7itqh12t": [0, 365], "bqwngvlzpixjkxd6go5rmfdehptgntzcxgdpllk4pk6g3c": [0, 365], "txtfcrtneln": [0, 365], "lqfmh4indgxytxusdzbjw": [0, 365], "dmjmhysdvvcfwikbpbbrdc1fsbrmvwyyxpt1qhxnbyxgohydq0iuc": [0, 365], "4stmupdl5i7bvvcrxq1daitsz59acgk6kwyhbniqltrqbstsyjoogzsbh1p6k6h1uiegzfuxg8yi71dktm6edeo5nkxqnewugmeaqyoo3zc7": [0, 365], "m96womkwihjfowiso1aboovwnyzpmoi9fm7cmiwspe83lcd0qkitjpinrh2sxi0uigvn9": [0, 365], "wblptdlycfdnjoorbpc": [0, 365], "mhoazpy6f1o6cxlssqe5ry5z60qja280fisca9alauwzvyvqwikpchhykrqpukvjykqeicdkuajvklic8ckbzhgcnj5i": [0, 365], "tuk5x1rwodgsxmygyywi": [0, 365], "pq0qzxdwdxl1hvzlmarnkorg9apaokar0ofetzcvfqwx": [0, 365], "fz2tsaxvozhlhao4enuopwtk01cwcev2pq": [0, 365], "kqaqe1mrmx3844nadtisuaagfcbggglktqkx": [0, 365], "bnryq7gpaowvoshmot5byka3fm2chog6mmdpmvhmscs5a1veuh3veqjocmhkysnpodx7ik9hrcobsjggz3p0rj7gy3garbtcopvac0quug60b6n0nhkir84ljjqk3zzk0d3fn8sbekdimglfsfiykgpyninnmbzhayrgihgo356ampc5g7yhi59kaiwjmrc8d0okrbqv3dpli8shawob6mhe3pdduvg1hvjznxzk5bgd7vqffwtipmkphly4fkww47mwsztx7mset3qjk0twlbzpcesy4hoc8vitfc2euh": [0, 365], "2q": [0, 365], "alt": [0, 365], "waarcabgaiadareaahebaxeb": [0, 365], "9oadambaairaxeapwdsyv9ceuaag74txbnabuuc7ifsgbms0y85zqaxefxhbhp1oazp": [0, 365], "zse9bkudj414g6kayz4kgcyg": [0, 365], "5ohylgsmymvlqk9g1fx2anzx": [0, 365], "qhh50cascdigvwawur0pg2od": [0, 365], "kvh49kahbmzgee9ahrmgo2gbmjguau": [0, 365], "s8qx55st3xxqahjtwmkhknaelaryzn2anagaajypamnwwhqg0ar3wpq2i": [0, 365], "zoyom9z1posw5uyuwxz97r9qly0q5zmyhgcaydeknvh5s53upfwoxp7u3p2ep0xlvzrnnxlly66egjfe9qzmcc105z3dj3lgstwbtjdc7fzth86sykutugjnmz8ralpoussjor": [0, 365], "wa9ocd61rgvjbmm8pcwxup41txuf48a": [0, 365], "wb1s4rb6xhqjnefl0nww13ttrisc4xf": [0, 365], "cbg1rgpgwxholkg6nncc4wm960mxgbuzpp40aibge9ademz5": [0, 365], "ogclfewo5lln07ugj97yyeix7uwkt0onikomeh7igdndslfsigaorg38k54pvuvjcsboundmlznjtxk9xizzzgdiemnncbbe56euoqyipcwtiwdt0mmknpustyuduyeg2lizwpxskhftmjbwwfg0": [0, 365], "7ghaarvls5m5pmss7fkobxufetin": [0, 365], "3e65rhssf2ym9m8dtngxmctfxhnbq7kxkk72lvugv1lu46hnkkhi9d8k3l1ewkvnvvrgavm6": [0, 365], "su2i21qcfdrt0ogbbtpcj3ruwbchue8a0akv5wot70amv1x2b9aafkmskplhj": [0, 365], "dafzh5y5iab6cuach42tghsyr1eyslyf6gomroum7suchcxzwfkxbhdouidkdot": [0, 365], "wuvqboyvriqtnurrzymupor9pespjrrm8jjq6nkg": [0, 365], "jcpai": [0, 365], "xj4fhapcxfxkjjslyum5zai3pgwdgjm0spl9640arbbtpfk": [0, 365], "ldoaem9rsatswblg4dhsei4najokpnsrcvo4yz6": [0, 365], "whxg7wiic6rnbvxih281okzuwlz1tqlrlhsyi8qzmnzmdkemu6csjzztuv2afy7tk9kokexjnnaasxo0higcn5yqaw5pycgaio5zjmhp8adhpqbm0u4hetd8kvwmvvbaxubga0exdrjk0pyfuysuhwkwlswmy7lztv3dqfwko2vinjt3pkua50": [0, 365], "gyw0ocqzlnhxbrfxjkdmdezyjc6habcl7mszty4acgyyaksfaycjn812b0khkhgx9m1y8h3c": [0, 365], "hlxw": [0, 365], "0or": [0, 365], "xjym9yb0rppq0scdad3dc6ffajftggcchmdgp": [0, 365], "dfseiq4qvspj2nu0ja3vu8zljzn61yo65bgzc2fvcxktqsr4wwhrvrtjihqw3t9wvnducams3z80bhj8k2hucdzgdns1pqno1gduyfmgbkn8wfeuqmk1dhhkli7mt5gemcvqhqc4": [0, 365], "pqbtt7dryfmj9aqfoiqj09ztar5guanz": [0, 365], "rsafvwgwh40aq3cumkzwqzujbgklgepaxpc6bq91zbf3mp8yppoa5ayafmjtw7uk4szijbbk8srymdikm5astxudea08ioiezkk5lwppir5ddln1suoo4": [0, 365], "mhnafsottdry0vnozfsrcgzqyigg4ch1rgcm9zwmutini2uroalycvh51neyln82wtomsfmqrcqm73zjxn71gpoadx20l3htuvsd4ixbecx2n2py1vsnz2oevc8bnoo7b6z9a6zjiprhivjeukb1yaaiynyxapaqqj5wyoucuaphtj3ht3pocsqle49h6uaqceyeszdfidhphlqwfteroh8slwx6gs6sbxnqmuwr55am8120h2je5jj7clgkslnntnq6o8saddes8lssttu8imqzmybljcy5hov6gk4lrm7ht6ve3m1vheflp0uy5pfc7hqdkndg": [0, 365], "pxyruzctdmely31nmtc3d5lzzhrseretdjnjkqh61seymv8vloe3h1q1uq9ddobxwnqvfhzmno57zr1kaulc8qq5qdixbbzxlypn5a": [0, 365], "9k5q5wijon5pu2bet90udj1rnny8rhif68uat": [0, 365], "eka4zn6uarnpjmcrotj16uao": [0, 365], "ysouzzcf7nowhoeniqnhm6kjdf0ab8m1mldfrdmer2ic6hkrrmtqaeh9juosyyb1wue2krnbclwd271qtwq3ubsuluy3ffahpfw80p3ge9lj4xsild": [0, 365], "ui": [0, 365], "xw5pzawoi1x": [0, 365], "s2bijplb7whauetttqjopvl6mw8ssg44udykwsohtioxoo2cdesszxh3tvaq2j5w9isxs5j2jthoapmlxszutjpkqyoafvdvxzsrcphxw6qk6nm21axgyrgu3qwxjnw5ps5vslayrq0pv": [0, 365], "tc": [0, 365], "z7trfdp95oze6": [0, 365], "oql5khsrsltjhu0aw1khhxomelagjciwp2": [0, 365], "e7uarsmf4b5pu96amjwvki0q5klw67cnp754xuslzxlgrux5pcaetu4ngnaf": [0, 365], "vaym1x": [0, 365], "1ct0frui3b6rqdlipdosjgowxck": [0, 365], "k0vdmylh2jpnm8nabqci3vzdeceskqwp1rva6sxlzahe2i2tvalvcixhrhvxjirien8ogirla7gmk0mnn9dntdflhp0kkmwegu7uxuaxqqja5vtlk9mcjb6dt": [0, 365], "boc8nncbdzu2ngofy42pgqotxexktrlvm8dyuk5ypvl0rwnwjyvxrqzecznaestfqus2fvdia6yxyrdhlpqdxowpiuybt7p7acwl05z": [0, 365], "sch43j": [0, 365], "evm1yumrm": [0, 365], "ayn7sq45i6vjrdlcfnzrjpamaxxdanuaqhlej7r7tphyxnlyzulx69hxjij": [0, 365], "zr2yah2jeu7qskbmurnber2cvrz3o": [0, 365], "0ysgxldq5rsnfpvkvznrq1oly0tbjzylh": [0, 365], "mpqjg": [0, 365], "hxtfphjjse6nvtsnuagtkqoh71tkknpurpk7ss7ek981nzvrk10gkt3": [0, 365], "6occ1etyllrmlkk0blaor6vynanumrewh": [0, 365], "z2m": [0, 365], "tj3ezfaqvjktuzbecffarvh0rqm73rc8acnnnjg0wispuptp413nisjrzz4ykq5b": [0, 365], "opai1wuqq6ldaxioua80c": [0, 365], "dnqzzr": [0, 365], "tdv9rusg0armbkotwt": [0, 365], "ayj0khqp": [0, 365], "nuf3g39": [0, 365], "wdylgac9vukvenzxlirti5axssdjgdszmdzme5nec7ydz01ankiv7zltzjjnmo1ty9yuypzwbug81hni49q0s0ghztnohjcl03sonsapxjanjgciqc9ew6vszlq": [0, 365], "wugyvflpgineji2ntmmsw5wb6unqhiwyefgcflblbbxucouzdrqxmulzsaivqlj0q1tbilvsgatfz0y6bqbzv9sk9de1xu7wkqqtrwg9g2849eapmfmdwgc13nkkikls9qyhjyj4azteuj4msxzryosummphdd3x": [0, 365], "oplg5uzwllsi": [0, 365], "inaljmtbmu6kvaeqw9p0nysxrnrf9tm7mtbrku5lbpxrkv5zg0z04ztsc41brhlt40ykn5mj7uuw400jbs2uwheprwgmww0adqr6ku9baihyipiczosfyq7pgesoz70bccluffowaz15p3qtrlrqmnpop2mshgmaz21czlqzsg": [0, 365], "hyl1p7retvlaujzyx6mv8ajvoacfj3uzl1e5jplwrzchr9o9qndm8kle56a1kubn7rcfukoni5awpxrup00ld7nlvark7li": [0, 365], "z": [0, 18, 19, 21, 24, 27, 34, 35, 37, 52, 195, 349, 363, 365], "waarcacaaeydareaahebaxeb": [0, 365], "9oadambaairaxeapwdlv7r1etzztrcqskr8gnbgo": [0, 365], "afqpa": [0, 365], "znrak8ol3ovsco0urms5ydeweqj8sccpljlz6msu6m60nj": [0, 365], "h7lb2czxcsluoibytj6jp1rl3luaewvtdhtaab": [0, 365], "atwvlr5": [0, 365], "gqxhfqfannya0khckdmakxh3topjvt4kh8j5trsjlem0ac1cmnp1mzx5b3mie0trlzdb6crbyeqxjq9enpwqqkmdto0pao0nn0t59pubujbdbaoxzahgg7kz74": [0, 365], "nxpwm5wjydnn3zizsrxafz": [0, 365], "ocuo": [0, 365], "qseso9arsn2ivzk3msxvtcwxjtrw7awnezgntc5rnshl3jgaa0niymupi1p5yiqutjkchr70rjpc1hjyfid74yu2s41wjggh3v": [0, 365], "wdr96e": [0, 365], "rnokctbob": [0, 365], "qiolqj7l3lo": [0, 365], "didspu1rzjxzletkelx2jypjcexne5ktjj6vxqmyottdhruinbkubi2xajcpmhp": [0, 365], "hwnrmkkfonmc5b": [0, 365], "aelktanju3llavj56z7u3g": [0, 365], "p58ea": [0, 365], "kwndvtosodokzo8jlrkxxn": [0, 365], "pqyr3jrjssrs5": [0, 365], "pspo57e7zquxhu9r0xiui2g2le5yntlr2pmmrzwdprc9tjkqrdyecxgmjmsq3owajy8j1pu2hthk02amgau6rdefvnk": [0, 365], "nxwbwp3rkehwk63wnz": [0, 365], "cplvcouaugqfpsezu81lfvdggdgynhtwqlocjc63w5ps8t2psj9svemwdahaswx02pfdxgrb5ibljl": [0, 365], "bk4o4jpmr5gkznu3k55nqmf": [0, 365], "fre0uobnmz4eg6uuwxvyownfvdtjed22o3yr2": [0, 365], "krk9bwjrqeg8m8obigx8w7vcvzhm": [0, 365], "ell1p8i6nclscxocc5xj0qjnxr2ui2izj0shyzlmjhowzzxysakjvsa09hqep6jp8r2jn58flsud81ombicpanlxulrzaxjljcblzvl2cmrvhc2h6j4ihghdgldv4uoaufkzkpflprcrt7yru5tx74s6dbh": [0, 365], "ae22clkrtba6mpbvzohflpl": [0, 365], "aaho09zqusjtomeprwc9ncld6l3vncvlg6kfyw8tjljeabd16ip1rzygr6ljtrl76gdz": [0, 365], "lai4i5bpes5bxnspjvrmblzctxbhgg4jqfsfpu7i6d2eseetpmktxg4fzypmujvw9cla1mq0ktjldb0r7xxekypui3zwb": [0, 365], "sk1yssdytwpg6ehpitvs5y3kiksv": [0, 365], "9zzu8rktc3jrep31lrf9c": [0, 365], "elq63niueh0fuubkdyhgpteeuxnjkxvbm80aezez0xhlhtheohgsxmzsuot8qkhhw1ksxfmkdq6ruxlnj8k0avqyn2whbfxlxcsg": [0, 365], "ocq65khftftft7nnue1mbnhcezjcifziwtiydh2otc2os1sy52": [0, 365], "2xdhfzi7qqnjqlxz03s": [0, 365], "abp": [0, 365], "wdz3h": [0, 365], "3rhyyanpwu": [0, 365], "ksrhhn3kyhik0yyebgasoqo1c9zwz0undwmsxtlbvivku0ulf": [0, 365], "6w6gsk9bmqo90fsvn8ks2": [0, 365], "3aswo0e3auikve55yto55lnpufrexjwilcjkomyjrm1vzns7wuixzwmat5ihus78sqchndissckjzpxi": [0, 365], "sorsweyxjxoc": [0, 365], "nc89gckk0zd8mxmdrqnkqozzgvbavbnvttezljkwxl": [0, 365], "wck3hhxcqzf3z7dnnrxodsk": [0, 365], "gwcrbxqom3rxuygnffgbddirocu9y4ysz9tp6nqvsxw8lptzkyvkzuaorod1lewunxrrliksdfb4fa2vsyas5txdz20eohufcsjo8a9sjvu8i5rs0u3y2oytos14zmovtts1c": [0, 365], "hwpijslitxzpipjchti6d9caxq7kof9jr": [0, 365], "hmlte6njpkp3fovmmcc": [0, 365], "wj": [0, 365], "tflcygrsxtsunhxhjzupztofwo2rmn9s6vsn0nlidzjjwqo1dr": [0, 365], "exgu2kdnswrjxag1rcq5pktkvcgzjvinr2qtxvncazo4tzskhpy54ifac3lsi3fct1fyeflsdvxl3g5mbp8accebsvczvrwfugj4kjhqcujnjniewotwznkdmboaqccvyvx7xnkvj074a6npceelibau9zt5udyc9d9mvpbjrnyrq4u7mj1pxvaxmngmrryycg85dvdmudi1uw43tpzwmkoo65andjmtovfue4pnac1qhkqv6qc1dqfatlnmnlbihujokqgvyluwb0qkgnpvpy7tqlisusqhpvdrvprcex4hd204msypiodd6o3vhnfccd2yxg2rm": [0, 365], "k7ms9y2r7i5fw": [0, 365], "3jd7vojm3fa0udz4nijbni": [0, 365], "vvpslgouprb2z71dlsgvcyzriu0rj3u5apaeaktecp4o1ltlgjluz3sqkiurdm3wrq8mqy3bktgwjh0qe7j3o603rnomvohfpx7qkw": [0, 365], "hpb7uzggvz1fkq": [0, 365], "djex5pdmxh8mwxesr": [0, 365], "uedm": [0, 365], "lefjnao1puljarz8atiqu52isczhj8q25jm2ot": [0, 365], "hb58wwxwzab1xj8bw1l4jslpbtsub5jfpzdrxqucnfaksecnqoahsdcvroz162w0nbbhzkwpinzzjzqxuzcrlmi": [0, 365], "hrxrbaursssmlm70qhyojsvsrgnpmbt3iab5c1phck4lxvrmv5q0lqylkhyomhbyo": [0, 365], "awrnvywjmsg4glxd91wmmvyb9m1zw1kulmmyzzsvx5zgkgbsavroypxnjqdsudl1nlis0jmzi": [0, 365], "zv": [0, 365], "52zupwkubrm8u0tj2": [0, 365], "s4": [0, 365], "02mc45dodxyytz7xlcvbludxr7jtdtnhc1hnjsuy1s7r3lpml9auju7ygom9f5vlgtt1lkkkttsk1mxkjwflyebwk10kv1ozmppziwtp7l": [0, 365], "fhizz": [0, 365], "app2a8vwas9vlh5fb94zmm9ee9cku4uxu6xs9kutpthl9vitipbwrjlj681k9wdcfyx1ovghmv5blsi": [0, 365], "ydgevt0oknk9s9pf": [0, 365], "alwghjjvzaxi5zjpipjgzoivbmjzhqvg": [0, 365], "jvndee5i0fblhndkhejijn8waelrtzsqhtjb": [0, 365], "r0app6zrootnbna2zxdllkyhvpcdd1ccpu9konttu5ddsvbcixnm6id": [0, 365], "7fhi611uvh1b2": [0, 365], "ydb4huxp": [0, 365], "hi": [0, 365], "dccsrfkuh3": [0, 365], "wdrvppsleeaqgxaz2tvk": [0, 365], "cnk4gprxlgm0jbmuymfjkli4aaazjwbtusottht7u9tdgunjke8dj5qlzqshplldo6ulcquyn6bckrrxcqvzhfllyfl9rvbaslu5jni": [0, 365], "bnrntlq1sp5i": [0, 365], "llxbt6z98960oyxm0hu9rs7zv7njbkpa2spgpxitwgpdgmaczliurtzww965tpqdx8nrvflfigdfqrditqeikibxjoi": [0, 365], "8ize7qs6vdant4xwetop8oo2efncocgk4jkgrnkhb7msg7rqm3qoss3cny8cq3sow46e1hkmtqwhe1dw5qgkmn51io": [0, 365], "gfrkd25qnoouhhvjnud2kyqhg52baauabule1awpa0h7v": [0, 365], "bfgiwjkm6af7xpokch7yslfvnvt9p7sxy2dq6ij5t8ware6drn1azrknizxur1untwdvmqzb": [0, 365], "f17dfre8crylmj2og4ddnxbjbfhsuo": [0, 365], "hpna8j3tlcf8xwhjj6bgc1cldwkz4ui3tlwxzbxnhlhsrjhbius9nynoljbyzynbnqtluyp5c0rsvm": [0, 365], "hhc6rq17erxgozlhuoyjoi9rn9dwknfrftnfcqztew": [0, 365], "xbk7tq7f5vble5e067u9p1o0vlemgw3cptlu07o5ske3ad8qlhurdyzcgdcp3b8zhgea6fomtjvwpmfifdj4g13fbgjoofi88jgd": [0, 365], "apx": [0, 365], "acropnxdl5jkyzznomt7hcrto": [0, 365], "qcjj7gotszxsz1rrfipeghtmt5ugwbuoh9bwqqi20sct431w2unemnsbqxo4bysmbj6gvnnjy0drmxfiu4gsxusgg3iba49qz06lxap": [0, 365], "waarcacaafudareaahebaxeb": [0, 365], "9oadambaairaxeapwdeeeakzpfobvxmycrpuztgpaloarrp02": [0, 365], "pt0aqrqfjxsugsnmibptugsseuqxfsmk859knqo2g1fvscxj": [0, 365], "avwgh7cl": [0, 365], "4fypakqxnwizxroa5kicjkikkairir9wu7cm4tbnp26cg9": [0, 365], "8aiaiznnbdjgq5w8lpbov": [0, 365], "amtrziuisl1kjnx7": [0, 365], "0fxhb": [0, 365], "ape0ah1lszlgh7a4huq": [0, 365], "4u": [0, 365], "v2bnxfg9lzhdmqovycouvyalobgfto0d5twkemj2fmdrozlqcu2cebakorgkrkjdcyz32j": [0, 365], "gmgzlwnlxoai": [0, 365], "55": [0, 13, 364, 365], "8a16lmqrsq20xqnh": [0, 365], "tp": [0, 365], "69cthcuoe2or": [0, 365], "98f8a16lmwgz7nbnycbgvuktwpxfvygpisgk1va0kay5b3": [0, 365], "p9ollklbvjulfrfz7f98ga3hpwcmmlokw44wuu3yb": [0, 365], "lzx5jd6rtynxcvoo": [0, 365], "mjmsococcr0qvhqu5gnfxdlpsa": [0, 365], "duz3": [0, 365], "6gjykasnhr": [0, 365], "sd6qz3cuiz": [0, 365], "zwonw9jryzd1w0svmd2037ramk2cauu0doum12o1u9klt": [0, 365], "76bs07isjbspst6flhlhpohxjj1ofcfyleek5": [0, 365], "ekm842n": [0, 365], "lurkm8i9pkuatkjimqwjchjxx": [0, 365], "ftevyvdh": [0, 365], "ydo8xvinjg7ghdn": [0, 365], "n9ag2csitzqsnyqslvjalln8olnmtrhcq1uoyi5tag0xkfjz19m0kr7ln2ktxdzx2hnsp2bivyutn3z2puxmbnipot9qxiomygykxeojxta9fslcqxp33kw86wx2ujyo6xnnbpcwwkel": [0, 365], "dewlbtponx5xijm1cw3udpsb2xaa1v0klhlrmprh9klhyuazpmmnzwzqznblp3u4i": [0, 365], "b0q0szzlnesvunuoscmqppzq0ci": [0, 365], "snjk273xddg3ky": [0, 365], "op63fpyb86zligh3": [0, 365], "anhi45oetju721vhhcouooccc": [0, 365], "596xkh8zlx9saljnfdbmhysbj8uv0pcihzmqrdxrkczq80azmy7sar7n8atsscuy2patfettwlww327qaxyr7ms2afxttkutqzrttouew": [0, 365], "tuhnkmo2vunywzrowjwqudvncmmnet5sjoxbuetstye51ltne5vx2z5ba8gfpmv7eqls2nkzlfecycyhof8ksm508bpqiskvvbxksc4tbxx": [0, 365], "fz7f7kcxiilqtibqxuxhccy4okberdk0z5xd9pgmshwmg5xn6afiktuylzeb2vjfgtnd5kqfmoq5y59b37": [0, 365], "aiu7vstzfe8s47u2dwp3di": [0, 365], "nbzctjtky47cdqmpnrzddtlhaaxabs7g0gqocv55qsz0sxsdhvph9f5c374ohkc": [0, 365], "ez6yq9cxc5xwholsuqge7lgjnahtaippol3hejhatelyfs0aqhg4honftcpi3e02vyvlkijkmqvfaor": [0, 365], "nphrv3tjtyupzxuzkwjdaxu2jp8qfmhcrh263ntdmylx40gg2edbpv0j69ktseok6i445w4v2jlqkgtjr7c9kege6oipetwxywywhyjqrjpmps7fsd9wswhnw7w3vthmkis2x3dhzx14p6isrkekltte8ibjhjnlhmr92czj49km9x2okhnn81xbydlscxk": [0, 365], "vputdsk0mt9yu9guvjmlff": [0, 365], "7nopss7xkvynvffc1xc6ndsbkfnqkfxvhmpq3ivgki2qpa35p8q00sjs2z3lsa9tfnzrlzkgahmonhbx068noajak40u49yvg8imkurq7dseij8": [0, 365], "dt0bxzhkgmdljzqce": [0, 365], "jiaonofetdlyfnrstllereyhb": [0, 365], "ugdg557": [0, 365], "sjryolyzo8l4gkmlaugyayk8": [0, 365], "q8guknmjei2hhyzybsfmwpoer047029bjhhap": [0, 365], "pjm0jhhuy7vjrn": [0, 365], "tiujacyoqabbql0t7bcj4l3xrbaw6n5icn86jlsu3cy0nvksiqno": [0, 365], "wlopc0tj1p7dq9ppenlxxud0bzvx13e9hoeyw81vkc6w3db9p8zkg568jfvyvypqclvpmuivluhascpxa9t0zmiwhijdagcymldmawp8ehh0": [0, 365], "wqjgjkihbaumyjb5xn0zzqa2sfiy3uliqrhgm7qpmx1wer3qznryqnnucxqf79supljpugfgc4hyvkgulhxtattwayipwy7pdexxk96tywipitknqp7urjrlsffkc5xg8auhj4f81kw": [0, 365], "0p3si9a0y5il0ez80kxudc3i24459": [0, 365], "wrra6kt20no2a3ku7omxbjjq8n2ipslyeqpkzrsio1wnc7ld0ear14h": [0, 365], "e1njibbahncrywdcs3iqhjj": [0, 365], "zi": [0, 365], "wnotqcp4s1xkh": [0, 365], "zbsykbhi4wac4x6": [0, 365], "9rkxqplqcal5tggfuke1ifuo4pme4z7umx2gslficgqvtprqwkrsebidr449abl7rpdkuugzydv7obiwpauzanhfeqw2yx8dpfowxuegefren9nle4jcve2v54": [0, 365], "z3q4vqmsnrzsyuswbfkhjjh5": [0, 365], "wrjnasx3voxcuzmsrg": [0, 365], "otwpx3ykvh3mxu9zurk3nkzqt": [0, 365], "aagc7cczbpn6akezarm7tshpoe9zlmuzij47d6bg5pcm7yq": [0, 365], "e4zqxjtvswniqqcoa": [0, 365], "n0paydr5n2sixowoma0pydj2nwv9nt7ck0yis8": [0, 365], "enxfz6tlajftxdohmpbfkffgbhxgso4prj1rv3my3y7tltowjesn8ekwdzhfinyp7j5nhymf9pkysiapytv4btbx7c9ksgmmzy7yojpebu3hbt": [0, 365], "x07uacjqt04uw": [0, 365], "unhsettfudjj76xfcnu71l3guzggpy4z6": [0, 365], "tazx0d2s9kgjwfva9kqg": [0, 365], "ccobrwhytihwd7c80rhy5tmuuzkmbhx": [0, 365], "nmlnvalrhsqtwi": [0, 365], "36japj6imgoi0zv5dfuokkgknvas0psm9wph86rcny3buztihkksrumhcm7h55": [0, 365], "sp5mt0wokwz1kd6npetuesakmydgb9cvpuzvr2nm98uscvnud6skmivgfp0ymuaeex0rme4c7zuo0j": [0, 365], "tzfnmt25jdg52nlyyp50": [0, 365], "irmxfu0i": [0, 365], "u5x1ogwdmmi3bz3facdhep9qgbqz6mbkfji8ubjyccmpsfzhvigmobx9x8mkodqto2eljybn5rsfyd1dw5apz6zdfafyn5pkbqzdx9psrsjuasjsbt52qqmgmyg4md14p0pgs3opwschlmlk8eospoki6ictwy1": [0, 365], "cxywbbyzxcfcdpyechrn60xfy5fv4mehjuxkx52krg": [0, 365], "hz71d3kryf7ddngmqet": [0, 365], "gpru2hcfgmkakdghemmjog": [0, 365], "ysr3cexesw": [0, 365], "lmr0op2csqijhuofbahi": [0, 365], "9smyvxzseccjteaemlhjqijif3cahhk4ganh7nynr8kzrgd0vbyypjlhphppiquhwlu1zbti99hvicyloqvujhom07iejisnbeszvky5ox2z9oooa7bp1nmo0ikto5uuickfawyaebutgz": [0, 365], "v8ahqfjo1lsba68x1kmkabuj42g4p06yo3ax5fdwv4hdayrdrgqxklj1h4e9tyu4": [0, 365], "yot4zulubbpbvujwjydafy9peqstczc6fji": [0, 365], "w62uzzlxymj0otqnmytvhnmwswbmudy4uz2nrjnstx5fysuvrqvbyxpksyqsgukkkcy7fjttqrcg07vba5bjqhhajyy9aabxqezstnlpnfpzg3cfiw4x": [0, 365], "jqeqfmdfywkr4jkrli5dkkg": [0, 365], "a00rcvccynhs1oucpl2ser60xhypyxvcwecpjwuurngmf4uxglfaxbi7knuh3b": [0, 365], "7n2": [0, 365], "cmirxyyvfkjkx5cfzivhpbqmg0avpyviijaw7zp5vpybir6npbtrccrcqcqnjswwn1yubjzvfbosbla6vhswa1w3aurtljwyod1wenslonzqw4y5xcp22jpd3zvnjijxuzg5chuwgrim3yxelzmgtnld5hdy5rvlkuoyedgf0": [0, 365], "okpo": [0, 365], "xxkrb6ki2rvhlhgstsx7xzvxaudeluqmigqoz3dsrjggubbjppgehjpgliklopjqx5ozoepwiyc5": [0, 365], "9oadambaairaxeapwdq18h2uc9uibanflzof5afjyuawsny20t7dkyya1vifljh3tujubttpqxkqo9cqrje0xtqo84": [0, 365], "lml6fv7aletzyh1": [0, 365], "8vrqk5cjclqv6ucixhm53egoc": [0, 365], "hi8qy": [0, 365], "y0bcjaceuysfma596qw1fifms5hb9qae4518xcmuwmizgt9qh3rkubib9du6xl3nbyek5u4pptecx450sxmk": [0, 365], "aex54fmbqxpqvao": [0, 365], "hxtv": [0, 365], "dclnixf5sccusvx7hk": [0, 365], "q2p2k": [0, 365], "ngy4mbec9": [0, 365], "aad0m96gg8293a5vb0ipknmsya0zu8g": [0, 365], "pqtcsa7d5bdp096ymfep3zmgryxkuystpndzaysyphh3lsap1pfbnp3xjzw7i": [0, 365], "yz6lezdsutqplogufjwltu1v4leezynmjjuaz3yotgo": [0, 365], "vgr": [0, 365], "wtrqtrt3agg5buc4xjh4umaj5m74w8daj4ic21tcyurx5b8e49kqool0dcckzmuntjlrdb78yqwxele4dr7xabhwmdql7bffwkkdgbwgm4zsaugwh5voll4e8t3wmygqxszkadzswxo9uzxjrrlhbpbzyqktcmcfrulr2gj1nt0cfpcogrtqzm01hemqyodauyoghtfmailkyokjuwg0854xqorzpjt4g2fhex3kpmuhb2lnr7": [0, 365], "sjfyfhqz571jxlqnig8kluj5hxoqgbgfqvvrd5r7ghjcyyh5i2prmlyllwch": [0, 365], "jegqsfqhsday30gz7yyyj5lxnlfrq33grryuwazobpl": [0, 365], "ctyr2ihiyflvx3471lwhaz9z": [0, 365], "e9wov": [0, 365], "gdo1qrta4hdmp8aa6h9qarmtdtulbk": [0, 365], "wkxri54mfvuhzaudtfjcsrhor6iglhceldmmu8eq2": [0, 365], "dwkemp2zojyuoyfephbjad2tp0nel1dzm9p": [0, 365], "96pprqozzobtjbnoxbfczq2lvjpm4snblifsiw1c8x8qffkzet0lg7vyqke3bz6k96lgh5prmu3mr3x2jubuka6lqtjilsyrekmbt": [0, 365], "iqkib2i3uvbjq49rtse2rncifvdokegju8pxsugqxyymtyf": [0, 365], "iahi79e1zzslixtdtdkujptuiq0iu8xmqd30gf6vkdimj6m": [0, 365], "fvxfj8o9i2hkhggfq7jkutmkr11wfmxfjirl2oartxsqs8fxhsgazl3mcalpvxa2qwbbbqxsvscz4kuxtz7nspzyjhaj6iq3rt2udzb5ikzj0c0enxjri": [0, 365], "g0": [0, 365], "0kubiry4kxjlhfvchk7pnjxd8xjtv1oa2hurallafyj8feny3kuo6hlf9cma5lkxazku2hxkc87smtuyjtmiwmxkbeee1nchgtmncbc1k4e1vo8mgdforsaunoxciu5i42rzwy45xoktgmftpwthyfduplblnziv56di4qxqn6hfs5svawg0najpati1imqg3nfh3ms7x7deliaflkocewnsardzkpeel6v4jtdthuevicsbr1": [0, 365], "tjblru9dl2xw7o5avvysasy3z8": [0, 365], "wdxp": [0, 365], "ia6jvsrevviio0be7dzmnfnlo0txdzczmxj5q0zmawlmtq2be4o8g9aqiwkfyvaqcrw7ty7f6": [0, 365], "9rj2ksujna8ehrxgiknctttssqx5hnwkikichpxpfd0gj6d": [0, 365], "apickxsrzqzhanik8": [0, 365], "ih": [0, 365], "jtghh0ih51mu9rnsvygei": [0, 365], "o5fkqlujdj5kfhucua1qsg5oeqxuasr7wawfwliqjh6": [0, 365], "pi3mlpcqenddtwbny7mn8wdauti8exrsxqxehcn8wdkh6kd9pxrakuzltu": [0, 365], "ulir5cmriwpjna2j3kg61id1o1gfek9gqiepizt0ztijllw6soqksrlarisdruzgldnonvc5quubqaumr3bmkpjyuqcbvuuuww276se4x0qlsiqg5z": [0, 365], "tjoz3": [0, 365], "wovrew8z2t3pccex5gcpvgjbh15rkfu6mkfe0pqxzkulusxmgrhlso9k6autzp2yynwtddvrqmsdertjzwvrqc0h824lsjaecx6n0qzo2rkgrkfpfwapgwufwgfkcybgczx71clgrtjkg585": [0, 365], "lfgl1qkjs3v0hdehuwpbhpq": [0, 365], "hw1tsb6hmd": [0, 365], "9v9tb7pnyj0b7e1xcgqbsdmgbc0anyjjxwkgimgy7gcjj9kaegeiz7fliwkdwssbgfjhemiyx": [0, 365], "fpnnk4yrttai6uxa0nmmlxkrmzo0b5decvvuyehunz3z4d": [0, 365], "ixt71dflv0u7wzn1vjnkhrg": [0, 365], "9cku4vyz1vlsj5o9xrayx1rexy3gzmlejpmqaopy4a9zuyfkrjiuz2m": [0, 365], "y6fqhilbyp": [0, 365], "jo5d12t61zsqpvq2ujqph": [0, 365], "fhi": [0, 365], "dniee3if0qcf7i3uoqfoeme1rgdkrxn": [0, 365], "fpi8b1k6s7wf0kyed7ppwvsobmc4": [0, 365], "ahiji5artbr2nnpuahggpdghknboat6xolvqetyjmzog": [0, 365], "ltk9hxavqxdaty1vm": [0, 365], "zkfw5afedy6jmtdctfazabspbprs50hqdjvgw21hzu8w": [0, 365], "qtz2bwbzvpahiqlo4sp2vys52nb90azjq15mzqabe3om6xaxls5drybgqemkzqao1p6m": [0, 365], "sltxvpl6vbxct9dgjyhjtlcjptukwgspu9kn1zv7a05ionxtpldbhwwhauetub91gtgki7s4nxtjf4v0bvtz5vuzvlrupa9sawjg8jojnypdbkg4mewql3c9w5jndklt2rnoy1zzemaljwccckdrxwzggywfatsphxnicursgpr": [0, 365], "a00xbm4zg": [0, 365], "oag7gnujpjioqf61lj81podmqhqotjp20ki1fu6yogczaxdwtbkmdxnbudd1bqy7li5jcijnhq07wjunsxrqloggaihqaljk11awqx2r97qbzwszmylfhr": [0, 365], "dfbv": [0, 365], "4lu": [0, 365], "3knfaxeb5m4x6e5okwss3pvnj0lwvon9ba6hqouz1peocrn3hpwlly0bk": [0, 365], "hon8u6": [0, 365], "fpmnobaf5qecrhbuf4vx1jjuynknn6ur4p4x1xfewp2wtlkeirtbc5irshtk3y1m1ffedsoyywdoz8csea9jrudjjbcnqc": [0, 365], "4u0zzhf1iygbjtujocdmirgitrz7": [0, 365], "adi": [0, 365], "s6gksnwfcqm5nhzqxdskqxkbcuakpx0oau295lgprxib6": [0, 365], "lfk9yk2tge6lvgc89": [0, 365], "mumrbzm6zwbpsvii": [0, 365], "wwiv4bwc9bkd830xwuklqbrk2j13q": [0, 365], "hjpvpllhqew1s8xdbfzgij3j460rt7be2p6jp2mt2fquawh7oq": [0, 365], "ureciiqfj3p2tutdnnidnzr6jrlznco": [0, 365], "azbsnqcaf8jp1f8q": [0, 365], "mbrs5jbqkbxlx8y8kvzzokzpcq4nlayrpqiugvytlsema3oxayvzxr0ousrwk33mjgtkvjrbiugeq23i4wetpqc43vjvphcd5cm5a5yf8": [0, 365], "zpodmxqg07cgevidaqw60cdfaeidjjr6u0mfiykdgg0mcsxu5rg7iubeqplgwzwhapsnox9gfd": [0, 365], "4t2msmhs9zwok5icjnj5wpv6vfrfvu9uvputdomm4cxxlv0qzbatweladosvxdsjxgbsqphij54pddu8w8sxctzli0rbmlgqsikb2grexpvu20bmx1rvdnlc2bngfwmfz": [0, 365], "multipl": [0, 6, 13, 21, 28, 39, 170, 175, 179, 205, 252, 259, 337, 350, 357, 359, 360, 361, 363, 364, 365, 370, 376, 379, 382, 385], "As": [0, 357, 360, 361, 362, 365, 383], "final": [0, 347, 350, 364], "part": [0, 25, 374], "machin": [0, 25, 26, 202, 349, 351, 353, 358, 360, 361, 364, 365, 369, 370, 371, 374, 375, 376, 379, 380, 381], "model": [0, 47, 351, 365, 377, 384, 385], "friend": [0, 349, 360], "breed": [0, 365], "enabl": [0, 9, 197, 349, 351, 354, 357, 364, 374, 375, 376, 379, 380, 381], "pre": [0, 9, 151, 356, 365], "train": [0, 47, 48, 49, 351, 365], "pytorch": [0, 48, 49, 357], "resnet50": [0, 365], "pictur": [0, 365], "pass": [0, 10, 27, 34, 37, 50, 140, 202, 219, 351, 357, 360, 364, 365, 369, 374, 379, 385], "send": [0, 230, 365], "classif": 0, "predict": [0, 360, 365], "classify_bre": [0, 365], "add": [0, 27, 53, 54, 55, 56, 58, 60, 349, 350, 357, 360, 362, 363, 364, 365, 373, 376, 379], "complex": [0, 348, 351, 360, 365], "cell": [0, 365], "make": [0, 4, 9, 207, 209, 350, 351, 353, 357, 360, 364, 365, 377, 380, 383], "sure": [0, 365], "extra": [0, 197, 209, 218, 364, 365, 370, 376], "depend": [0, 347, 353, 357, 364, 365, 371, 375, 385], "matplotlib": 0, "pillow": [0, 384], "torch": [0, 48, 49, 365], "torchvis": [0, 365], "addit": [0, 20, 202, 343, 350, 363, 364, 365, 375, 376, 381, 383], "Then": [0, 365], "go": [0, 347, 365], "ahead": [0, 365], "classifyimag": [0, 365], "expens": [0, 9, 34, 39, 351, 353, 357, 360, 365, 381, 385], "possibl": [0, 94, 225, 347, 350, 351, 357, 360, 362, 364, 365, 380], "share": [0, 206, 364, 365, 385], "across": [0, 4, 21, 215, 353, 359, 360, 361, 364, 365, 370, 371, 373, 376, 379, 381], "invoc": [0, 365, 385], "return_dtyp": [0, 80, 343, 349, 365, 385], "fixed_size_list": [0, 4, 365], "dtype": [0, 4, 43, 94, 362, 365], "size": [0, 4, 9, 24, 94, 131, 213, 225, 276, 347, 349, 350, 360, 361, 365, 380, 381, 382], "def": [0, 50, 80, 170, 225, 343, 349, 357, 364, 365, 375, 376, 385], "__init__": [0, 11, 206, 207, 208, 209, 210, 226, 227, 349, 365, 385], "self": [0, 16, 27, 114, 167, 168, 176, 180, 181, 182, 185, 187, 188, 189, 190, 198, 347, 349, 365, 385], "hub": [0, 365], "nvidia": [0, 365], "deeplearningexampl": [0, 365], "torchhub": [0, 365], "nvidia_resnet50": [0, 365], "pretrain": [0, 365], "util": [0, 38, 46, 48, 49, 350, 353, 361, 365, 381, 382], "nvidia_convnets_processing_util": [0, 365], "eval": [0, 365], "devic": [0, 365], "cpu": [0, 25, 26, 349, 361, 365, 379, 380, 381, 385], "__call__": [0, 349, 365, 385], "images_url": 0, "uri": [0, 56, 219, 220, 364, 370, 371, 382], "to_pylist": [0, 343, 347, 349, 365, 385], "batch": [0, 80, 349, 370, 385], "cat": [0, 23, 343], "prepare_input_from_uri": 0, "no_grad": [0, 365], "softmax": [0, 365], "dim": [0, 365], "pick_n_best": [0, 365], "n": [0, 4, 28, 38, 82, 94, 155, 176, 185, 188, 224, 360, 361, 365, 381, 384], "now": [0, 210, 219, 221, 360, 364, 365, 380, 381], "classified_images_df": 0, "dog_nameutf8imageimag": [0, 365], "classify_breedfixedsizelist": 0, "boxer": [0, 365], "52": [0, 364, 365], "american": [0, 365], "staffordshir": [0, 365], "terrier": [0, 365], "pit": [0, 365], "bull": [0, 365], "42": [0, 363, 364, 365], "colli": [0, 365], "49": [0, 364, 379], "6": [0, 13, 19, 24, 28, 34, 35, 37, 39, 51, 52, 54, 102, 103, 104, 105, 106, 107, 140, 173, 174, 181, 189, 203, 205, 348, 361, 363, 364, 371, 375, 383], "standard": [0, 40, 156, 166, 209, 326, 327, 343, 350, 364, 365, 372], "schnauzer": [0, 365], "29": [0, 379], "rottweil": [0, 365], "78": 0, "It": [0, 11, 350, 353, 357, 360, 364, 365, 370, 372, 382, 385], "could": [0, 361, 364, 365, 376, 380], "fine": [0, 361, 365], "tune": [0, 350, 351, 364, 365], "improv": [0, 354, 357, 365, 367, 374, 381, 383], "out": [0, 9, 17, 46, 49, 55, 58, 133, 349, 350, 351, 354, 357, 360, 365, 366, 367, 370, 376, 378, 381], "backend": [0, 1, 25, 353, 361], "write_parquet": [0, 360, 365, 382], "written_df": [0, 373], "my": [0, 206, 223, 349, 377, 378], "block": [0, 3, 14, 38, 42, 44, 45, 49, 55, 56, 57, 58, 360], "filepath": [0, 363, 382], "written": [0, 55, 58, 350, 351, 360, 380], "pathutf8": 0, "36bdcc36": 0, "9fec": 0, "4be8": 0, "b22e": 0, "a792cc5c6c4c": 0, "sens": 0, "help": [0, 219, 224, 349, 350, 354, 357, 360, 361, 367, 380, 381], "inform": [0, 36, 44, 350, 353, 354, 364, 373, 375, 377, 379], "topic": [0, 367], "hand": [0, 361, 364], "nlp": 0, "similar": [0, 17, 22, 27, 28, 37, 52, 360, 361, 370, 372, 383, 384], "search": [0, 169, 171, 183, 192, 364, 376, 384], "gener": [0, 55, 58, 121, 151, 344, 347, 350, 351, 354, 355, 362, 364, 381], "gpu": [0, 349, 351, 379, 385], "excit": 0, "github": [0, 130, 350, 356, 362, 373], "control": [1, 9, 10, 25, 26, 140, 351, 357, 364, 375, 381], "execut": [1, 5, 6, 9, 14, 20, 25, 26, 28, 38, 42, 43, 44, 45, 48, 55, 56, 57, 58, 80, 225, 344, 348, 349, 350, 351, 354, 357, 361, 364, 365, 375, 376, 379, 380, 381, 384], "daft": [1, 4, 342, 343, 344, 346, 347, 348, 349, 350, 351, 353, 354, 358, 359, 360, 361, 362, 363, 365, 366, 368, 369, 372, 373, 374, 375, 379, 380, 381, 382, 383, 384, 385], "function": [1, 6, 17, 27, 33, 34, 43, 47, 50, 80, 121, 142, 151, 168, 209, 212, 217, 219, 221, 223, 225, 241, 295, 342, 343, 344, 347, 350, 351, 353, 354, 355, 356, 357, 360, 363, 364, 365, 367, 369, 371, 373, 374, 376, 377, 380], "onc": [1, 6, 25, 26, 349, 360, 361, 363, 364, 365], "start": [1, 93, 104, 110, 139, 192, 193, 218, 282, 325, 364, 367, 375, 379], "your": [1, 3, 5, 34, 50, 80, 202, 206, 227, 348, 349, 351, 356, 357, 360, 361, 362, 363, 364, 367, 369, 370, 371, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 385], "applic": [1, 44, 347, 367, 385], "variou": [1, 9, 10, 343, 351, 360, 380, 382], "dure": [1, 24, 27, 202, 353, 365], "behavior": [1, 5, 6, 10, 17, 27, 202, 209, 266, 380], "when": [1, 3, 4, 9, 10, 14, 38, 42, 44, 45, 55, 56, 57, 58, 79, 80, 113, 124, 196, 197, 202, 206, 207, 208, 209, 210, 213, 219, 220, 221, 223, 224, 225, 228, 229, 231, 343, 349, 351, 353, 358, 363, 365, 369, 370, 371, 373, 374, 380, 381, 382, 385], "e": [1, 4, 9, 10, 17, 65, 94, 110, 114, 117, 118, 119, 124, 144, 206, 224, 225, 258, 269, 347, 349, 350, 351, 353, 357, 360, 361, 362, 363, 370, 377, 380, 381, 383, 384, 385], "g": [1, 4, 9, 10, 94, 110, 124, 206, 207, 208, 223, 224, 225, 269, 349, 350, 351, 353, 360, 361, 362, 363, 370, 377, 380, 381, 383, 385], "credenti": [1, 206, 207, 209, 210, 229, 364, 368], "polici": 1, "other": [1, 9, 10, 11, 16, 21, 27, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 80, 88, 91, 112, 113, 128, 161, 162, 168, 208, 213, 227, 347, 348, 350, 351, 353, 356, 360, 361, 362, 363, 364, 365, 367, 372, 382, 383, 385], "knob": 1, "usag": [1, 354, 367, 368, 373, 378, 379, 381], "These": [1, 3, 9, 10, 168, 353, 362, 364, 377, 380], "often": [1, 343, 351, 353, 357, 360, 362, 364, 365, 370, 371, 376, 380, 383], "us": [1, 9, 10, 16, 17, 20, 25, 26, 27, 34, 38, 43, 46, 47, 48, 49, 52, 55, 56, 57, 58, 80, 81, 82, 121, 122, 130, 134, 151, 168, 175, 179, 184, 194, 195, 196, 197, 202, 203, 206, 207, 208, 209, 210, 212, 213, 217, 218, 219, 220, 221, 222, 223, 224, 225, 227, 228, 229, 231, 235, 272, 278, 300, 304, 333, 334, 335, 336, 342, 344, 347, 348, 350, 351, 353, 354, 355, 356, 358, 359, 360, 362, 364, 365, 366, 367, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384], "input": [1, 9, 16, 43, 156, 197, 205, 232, 233, 234, 235, 236, 237, 238, 240, 241, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 259, 260, 262, 263, 264, 266, 270, 271, 272, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 317, 320, 321, 322, 324, 326, 327, 328, 329, 330, 331, 332, 335, 336, 337, 339, 340, 341, 343, 349, 361, 363, 364], "datafram": [1, 4, 5, 6, 9, 10, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 227, 342, 343, 344, 347, 348, 349, 350, 352, 354, 355, 357, 359, 362, 364, 367, 368, 370, 371, 372, 373, 375, 376, 380, 381, 382, 385], "creation": [1, 344, 355], "thei": [3, 9, 46, 49, 170, 350, 353, 357, 360, 361, 362, 364, 370, 372, 380, 381, 382, 383, 385], "invok": [3, 168, 353], "oper": [3, 4, 10, 17, 33, 34, 43, 55, 56, 57, 58, 80, 117, 118, 119, 168, 219, 221, 225, 348, 349, 351, 353, 357, 359, 360, 362, 364, 367, 369, 373, 374, 377, 379, 380, 381], "enqueu": [3, 353], "": [3, 21, 38, 56, 82, 170, 195, 202, 211, 214, 218, 221, 222, 224, 225, 226, 227, 340, 347, 350, 351, 359, 360, 362, 363, 364, 365, 367, 372, 373, 374, 375, 376, 379, 380, 381, 382, 383, 384, 385], "intern": [3, 360, 370, 381], "queri": [3, 9, 27, 174, 175, 176, 179, 181, 185, 189, 191, 193, 221, 225, 272, 348, 350, 351, 353, 358, 363, 364, 368, 371, 373, 375, 383], "plan": [3, 10, 11, 20, 27, 351, 353, 357, 364, 376, 381, 383], "code": [3, 349, 351, 354, 357, 360, 361, 363, 364, 365, 367, 375, 376], "i": [3, 4, 5, 6, 9, 10, 11, 14, 17, 19, 20, 24, 25, 26, 27, 33, 34, 35, 38, 42, 43, 44, 45, 46, 47, 48, 52, 55, 56, 57, 58, 62, 63, 64, 66, 68, 71, 80, 81, 82, 94, 97, 113, 117, 118, 119, 122, 123, 132, 133, 134, 135, 136, 137, 138, 139, 151, 167, 168, 170, 172, 173, 174, 176, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 197, 198, 202, 207, 209, 212, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 244, 265, 270, 271, 301, 342, 343, 344, 347, 348, 349, 350, 351, 353, 354, 356, 358, 361, 362, 363, 364, 365, 366, 367, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 385], "being": [3, 10, 16, 121, 350, 351, 354, 370, 380, 381, 383, 385], "sourc": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 346, 347, 348, 349, 350, 353, 360, 364, 365, 370, 371, 373, 375, 376, 377, 382, 384], "A": [4, 9, 10, 11, 25, 26, 43, 50, 56, 57, 81, 82, 91, 93, 100, 113, 122, 125, 132, 142, 170, 191, 193, 218, 219, 220, 221, 222, 223, 224, 225, 347, 348, 349, 350, 351, 353, 357, 360, 361, 363, 366, 367, 370, 373, 382, 383, 385], "defin": [4, 27, 225, 343, 344, 351, 353, 355, 357, 360, 365, 367, 380], "type": [4, 5, 6, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 78, 80, 82, 90, 91, 92, 94, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 115, 116, 117, 118, 119, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 147, 152, 153, 154, 155, 156, 157, 158, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 202, 203, 204, 211, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 227, 343, 344, 346, 347, 348, 349, 351, 358, 363, 364, 365, 368], "express": [4, 10, 12, 13, 17, 21, 22, 23, 27, 29, 30, 31, 32, 33, 34, 37, 39, 40, 41, 51, 52, 53, 54, 55, 58, 203, 204, 205, 241, 250, 251, 253, 254, 255, 260, 263, 264, 270, 271, 272, 294, 295, 296, 298, 299, 301, 302, 303, 304, 305, 306, 307, 309, 310, 311, 320, 326, 327, 328, 329, 330, 332, 341, 343, 344, 348, 349, 353, 355, 358, 359, 361, 362, 364, 365, 367, 376, 385], "column": [4, 11, 12, 13, 15, 17, 19, 21, 23, 27, 29, 30, 32, 33, 34, 36, 37, 39, 40, 41, 43, 44, 45, 48, 49, 51, 53, 54, 56, 80, 81, 82, 92, 97, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 124, 125, 126, 130, 139, 140, 147, 169, 171, 172, 173, 177, 178, 183, 186, 191, 192, 199, 202, 203, 204, 205, 213, 215, 216, 218, 222, 224, 225, 259, 267, 337, 339, 340, 343, 347, 351, 353, 357, 359, 360, 362, 364, 365, 370, 371, 376, 381, 383], "classmethod": [4, 11, 346, 347], "binari": [4, 94, 124, 125, 202, 227, 266, 267, 340, 344, 362, 363, 364, 365, 370, 371, 373, 382], "creat": [4, 9, 10, 11, 21, 37, 56, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 344, 346, 348, 355, 357, 370, 371, 373, 376, 381, 382, 383, 385], "either": [4, 27, 39, 57, 80, 91, 123, 213, 219, 225, 349, 351, 357, 365, 370, 372], "month": [4, 51, 306, 362, 363], "dai": [4, 104, 105, 110, 302, 362, 363, 364, 367, 376], "decimal128": [4, 94, 370, 371, 373], "precis": [4, 225, 317, 362, 370, 371, 373], "int": [4, 6, 9, 12, 14, 24, 25, 26, 28, 34, 35, 38, 80, 93, 123, 126, 131, 133, 139, 151, 155, 156, 160, 172, 173, 176, 181, 185, 188, 189, 193, 202, 207, 209, 218, 219, 221, 222, 224, 225, 347, 349, 363, 370, 371, 373], "fix": [4, 94, 131, 225, 373], "decim": [4, 160, 317, 362, 370, 371, 373], "durat": [4, 94, 207, 209, 363], "timeunit": [4, 224, 370, 371, 373], "str": [4, 6, 9, 12, 15, 17, 19, 20, 21, 22, 23, 26, 27, 29, 30, 31, 32, 33, 34, 37, 39, 40, 41, 43, 45, 46, 51, 52, 53, 54, 55, 56, 57, 58, 78, 80, 110, 124, 125, 127, 130, 134, 199, 203, 205, 206, 207, 209, 210, 213, 215, 216, 218, 219, 220, 222, 223, 224, 225, 342, 343, 347, 348, 349, 363], "arrai": [4, 147, 215, 313, 323, 347, 349, 351, 357, 365, 385], "numer": [4, 59, 60, 69, 70, 74, 75, 82, 83, 84, 85, 86, 87, 89, 95, 96, 98, 99, 101, 114, 120, 143, 144, 145, 146, 159, 160, 163, 164, 165, 201, 344, 347, 385], "length": [4, 82, 93, 123, 132, 178, 181, 189, 193, 215, 273, 275, 290, 316, 318, 347, 357, 361, 362], "paramet": [4, 6, 9, 10, 11, 13, 14, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 37, 38, 39, 40, 41, 43, 44, 50, 51, 52, 53, 54, 55, 56, 57, 58, 67, 73, 78, 79, 80, 82, 91, 93, 97, 100, 110, 113, 121, 122, 123, 124, 125, 126, 130, 131, 132, 133, 134, 139, 140, 144, 147, 151, 155, 156, 160, 161, 162, 168, 169, 170, 171, 172, 173, 183, 184, 186, 191, 192, 196, 197, 199, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 343, 346, 347, 348, 349, 354, 364, 374, 375, 376], "must": [4, 16, 21, 110, 131, 181, 189, 194, 195, 206, 212, 215, 219, 225, 364, 370, 371, 374, 375], "fixed_size_binari": 4, "fixedsizebinari": 4, "fixedsizelist": [4, 82], "float32": [4, 362, 365, 370, 371, 373], "32": [4, 151, 155, 197, 202, 227, 347, 350, 362, 364, 365], "bit": [4, 67, 73, 94, 151, 155, 161, 162, 197, 227, 347, 362], "float64": [4, 13, 21, 40, 82, 116, 136, 137, 138, 241, 295, 326, 327, 343, 349, 359, 360, 363, 364, 370, 371, 373], "64": [4, 362, 385], "from_arrow_typ": 4, "arrow_typ": 4, "map": [4, 49, 56, 94, 142, 225, 292, 293, 344, 351, 357, 362, 370, 371, 373], "pyarrow": [4, 42, 44, 147, 211, 215, 346, 347, 358, 385], "from_numpy_dtyp": 4, "np_type": 4, "np": [4, 215, 365, 385], "numpi": [4, 215, 347, 351, 365, 384, 385], "imagemod": [4, 124, 127], "channel": 4, "ndarrai": [4, 215, 347, 349, 385], "pixel": 4, "describ": [4, 11, 353, 360], "uint8": [4, 365], "band": 4, "interpret": [4, 5, 357], "rgb": [4, 227, 269], "same": [4, 6, 11, 16, 21, 156, 343, 350, 357, 360, 361, 362, 363, 364, 365, 381, 383, 385], "advis": 4, "sinc": [4, 39, 153, 154, 157, 158, 207, 302, 303, 306, 307, 350, 357, 360, 363, 370, 372, 381], "more": [4, 6, 9, 25, 26, 33, 44, 155, 184, 218, 225, 300, 347, 348, 349, 350, 351, 353, 357, 360, 361, 362, 363, 364, 365, 370, 371, 373, 375, 377, 379, 380, 381, 382, 383, 384, 385], "represent": [4, 347, 362, 385], "mai": [4, 16, 33, 48, 49, 52, 124, 197, 202, 206, 207, 223, 343, 350, 351, 353, 356, 357, 360, 361, 362, 363, 364, 365, 367, 369, 374, 376, 377, 380, 381, 382, 385], "vari": [4, 35, 350], "leav": [4, 225, 357], "field": [4, 199, 205, 328, 329, 362, 363, 370, 371, 373], "unspecifi": 4, "caus": [4, 357, 360, 361, 380], "repres": [4, 82, 93, 100, 110, 123, 125, 126, 130, 132, 139, 142, 193, 203, 204, 347, 348, 353, 360, 362, 363, 381, 383, 385], "heterogen": 4, "differ": [4, 50, 197, 353, 357, 360, 361, 362, 363, 364, 365, 369, 374, 383, 385], "much": [4, 25, 26, 350, 351, 357, 362, 365, 380, 381, 383, 385], "flexibl": [4, 351, 362, 363, 364, 369, 374, 376], "less": [4, 9, 66, 68, 218, 350, 357, 381], "compact": [4, 371], "effici": [4, 33, 351, 357, 360, 362, 364, 365, 370, 371, 373, 380, 381, 382, 384], "By": [4, 43, 219, 353, 364, 379, 381], "infer": [4, 43, 218, 222, 224, 225, 351, 360], "underli": [4, 43, 130, 363, 370], "data": [4, 11, 26, 33, 34, 47, 48, 49, 55, 56, 57, 58, 90, 115, 116, 117, 118, 124, 128, 129, 130, 152, 186, 191, 207, 209, 211, 214, 215, 216, 219, 220, 221, 223, 225, 227, 266, 300, 340, 343, 344, 347, 349, 351, 358, 362, 363, 365, 367, 368, 369, 371, 373, 374, 377, 378, 380, 385], "int16": [4, 370, 371], "16": [4, 50, 227, 350, 362, 385], "int32": [4, 111, 153, 154, 155, 157, 158, 204, 363, 364, 370, 371, 373], "int8": [4, 362, 370, 371], "interv": [4, 110, 363], "variabl": [4, 5, 6, 31, 51, 206, 207, 209, 218, 347, 348, 354, 362, 369, 374, 383], "key_typ": [4, 370, 371], "value_typ": [4, 370, 371], "nest": [4, 142, 347, 351, 357, 370, 371, 373, 374, 383], "pair": 4, "struct": [4, 94, 205, 328, 329, 344, 361, 362, 363, 364, 365, 370, 371, 373], "two": [4, 16, 27, 60, 61, 69, 70, 72, 74, 75, 91, 112, 113, 122, 168, 350, 357, 360, 361, 362, 363, 364, 370, 371, 373, 375, 383, 385], "alwai": [4, 173, 351, 357, 363], "arbitrari": [4, 343, 349, 351, 357, 380], "sparse_tensor": 4, "shape": [4, 94, 351, 362, 365], "tupl": [4, 43, 123, 349], "sparsetensor": 4, "coo": 4, "spars": 4, "dimension": [4, 347, 362], "provid": [4, 33, 36, 37, 43, 56, 57, 82, 110, 115, 116, 123, 125, 126, 128, 139, 169, 171, 175, 179, 183, 192, 193, 195, 197, 203, 204, 206, 207, 209, 210, 211, 212, 213, 214, 221, 225, 340, 342, 346, 347, 349, 350, 351, 353, 357, 362, 363, 364, 370, 373, 374, 376, 377, 380, 381, 382, 385], "given": [4, 11, 24, 80, 94, 97, 131, 144, 169, 171, 175, 179, 183, 191, 192, 193, 194, 195, 209, 292, 293, 347, 350, 357, 374, 377, 381], "charact": [4, 93, 167, 170, 175, 176, 179, 181, 184, 188, 189, 193, 213, 218, 242, 273, 315, 316, 362, 365], "dict": [4, 26, 43, 45, 46, 48, 49, 54, 56, 215, 216, 218, 222, 224, 225, 349], "name": [4, 15, 17, 19, 23, 27, 33, 43, 48, 49, 51, 53, 54, 55, 56, 58, 78, 196, 197, 199, 203, 205, 206, 209, 216, 218, 222, 224, 225, 328, 329, 343, 347, 348, 349, 350, 354, 360, 361, 362, 363, 364, 365, 382, 383], "child": [4, 347, 362], "timezon": [4, 195, 210, 219, 363, 370, 371, 373], "uint16": 4, "unsign": [4, 73, 94, 151, 162, 197, 347, 362], "uint32": [4, 103, 104, 105, 106, 107, 108, 111, 363], "uint64": [4, 17, 23, 81, 92, 132, 135, 142, 177, 178, 343, 359], "use_thread_pool": 5, "daftcontext": [5, 6, 9, 10, 379], "runner": [5, 6, 9, 25, 219, 224, 344, 353, 354, 370, 371, 376, 380], "user": [5, 6, 11, 46, 56, 209, 343, 344, 351, 353, 354, 355, 357, 361, 364, 365, 366, 377, 380, 381, 382, 383], "environ": [5, 6, 38, 206, 207, 209, 210, 351, 354, 357, 364, 367, 368, 380, 383], "daft_runn": [5, 6, 381], "py": [5, 375, 379], "after": [5, 6, 9, 80, 218, 222, 224, 225, 360, 370, 373, 376, 380, 385], "noop_if_initi": 6, "max_task_backlog": [6, 379], "force_client_mod": 6, "option": [6, 9, 14, 20, 27, 33, 34, 35, 39, 43, 51, 55, 56, 57, 58, 110, 121, 139, 151, 184, 196, 197, 206, 207, 209, 210, 213, 218, 219, 220, 221, 222, 223, 224, 225, 266, 347, 348, 349, 350, 351, 360, 364, 371, 376, 377, 380, 382, 385], "ray_address": 6, "throw": [6, 385], "error": [6, 52, 56, 82, 124, 202, 266, 347, 349, 350, 354, 357, 361, 364, 372, 376, 378, 385], "process": [6, 48, 151, 184, 350, 351, 353, 357, 360, 361, 362, 370, 378, 382, 385], "head": [6, 356, 375, 379], "node": [6, 20, 375, 379], "first": [6, 13, 17, 18, 19, 21, 23, 27, 28, 33, 37, 38, 39, 40, 50, 51, 52, 53, 54, 78, 80, 81, 82, 90, 91, 92, 93, 94, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 115, 116, 117, 118, 119, 122, 128, 129, 130, 140, 142, 147, 152, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 198, 203, 204, 205, 207, 209, 211, 214, 215, 216, 241, 242, 245, 250, 251, 261, 294, 295, 296, 309, 326, 327, 330, 343, 347, 348, 349, 350, 351, 359, 360, 361, 363, 364, 365, 375, 379, 382, 383, 385], "effect": [6, 353, 357], "subsequ": [6, 360, 364, 369, 370, 373, 374, 377], "per": [6, 25, 26, 39, 80, 202, 207, 209, 343, 350, 351, 360, 361, 369, 373, 374, 380, 382], "kwarg": [7, 8, 9, 10, 25, 26, 50, 202, 349, 357], "context": [7, 8, 343, 357, 375, 379], "manag": [7, 8, 350, 378, 381], "wrap": [7, 8, 94, 362], "set_execution_config": 7, "reset": [7, 8, 357], "origin": [7, 8, 142, 343, 348, 351, 360, 365, 373], "afternward": [7, 8], "pydaftexecutionconfig": [9, 379], "scan_tasks_min_size_byt": 9, "scan_tasks_max_size_byt": 9, "broadcast_join_size_bytes_threshold": 9, "parquet_split_row_groups_max_fil": 9, "sort_merge_join_sort_with_aligned_boundari": 9, "hash_join_partition_size_leni": 9, "sample_size_for_sort": 9, "num_preview_row": [9, 14], "parquet_target_files": 9, "parquet_target_row_group_s": 9, "parquet_inflation_factor": 9, "csv_target_files": 9, "csv_inflation_factor": 9, "shuffle_aggregation_default_partit": 9, "partial_aggregation_threshold": 9, "high_cardinality_aggregation_threshold": 9, "read_sql_partition_size_byt": 9, "enable_aq": 9, "enable_native_executor": 9, "default_morsel_s": 9, "shuffle_algorithm": 9, "pre_shuffle_merge_threshold": 9, "enable_ray_trac": 9, "scantask_splitting_level": 9, "global": [9, 10, 17, 29, 30, 32, 34, 39, 40, 41, 81, 82, 348, 353, 361, 369, 374, 381], "aspect": 9, "write_": [9, 360, 382], "befor": [9, 10, 16, 124, 209, 349, 360, 376, 379, 381], "old": [9, 10, 349], "current": [9, 10, 19, 25, 26, 27, 37, 42, 43, 44, 45, 46, 47, 48, 49, 53, 54, 56, 122, 196, 197, 209, 210, 219, 224, 227, 351, 357, 360, 364, 370, 371, 373, 374, 376, 377, 381, 383], "should": [9, 10, 17, 20, 29, 30, 32, 40, 41, 43, 46, 170, 191, 209, 349, 350, 353, 358, 363, 375, 379, 381], "minimum": [9, 97, 138, 150, 151, 225, 281, 296, 297, 347], "merg": [9, 56, 371, 373], "scantask": 9, "increas": [9, 25, 26, 202, 361, 365, 380, 381, 385], "yield": [9, 141], "lead": [9, 182, 291, 360], "bigger": [9, 363], "fewer": [9, 381], "96": 9, "mib": [9, 376, 380], "maximum": [9, 28, 97, 136, 148, 202, 207, 209, 225, 279, 294], "upper": [9, 90, 97, 244, 370], "bound": [9, 123, 133, 225, 244, 265, 353, 370], "384": 9, "side": [9, 27, 182, 190, 290, 318, 357, 361, 364], "smaller": [9, 360, 380, 381], "threshold": 9, "broadcast": [9, 27], "10": [9, 27, 37, 51, 145, 208, 209, 225, 287, 349, 350, 359, 361, 363, 364, 367, 375], "group": [9, 23, 33, 82, 172, 173, 224, 343, 353, 360, 363, 367, 370, 381], "whether": [9, 20, 28, 35, 44, 56, 79, 90, 100, 117, 118, 119, 124, 128, 129, 132, 140, 152, 169, 170, 171, 175, 179, 183, 184, 186, 191, 192, 197, 206, 207, 209, 218, 219, 222, 224, 225, 347, 348, 373], "algorithm": [9, 27, 43, 58, 81, 151, 347, 357, 362, 374], "sort": [9, 51, 283, 350, 353, 357, 360, 361, 364, 375, 376, 381], "both": [9, 27, 350, 351, 357, 361, 363, 381, 383], "align": 9, "boundari": 9, "faster": [9, 350, 351, 357, 360, 364], "cost": [9, 209, 350, 381], "skew": 9, "risk": 9, "oom": [9, 350, 378, 381], "left": [9, 27, 67, 161, 181, 182, 244, 290, 361, 365], "hash": [9, 27, 151, 155, 297, 304, 347, 381], "alreadi": [9, 48, 56, 349, 351, 361, 375, 379], "correctli": [9, 349, 364, 373, 377, 381], "isn": [9, 349], "ratio": 9, "least": [9, 381], "repartit": [9, 39, 353, 358, 381], "equal": [9, 16, 62, 63, 66, 71, 113, 215, 225, 361, 363, 373], "20": [9, 27, 50, 51, 343, 349, 359, 364, 376], "preview": [9, 14, 360, 375], "target": [9, 24, 34, 94, 381], "write": [9, 55, 56, 57, 58, 349, 351, 357, 360, 364, 365, 367, 368, 369, 371, 374, 376, 380, 383, 385], "512mb": 9, "128mb": 9, "inflat": 9, "factor": [9, 357], "aggreg": [9, 13, 17, 23, 29, 30, 32, 33, 40, 41, 76, 77, 343, 344, 351, 353, 360, 367, 381, 384], "200": [9, 33, 241, 250, 251, 294, 295, 296, 326, 327, 330, 364], "partial": 9, "nativ": [9, 218, 222, 224, 349, 351, 357, 362, 369, 373, 374, 375, 381, 383, 385], "10000": 9, "select": [9, 16, 17, 19, 50, 53, 54, 78, 79, 90, 91, 92, 93, 94, 115, 117, 118, 119, 128, 129, 140, 152, 167, 168, 169, 174, 175, 176, 177, 178, 179, 180, 181, 182, 185, 187, 188, 189, 190, 193, 198, 203, 205, 225, 241, 250, 251, 294, 295, 296, 326, 327, 330, 348, 349, 360, 363, 364, 365, 376, 382, 383], "high": [9, 202, 360, 365, 367, 381], "cardin": 9, "sql": [9, 17, 22, 27, 28, 37, 52, 175, 179, 225, 241, 250, 251, 294, 295, 296, 326, 327, 330, 344, 355, 358, 368, 382], "executor": [9, 130, 351, 363], "morsel": [9, 381], "131072": 9, "shuffl": [9, 34, 353, 357, 381], "map_reduc": 9, "pre_shuffle_merg": 9, "1gb": 9, "trace": 9, "tmp": [9, 370], "session_latest": 9, "log": [9, 124, 143, 145, 146, 202, 347, 354, 380], "aggress": [9, 380], "might": [9, 357, 365], "even": [9, 360, 363, 364, 380], "pydaftplanningconfig": [10, 379], "absenc": [10, 364], "builder": 11, "logicalplanbuild": 11, "item": [11, 12, 21, 48, 49, 215, 351, 362, 385], "accord": [11, 184, 363], "expect": [11, 56, 350], "step": [11, 196, 197, 360, 364, 380], "requir": [11, 39, 46, 155, 206, 209, 210, 219, 221, 223, 349, 350, 351, 353, 356, 357, 360, 361, 376, 380, 381], "arriv": 11, "attribut": [11, 206, 207, 208, 209, 210, 226, 227, 342], "union": [12, 13, 17, 21, 22, 23, 25, 26, 27, 29, 30, 31, 32, 33, 34, 37, 39, 40, 41, 43, 51, 52, 55, 56, 58, 80, 94, 100, 132, 211, 214, 215, 218, 219, 222, 224, 225, 343, 349], "slice": [12, 347], "iter": [12, 13, 23, 25, 26, 31, 33, 41, 43, 46, 51, 211, 343], "mycol": 12, "to_agg": [13, 343], "Will": 13, "entir": [13, 14, 26, 27, 49, 172, 173, 359, 360, 361, 370, 371, 372, 375, 376, 380, 381], "full": [13, 46, 49, 130, 343, 348, 350, 357, 359, 362, 363, 376, 383], "import": [13, 17, 18, 19, 21, 23, 24, 25, 26, 27, 28, 33, 34, 35, 37, 39, 40, 46, 50, 51, 52, 53, 54, 78, 80, 81, 82, 90, 91, 92, 93, 94, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 115, 116, 117, 118, 119, 122, 128, 129, 130, 140, 142, 147, 152, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 198, 203, 204, 205, 210, 211, 214, 215, 216, 221, 343, 348, 349, 351, 354, 357, 359, 360, 361, 363, 364, 365, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 382, 385], "student_id": 13, "test1": 13, "7": [13, 18, 19, 24, 28, 34, 35, 37, 39, 52, 102, 103, 104, 105, 106, 107, 111, 140, 172, 173, 348, 349, 350, 361, 362, 363], "test2": 13, "9": [13, 19, 24, 33, 34, 35, 37, 39, 52, 348, 361, 363, 375, 380], "agg_df": 13, "total_min": 13, "total_max": 13, "8500000000000001": 13, "6000000000000001": 13, "85": 13, "concaten": [16, 60, 76, 91, 168, 246, 343, 349, 362, 363], "vertic": 16, "sum": [16, 33, 284, 343, 359, 360], "exactli": [16, 351, 385], "wish": [16, 33, 34, 202, 211, 214, 347, 350, 356, 367, 369, 374, 380, 382], "expr": [16, 53, 161, 162, 342, 348, 383], "cast": [16, 362, 364, 365, 376, 385], "ensur": [16, 223, 350, 351, 354, 370, 371, 376, 380, 381], "compat": [16, 130, 209, 210, 231, 351, 360, 370, 371, 373], "top": [16, 80, 353, 356, 357, 362, 364, 369, 370, 376, 384], "bottom": [16, 385], "case": [17, 27, 80, 170, 175, 179, 197, 209, 348, 349, 351, 360, 362, 363, 364, 365, 374, 377, 380, 385], "liter": [17, 25, 26, 27, 55, 56, 58, 91, 100, 124, 132, 151, 169, 171, 186, 191, 192, 202, 347], "veri": [17, 34, 202, 350, 351, 357, 360, 363, 379], "similarli": [17, 350], "foo": [17, 25, 26, 54, 92, 167, 168, 169, 177, 180, 182, 183, 186, 187, 190, 198, 211, 214, 215, 216, 219, 220, 221, 348, 349, 353, 360, 363, 371, 382], "bar": [17, 25, 26, 54, 92, 167, 168, 169, 177, 180, 182, 183, 186, 187, 190, 198, 211, 214, 348, 363, 382], "baz": [17, 92, 167, 168, 169, 177, 178, 180, 182, 183, 186, 187, 190, 198, 211, 214, 348, 353, 363, 382], "equival": [17, 19, 53, 54, 168, 357, 363, 383], "howev": [17, 351, 360, 361, 379, 380, 381, 383], "chang": [17, 27, 34, 348, 357, 377, 378], "non": [17, 27, 81, 100, 113, 121, 132, 136, 137, 138, 241, 245, 250, 251, 294, 295, 296, 326, 327, 330, 354, 363, 370, 374, 385], "command": [17, 375, 379, 383], "expand": [17, 259, 337, 361], "uniqu": [18, 33, 39, 81, 142, 357, 369], "duplic": [18, 21, 27, 361], "x": [18, 19, 21, 24, 27, 28, 34, 35, 37, 39, 50, 52, 53, 54, 78, 80, 88, 92, 93, 102, 103, 105, 106, 108, 109, 119, 123, 129, 142, 152, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 192, 193, 194, 195, 198, 203, 204, 239, 241, 250, 251, 258, 265, 294, 295, 296, 326, 327, 330, 347, 348, 349, 353, 357, 363, 364, 371, 381], "y": [18, 19, 21, 24, 27, 34, 35, 37, 39, 52, 54, 78, 88, 94, 123, 168, 194, 195, 203, 204, 239, 265, 347, 348, 349, 363], "unique_df": 18, "ones": [19, 54, 360, 385], "df_without_x": 19, "ascii": [20, 170, 184], "simpl": [20, 348, 351, 356, 360, 362, 364, 381, 383, 384], "iobas": 20, "print": [20, 25, 26, 38, 46, 348, 351, 360, 377, 379, 383], "produc": [20, 48, 121, 142, 349, 351, 353, 382, 383], "mermaid": 20, "op": 20, "rather": [20, 206, 209, 225, 365], "detail": [20, 155, 156, 203, 349, 351, 360, 364, 370, 373, 375, 379], "locat": [20, 340, 364, 365], "sy": [20, 364, 365], "stdout": 20, "everi": [21, 134, 204, 349, 350, 356, 357, 360, 361, 363, 385], "becom": [21, 351, 364, 367, 376], "own": [21, 350, 364, 365, 367, 379, 385], "empti": [21, 43, 91, 93, 141, 173, 209], "entri": 21, "columninputtyp": [21, 27, 39, 55, 58], "evalu": [22, 52, 357, 363, 384], "group_bi": [23, 33, 343], "pet": [23, 343], "alex": [23, 343], "jordan": [23, 343], "sam": [23, 343], "rilei": [23, 343], "grouped_df": [23, 343], "min_ag": [23, 343], "max_ag": [23, 343], "any_valu": [23, 113, 343], "coalesc": [24, 34, 381], "preserv": [24, 50], "naiv": [24, 38], "greedili": 24, "round": [24, 243, 262, 365], "robin": 24, "fashion": 24, "hit": [24, 364, 367], "taken": 24, "account": [24, 206, 374], "df_with_5_partit": 24, "num_partit": [24, 34, 225, 364, 376, 380], "results_buffer_s": [25, 26], "num_cpu": [25, 26, 349], "micropartit": 25, "objectref": 25, "asynchron": [25, 26], "mani": [25, 26, 43, 349, 351, 357, 360, 361, 362, 363, 364, 376, 381, 382], "buffer": [25, 26, 347], "while": [25, 26, 50, 350, 351, 353, 357, 371, 380, 381], "fill": [25, 26, 115, 116, 260], "work": [25, 26, 43, 47, 50, 142, 212, 217, 350, 351, 353, 357, 360, 361, 362, 363, 366, 372, 373, 375, 377, 380, 381], "until": [25, 26, 290, 318, 360], "consum": [25, 26, 353], "higher": [25, 26, 202, 357, 365, 380], "throughput": [25, 26, 28, 202, 380, 381, 385], "decreas": [25, 26, 361, 381], "lower": [25, 26, 46, 90, 97, 202, 244, 360, 362, 370], "deem": [25, 26], "appropri": [25, 26, 34, 349, 360, 369, 374, 381], "total": [25, 26, 347, 349, 350, 361, 380, 381], "avail": [25, 26, 43, 342, 350, 353, 357, 359, 361, 365, 375, 377, 379, 380, 383, 385], "into_partit": [25, 34, 380, 381], "tablest": 25, "statist": [25, 343, 354, 364, 370, 373], "miss": [25, 129, 152, 351, 362], "form": [26, 369, 374], "iter_partit": 26, "left_on": [27, 361], "right_on": [27, 361], "inner": [27, 140, 349], "outer": 27, "anti": 27, "semi": 27, "cross": 27, "strategi": [27, 225, 357], "sort_merg": 27, "prefix": [27, 192, 350], "suffix": [27, 171], "wise": [27, 353, 361], "prepend": 27, "conflict": 27, "append": [27, 55, 56, 57, 58, 218, 365, 370, 373, 376, 385], "although": 27, "recomput": [27, 360], "tree": [27, 353, 361], "cach": [27, 350, 360], "roadmap": [27, 357, 368], "df1": [27, 348, 361, 364], "w": [27, 126, 156], "30": [27, 51, 195, 207, 209, 343, 359, 363, 364], "40": [27, 51, 359, 364], "joined_df": 27, "right_": 27, "right_b": 27, "_right": 27, "b_right": 27, "match": [27, 43, 56, 170, 171, 172, 173, 175, 179, 186, 192, 213, 309, 310, 311, 359, 361, 365, 370, 371, 373, 375, 376, 381], "what": [27, 124, 225, 351, 353, 357, 360, 362, 365, 383, 385], "choos": [27, 122, 347, 361, 363, 365, 369, 374, 381, 385], "collis": 27, "rais": [27, 52, 56, 124, 202, 347, 354], "valueerror": 27, "df_limit": 28, "eager": 28, "maxim": [28, 353, 381], "latenc": 28, "eagerli": [28, 360], "id": [31, 33, 51, 206, 207, 209, 210, 221, 225, 354, 364], "variable_nam": [31, 51], "value_nam": [31, 51], "unpivot": 31, "pivot_col": 33, "value_col": 33, "agg_fn": 33, "distinct": [33, 81, 113, 170, 251, 364, 376], "avoid": [33, 34, 353, 360, 380], "without": [33, 206, 207, 209, 350, 351, 360, 364, 375, 376, 380], "determin": [33, 225, 360, 381], "version": [33, 44, 219, 349, 354, 357, 364, 371, 375, 383], "platform": [33, 364, 371], "maco": 33, "window": [33, 206], "100": [33, 241, 250, 251, 294, 295, 296, 326, 327, 330, 343, 351, 364, 365, 381], "150": [33, 241, 295], "250": [33, 364], "300": [33, 330, 364], "manycolumnsinputtyp": [33, 51], "partition_bi": [34, 370], "those": [34, 80, 343, 362, 370], "otherwis": [34, 38, 56, 218, 219, 222, 224, 225, 353, 363], "random": [34, 35, 49], "occur": [34, 56, 57, 202, 347, 380], "potenti": [34, 361, 362], "mere": 34, "obtain": [34, 350, 385], "consid": [34, 170, 209, 351, 357, 383], "favor": 34, "adjac": [34, 381], "repartitioned_df": 34, "fraction": 35, "with_replac": 35, "seed": [35, 121, 151, 263, 297, 347], "sampled_df": 35, "replac": [35, 55, 56, 58, 184, 260, 312, 349, 361, 364], "enough": [38, 365, 381], "displai": [38, 360], "ipython": 38, "instal": [38, 223, 364, 365, 368, 375, 377, 379], "pretti": [38, 383], "repl": 38, "fall": [38, 209, 347, 364, 376], "back": [38, 209, 225, 347, 349, 351, 364, 370, 376], "onto": [38, 380, 385], "quit": [39, 381], "slow": [39, 351, 362, 380], "multicolumn": 39, "descend": [39, 140, 283], "flag": [39, 350], "sorted_df": 39, "deviat": [40, 166, 326, 327, 343], "col_a": [40, 50, 343], "816496580927726": [40, 343], "convert": [42, 43, 44, 45, 46, 47, 48, 49, 124, 180, 184, 194, 195, 198, 205, 211, 214, 219, 220, 221, 223, 227, 256, 269, 289, 308, 338, 346, 347, 349, 360, 363, 370, 371, 372, 373, 376, 383], "yet": [42, 44, 45, 48, 52, 351], "meta": 43, "seri": [43, 151, 344, 349, 353, 355, 357, 385], "rayrunn": [43, 47, 212, 217, 353, 380], "stream": [43, 46, 48, 49, 370, 371, 381], "metadata": [43, 56, 207, 213, 351, 353, 354, 357, 370], "eas": [43, 350, 353, 357], "argument": [43, 50, 227, 349, 357, 360, 361, 364, 369, 374, 375, 379, 385], "suppli": [43, 82, 348, 361, 364, 369, 374, 376, 379], "overrid": [43, 206, 349, 369, 374], "coerce_temporal_nanosecond": 44, "tempor": [44, 344], "13": [44, 364], "conveni": [46, 80, 362, 369, 374, 382, 385], "iter_row": 46, "prefer": [46, 225], "individu": [46, 350, 361, 363, 372], "ml": [47, 351, 357], "iterabledataset": [48, 49], "pydict": [48, 49], "meant": 48, "dataload": 48, "doe": [48, 49, 80, 142, 172, 173, 197, 351, 358, 360, 362, 363, 372, 373, 377, 380, 381], "shard": 48, "hook": 48, "multi": [48, 170, 361, 362, 370, 371], "mind": [48, 365], "multiprocess": 48, "under": [48, 342, 349, 350, 353, 357, 360, 361, 364, 369, 374, 375, 376, 383], "hood": [48, 353, 357, 360, 361, 364, 376, 383], "feed": [48, 351], "to_ray_dataset": [48, 49, 351], "better": [49, 350, 354, 360, 365, 367, 380], "soon": [49, 383], "readi": [49, 364, 367], "func": [50, 80], "callabl": [50, 80, 209, 225, 349], "arg": [50, 349, 364], "syntax": [50, 351, 358], "chain": [50, 364, 383], "add_1": 50, "multiply_x": 50, "12": [50, 109, 195, 360, 361, 363, 364, 371], "posit": [50, 93, 239, 270, 357], "keyword": [50, 364, 369, 374, 379, 385], "wide": 51, "long": [51, 370, 371, 373], "2020": [51, 363], "2021": [51, 102, 103, 105, 106, 108, 109, 110, 194, 195, 363], "2022": [51, 111], "jan": 51, "50": [51, 343, 364], "feb": 51, "60": 51, "inventori": 51, "identifi": [51, 56, 354, 369], "except": [51, 363], "melt": 51, "filter": [52, 130, 219, 221, 225, 348, 351, 353, 357, 360, 361, 363, 364, 370, 371, 373, 376, 377, 380, 383], "sql_expr": [52, 344, 348, 360, 363, 383], "pars": [52, 194, 195, 197, 213, 218, 222, 224, 333, 334, 348, 363], "AND": [52, 61, 348, 364, 376], "column_nam": [53, 382], "new_df": [53, 54], "root_dir": [55, 58], "write_mod": [55, 58], "overwrit": [55, 56, 57, 58, 370], "partition_col": [55, 56, 58, 225, 364, 382], "io_config": [55, 56, 57, 58, 196, 197, 202, 206, 207, 208, 209, 210, 213, 218, 219, 220, 221, 222, 223, 224, 335, 336, 339, 340, 364, 365, 369, 372, 374], "were": [55, 58, 350, 373], "randomli": [55, 58], "uuid": [55, 58, 373], "root": [55, 58, 95, 165, 324], "subpartit": [55, 56, 58], "remot": [55, 56, 58, 196, 197, 202, 213, 223, 351, 358, 365, 375, 379, 382], "filenam": [55, 58], "datacatalogt": [56, 219], "deltalak": [56, 219, 370, 377], "deltat": 56, "unitycatalogt": [56, 219], "ignor": [56, 57, 79, 82, 170, 218, 221, 225], "schema_mod": 56, "descript": 56, "custom_metadata": 56, "dynamo_table_nam": 56, "allow_unsafe_renam": 56, "pathlib": 56, "destin": [56, 57, 351, 382], "scheme": [56, 208, 353, 381], "anyth": 56, "action": 56, "commit": [56, 364, 376], "info": [56, 379], "dynamodb": 56, "lock": 56, "unsaf": 56, "pyiceberg": [57, 221, 364, 373], "delet": [57, 370, 371, 373], "respect": [57, 364], "compress": 58, "snappi": 58, "absolut": [59, 232], "e1": [60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75], "e2": [60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75], "bitwis": [61, 72], "anoth": [62, 63, 64, 66, 68, 71, 168, 170, 374], "greater": [63, 64, 131], "invert": 65, "shift": [67, 73, 161, 162], "mod": 69, "multipli": 70, "OR": [72, 347], "sign": [73, 162, 362], "arithmet": [73, 162, 363, 383], "subtract": 74, "divid": [75, 363], "ignore_nul": 79, "syntact": [80, 363], "sugar": [80, 363], "tim": 80, "f": [80, 364, 370, 376], "x_val": 80, "isnumer": 80, "els": [80, 347], "num_x": 80, "wa": [80, 82, 209, 350, 357], "ran": [80, 376, 385], "calcul": [81, 82, 88, 136, 137, 138, 148, 149, 150, 151, 166, 200, 225, 233, 234, 236, 237, 238, 239, 240, 241, 248, 249, 258, 280, 284, 285, 286, 287, 288, 295, 297, 322, 324, 326, 327, 330, 331, 347, 360, 363, 385], "approxim": [81, 82], "hyperloglog": 81, "distinct_valu": 81, "percentil": [82, 225], "sketches_ddsketch": 82, "crate": 82, "paper": 82, "ddsketch": 82, "fulli": [82, 351, 364, 373, 381], "mergeabl": 82, "quantil": 82, "sketch": 82, "rel": [82, 110, 350, 357, 364], "guarante": [82, 343, 381], "masson": 82, "et": 82, "al": 82, "score": [82, 359], "approx_median_scor": 82, "75": [82, 364], "approx_percentiles_scor": 82, "9742334234767163": 82, "993661701417351": 82, "9742334": 82, "9900000000000001": 82, "993661": 82, "990000": 82, "find": [82, 294, 296, 361, 363, 367, 383], "len": 82, "elementwis": [83, 84, 85, 86, 87, 89, 98, 99, 101, 143, 144, 145, 146, 159, 164, 201, 347], "arc": [83, 85, 87, 233, 236, 238, 347], "cosin": [83, 84, 98, 112, 233, 234, 248, 347], "invers": [84, 86, 89, 233, 234, 236, 237, 238, 240, 347], "hyperbol": [84, 86, 89, 234, 237, 240, 347], "sine": [85, 86, 164, 236, 237, 322, 347], "tangent": [87, 89, 201, 238, 240, 331, 347], "four": [88, 347], "quadrant": [88, 347], "arctang": [88, 347], "coordin": [88, 347], "radian": [88, 248, 249, 256, 322, 331, 347], "pi": 88, "inclus": 90, "hello": [91, 93, 170, 184, 349, 379], "xfe": [91, 93], "world": [91, 93, 170, 184, 349, 351, 379], "retriev": [92, 102, 103, 104, 105, 106, 107, 108, 109, 111, 133, 147, 177, 178, 199, 292, 293, 350, 364, 375, 377, 384], "ell": 93, "mpt": 93, "end": [93, 104, 139, 171, 193, 257, 282, 351, 363, 364, 381], "combin": [94, 348, 358, 360], "overflow": 94, "256": [94, 365], "cube": 95, "cotang": [99, 249, 347], "countmod": [100, 132], "59": [102, 103, 105, 106, 108, 109, 110, 363, 364], "microsecond": [102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 363, 364], "05": [102, 103, 104, 105, 106, 107, 111, 364], "06": [102, 103, 105, 106, 107, 364], "07": [102, 103, 104, 105, 106, 107, 111, 363, 379], "00": [102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 195, 363, 364], "week": [104, 110, 364], "mondai": 104, "sundai": 104, "2024": [104, 107, 111, 357, 364, 376, 379], "23": [109, 349, 363, 364], "relative_to": 110, "minut": [110, 363, 367], "millisecond": [110, 195, 207, 209, 363], "second": [110, 207, 209, 350, 363, 376], "hour": [110, 210, 303, 350, 363], "unix": 110, "epoch": [110, 153, 154, 157, 158, 302, 303, 306, 307], "1970": [110, 153, 154, 157, 158], "2023": 111, "distanc": 112, "safe": 113, "comparison": [113, 350, 352], "regular": [113, 183, 191, 309, 310, 311, 364], "NOT": [113, 364, 376], "behav": 113, "fill_valu": [115, 116, 260], "infin": [117, 270], "propag": [117, 118, 119, 121], "inf": 117, "xxh3_64bit": 121, "cryptograph": 121, "if_tru": 122, "if_fals": 122, "condition": 122, "condit": [122, 360], "a_if_bigger_else_b": [122, 363], "chosen": 122, "bbox": 123, "box": [123, 265, 350, 385], "encod": [124, 197, 267, 335, 365], "etc": [124, 184, 340, 349, 351, 354, 357, 380], "encount": [124, 202, 357, 380], "warn": 124, "prevent": 124, "relat": [124, 364], "unsupport": [124, 225], "represnt": 124, "image_format": [125, 267], "imageformat": 125, "h": [126, 195, 363, 364, 370], "desir": 126, "jq_queri": 130, "jq": [130, 363], "jqlang": 130, "manual": [130, 358, 368, 370, 372, 376], "jaq": [130, 363], "01mf02": 130, "idx": 133, "index": [133, 139, 172, 173, 174, 193, 194, 195, 261, 282, 356, 358, 361, 364, 371], "subset": 139, "neg": [139, 270], "offset": [139, 347], "onward": 139, "up": [139, 243, 349, 350, 351, 353, 357, 360, 362, 363, 369, 374, 379, 380, 381], "nulls_first": 140, "occurr": [142, 174, 186, 261, 312], "appear": [142, 170, 252], "letter": [142, 370], "natur": [143, 285, 286, 353], "718281828459045": 144, "logarithm": [144, 285, 286, 287, 288, 347], "pa": [147, 211, 215, 346, 385], "pa_arrai": 147, "map_": 147, "from_arrow": [147, 347], "map_col": 147, "num_hash": [151, 297, 347], "ngram_siz": [151, 297, 347], "hash_funct": [151, 297, 347], "murmurhash3": [151, 347], "xxhash": [151, 347], "sha1": [151, 347], "ngram": [151, 297, 347], "repeat": [151, 297, 347], "permut": [151, 297, 347], "token": [151, 196, 197, 206, 207, 209, 210, 229, 335, 336, 347, 364, 377], "space": [151, 170, 184, 347, 350, 380], "normal": [151, 365, 373, 385], "recommend": [151, 362, 380, 381, 385], "shingl": [151, 347], "One": [151, 347, 363, 383], "transform": [153, 154, 155, 156, 157, 158, 351, 360, 365], "murmur3_32_x86": 155, "apach": [155, 156, 221, 350, 353, 357, 360, 364, 367, 368, 382], "org": [155, 156, 356], "appendix": 155, "truncat": [156, 181, 189, 305], "place": [160, 202, 317], "squar": [165, 324], "utf": [167, 177, 178, 180, 182, 187, 190, 198, 362], "uppercas": [167, 170, 198, 338], "lowercas": [167, 170, 180, 184, 289, 300], "rest": [167, 365, 383], "alias": [168, 241, 295, 383], "fooa": 168, "barb": 168, "bazc": 168, "substr": [169, 170, 174, 247, 257, 261, 309, 310, 312, 313, 323, 325, 363], "pattern": [169, 170, 171, 172, 173, 175, 179, 183, 186, 191, 192, 196, 197, 252, 309, 310, 311, 312, 335, 336, 360, 364, 372, 382], "o": [169, 186, 226, 344, 353, 354, 364, 369, 373, 374], "pick": [169, 171, 183, 191, 192, 363, 369, 374], "whole_word": [170, 252], "case_sensit": [170, 252], "longest": 170, "word": [170, 362], "abc": 170, "bc": 170, "de": [170, 351], "unicod": [170, 184], "still": [170, 357, 370, 380, 381], "sensit": [170, 179], "geftdaft": [171, 192], "regex": [172, 173, 183, 186, 191, 196, 197], "r": [172, 173, 186, 191, 194, 195], "123": [172, 173, 186, 195, 363, 364], "456": [172, 173, 195, 363, 364, 365], "789": [172, 173, 364], "012": [172, 173, 364], "345": [172, 173, 364], "678": [172, 173, 364], "captur": [172, 173], "extract_al": 172, "found": [174, 350, 363, 373, 375], "df_daft": 174, "insensit": 175, "wildcard": [175, 179, 203, 213, 218, 222, 224, 364, 365, 382], "_": [175, 179], "ft": [175, 193], "nchar": [176, 188], "quer": 176, "engi": 176, "test": [178, 350, 353, 364, 376, 382], "hei": 178, "daf": 179, "pad": [181, 189, 290, 318, 385], "longer": [181, 189, 361], "00daft": 181, "0queri": 181, "strip": [182, 190, 365], "whitespac": [182, 184, 190, 291, 319], "ba": [183, 186], "remove_punct": [184, 300], "nfd_unicod": [184, 300], "white_spac": [184, 300], "dedupl": [184, 300], "off": 184, "nworld": 184, "remov": [184, 291, 319, 381], "punctuat": 184, "decompos": 184, "nfd": 184, "newlin": 184, "doubl": [184, 218, 370, 371, 373], "daftdaftdaftdaftdaft": 185, "queryqueryqueryqueryqueri": 185, "engineengineengineengineengin": 185, "123r": 186, "123z": 186, "fooo": 186, "foooo": 186, "fa": 186, "exact": 186, "oof": 187, "rab": 187, "zab": 187, "ut": 188, "gine": [188, 193], "daft00": 189, "query0": 189, "trail": [190, 319], "extend": [193, 383], "eri": 193, "doc": [194, 195, 370, 375, 379], "chrono": [194, 195], "latest": [194, 195, 219, 364], "strftime": [194, 195], "html": [194, 195, 363, 364, 379], "3f": [195, 363], "0800": [195, 363], "asia": 195, "shanghai": 195, "cst": 195, "tokens_path": [196, 197], "special_token": [196, 197, 335, 336], "openai": [196, 197], "tiktoken": [196, 197], "cl100k_base": [196, 197], "o200k_bas": [196, 197], "p50k_base": [196, 197], "p50k_edit": [196, 197], "r50k_base": [196, 197], "llama3": [196, 197], "use_special_token": [197, 335, 336], "llama": 197, "preprocess": [197, 351], "edg": [197, 356, 357], "slightli": [197, 357], "disabl": [197, 225, 354, 379], "max_connect": [202, 207, 209, 339, 340], "treat": [202, 218, 339], "observ": [202, 375, 381], "excess": [202, 381], "issu": [202, 351, 360, 361, 370, 371, 373, 374, 377, 380, 381], "dn": 202, "slowdown": 202, "reduc": [202, 219, 224, 359, 361, 364, 376], "amount": [202, 209, 219, 224, 349, 351, 353, 360, 364, 376, 380, 381], "server": [202, 375], "core": [202, 206, 350, 351, 354, 357, 360, 361, 366, 367, 370, 371, 376, 378], "network": [202, 350, 357, 375], "bandwidth": 202, "thread": [202, 207, 209, 219, 224, 351, 353], "fallback": 202, "overridden": [202, 349, 363, 364], "val": 204, "storage_account": [206, 228, 374], "access_kei": [206, 208, 209, 210, 228, 231, 364, 374], "sas_token": [206, 228], "bearer_token": [206, 228, 230, 372], "tenant_id": [206, 228], "client_id": [206, 228], "client_secret": [206, 228], "use_fabric_endpoint": [206, 228, 374], "endpoint_url": [206, 209, 228, 231], "use_ssl": [206, 209, 228, 231], "blob": [206, 228, 364, 370, 371, 374], "authent": [206, 207, 209, 364, 368, 372, 377], "microsoft": [206, 368], "entra": 206, "attempt": [206, 207, 209, 347, 350], "fetch": [206, 370, 382], "azure_storage_account": 206, "secret": [206, 209, 210], "azure_storage_kei": 206, "signatur": 206, "azure_storage_sas_token": 206, "bearer": 206, "azure_storage_token": 206, "tenant": 206, "client": [206, 209, 368], "fabric": [206, 368], "endpoint": [206, 209, 377], "net": 206, "dafttestdata": 206, "xxx": [206, 208, 209, 210], "az": [206, 208, 374], "project_id": [207, 229], "retry_initial_backoff_m": [207, 209, 231], "connect_timeout_m": [207, 209, 231], "read_timeout_m": [207, 209, 231], "num_tri": [207, 208, 209, 231], "cloud": [207, 229, 350, 351, 357, 364, 370, 371, 377, 380, 382], "google_application_credentials_json": 207, "google_application_credenti": 207, "project": [207, 221, 223, 225, 349, 350, 351, 353, 357, 360, 364, 367, 376], "servic": [207, 213, 350, 353, 356, 364, 368, 371, 374], "oauth2": 207, "refresh": 207, "vend": 207, "catalog": [207, 219, 344, 348, 351, 353, 357, 360, 368, 373, 383], "1000m": [207, 209], "wait": [207, 209, 360], "abf": [208, 374], "key_id": [208, 209, 210, 231, 364, 369], "azureconfig": [208, 374], "gcsconfig": 208, "path3": 208, "region_nam": [209, 231, 364, 365], "session_token": [209, 210, 231, 364, 369], "credentials_provid": [209, 210, 231], "buffer_tim": [209, 231], "retry_mod": [209, 231], "verify_ssl": [209, 231], "check_hostname_ssl": [209, 231], "requester_pai": [209, 231], "force_virtual_address": [209, 231], "profile_nam": [209, 231], "system": [209, 210, 219, 224, 231, 354, 365, 368, 372, 380, 381], "region": [209, 350, 364], "east": 209, "wrongli": 209, "detect": [209, 210, 348, 364, 383], "s3credenti": 209, "actual": [209, 353, 360, 363, 365, 369, 374], "expir": 209, "session": [209, 210, 354, 364], "temporari": [209, 210, 364], "fail": [209, 347, 350, 380], "certif": 209, "cert": 209, "legaci": 209, "openssl": 209, "assum": [209, 210, 219, 372, 382], "transfer": [209, 364, 376], "bulk": 209, "aws_profil": 209, "expiri": 210, "perman": 210, "timedelta": [210, 363], "get_credenti": [210, 364], "lambda": [210, 385], "utc": [210, 219, 364, 370, 371, 373], "ddf": [212, 357], "been": [212, 362, 375, 376], "bracket": [213, 365], "recurs": [213, 347, 365], "layer": [213, 226, 353, 357, 365], "directori": [213, 218, 222, 224, 353, 365, 374, 382], "along": [213, 353, 365], "filesystem": [213, 364, 365, 382], "pd": [214, 364, 370], "pd_df": 214, "chunkedarrai": [215, 347, 349], "sequenc": 215, "raydataset": 217, "infer_schema": [218, 222, 224, 225], "has_head": 218, "double_quot": 218, "quot": 218, "escape_char": 218, "comment": 218, "allow_variable_column": 218, "file_path_column": [218, 222, 224], "hive_partit": [218, 222, 224], "schema_hint": [218, 222, 224], "_buffer_s": [218, 222], "_chunk_siz": [218, 222, 224], "definit": [218, 222, 224, 225, 365, 381], "hint": [218, 222, 224, 225, 349], "header": 218, "doubled_quot": 218, "escap": 218, "hive_styl": [218, 222, 224], "_multithreaded_io": [219, 224], "push": [219, 221, 225, 357, 364, 376], "instanc": [219, 349, 350, 351, 353, 357, 362, 380], "referenc": [219, 348, 350], "glue": 219, "databrick": [219, 377], "uniti": [219, 368], "rfc": 219, "3339": 219, "iso": 219, "8601": 219, "decid": [219, 224, 225], "table_uri": [220, 364], "hudi": [220, 351, 357, 368], "snapshot_id": 221, "offici": [221, 350, 364, 373], "snapshot": [221, 364, 371], "lancedb": 223, "lanc": 223, "row_group": 224, "coerce_int96_timestamp_unit": 224, "correspond": [224, 346, 348, 364, 385], "conn": 225, "partition_bound_strategi": 225, "disable_pushdowns_to_sql": 225, "infer_schema_length": 225, "sqlalchemi": [225, 376], "factori": [225, 364, 376], "abl": [225, 349, 350, 365, 369, 372, 374, 377, 381, 385], "connectorx": [225, 376], "arrow": [225, 347, 351, 353, 357, 360, 364, 376, 385], "driver": [225, 350, 369, 374], "declar": 225, "dialect": [225, 376, 383], "sqlglot": [225, 357, 376], "translat": [225, 353, 357], "document": [225, 351, 355, 357, 362, 363, 364, 365, 367, 373, 377, 379, 380, 382], "min_max": 225, "rang": [225, 244, 353, 370, 385], "percentile_disc": 225, "33rd": 225, "66th": 225, "down": [225, 262, 357, 360, 364, 376, 380, 385], "my_tabl": [225, 348, 364, 373, 382], "sqlite": [225, 364, 376, 382], "my_databas": 225, "db": [225, 364, 376], "create_conn": [225, 364, 376], "create_engin": [225, 364, 376], "la": 227, "rgba": [227, 269], "grayscal": [227, 269], "alpha": [227, 357], "l16": 227, "la16": 227, "rgb16": 227, "rgba16": 227, "rgb32f": 227, "rgba32f": 227, "web": [230, 368], "max_connections_per_io_thread": 231, "separ": [235, 278, 350, 363, 365, 370, 374], "angl": [239, 248, 249, 256, 308, 322, 331], "axi": 239, "averag": [241, 280, 295, 359], "tbl": [241, 250, 251, 294, 295, 296, 326, 327, 330], "string_input": [242, 247, 257, 261, 273, 274, 275, 289, 290, 291, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 323, 325, 333, 334, 338], "nearest": [243, 262, 363], "panic": 244, "todo": [245, 246], "compon": [253, 254, 255, 264, 298, 299, 320, 332, 341], "day_of_week": 255, "expon": 258, "exponenti": 258, "input_imag": [265, 267, 268, 269], "bounding_box": 265, "crop": [265, 357, 385], "handl": [266, 360, 364, 370, 376, 380, 385], "resiz": [268, 365], "infinit": 270, "Not": [271, 301, 372], "jsonpath": 272, "leftmost": 273, "chunk_siz": 276, "chunk": [276, 347, 353, 360], "portion": 282, "reach": [290, 318], "associ": [292, 293, 347], "map_get": 292, "map_extract": 293, "among": [294, 296], "avg": 295, "clean": [300, 351, 363], "num_bucket": 304, "degre": [308, 347], "rightmost": 316, "70": [326, 327], "710678118": [326, 327], "stddev": [327, 343], "token_path": [335, 336], "upload": 340, "page": [342, 362, 373, 380], "overview": [342, 357, 362, 367, 375], "view": 343, "expressionsproject": 343, "agg_concat": 343, "concat": 343, "agg_list": 343, "map_group": 343, "600": [343, 364], "std_dev": 343, "stdev": 343, "14": 343, "730919862656235": 343, "331": 343, "62026476076517": 343, "manipul": [344, 353, 360], "lineag": 344, "constructor": [344, 382], "miscellan": [344, 355], "from_pyarrow_schema": 346, "pa_schema": 346, "to_pyarrow_schema": 346, "usual": [347, 360], "arcco": 347, "arccosh": 347, "arcsin": 347, "arcsinh": 347, "arctan": 347, "arctan2": 347, "arctanh": 347, "co": 347, "cot": 347, "exp": 347, "static": 347, "lib": 347, "arrow_seri": 347, "whose": 347, "put": 347, "from_numpi": 347, "numpy_seri": 347, "dimens": 347, "1d": 347, "from_panda": 347, "pd_seri": 347, "try": [347, 358, 360, 363, 385], "from_pylist": [347, 382], "list_seri": 347, "pyobj": 347, "pyobject": 347, "disallow": 347, "coercion": 347, "ln": 347, "log10": 347, "log2": 347, "minhash": 347, "murmurhash": 347, "murmur3": 347, "sin": 347, "size_byt": 347, "particular": [347, 362], "omit": 347, "bitmask": 347, "tan": 347, "to_arrow": [347, 349, 385], "sqlcatalog": [348, 364], "register_glob": 348, "earli": [348, 357, 362], "develop": [348, 350, 351, 354, 356, 357, 373, 377, 379, 380], "experi": [348, 351, 353, 357, 380, 381], "statement": [348, 351, 360], "reli": [348, 368, 370], "namespac": [348, 363, 369, 374], "result_df": 348, "ON": 348, "regist": 348, "caller": 348, "scope": 348, "incorpor": [348, 382], "copi": [348, 351, 358, 361, 364, 365, 371, 373, 376], "modifi": [348, 376], "snippet": [348, 357, 364, 371, 373, 379], "mechan": [349, 364, 380], "lazili": 349, "decor": [349, 385], "pleas": [349, 350, 354, 356, 362, 369, 370, 373, 374, 376, 377, 379, 380, 383], "consult": [349, 350, 373, 380, 382], "num_gpu": [349, 385], "memory_byt": 349, "batch_siz": 349, "slower": [349, 380], "kernel": [349, 353, 360, 362], "overhead": [349, 351, 381], "cover": [349, 361, 377], "ticket": 349, "contribut": 349, "receiv": [349, 385], "constant": 349, "add_const": 349, "v": [349, 362, 373, 383], "new_x": 349, "21": [349, 354, 364], "On": [349, 354, 380], "concurr": [349, 351, 357, 371], "udf_needs_2_cpu": 349, "udf_needs_4_cpu": 349, "override_opt": [349, 385], "param": 349, "alloc": [349, 384], "pure": [349, 351], "placement": 349, "free": [349, 353, 380], "cuda_visible_devic": 349, "experienc": 349, "heap": 349, "rtype": 349, "userdefinedpyfunclik": 349, "init_arg": 349, "resource_request": 349, "resourcerequest": 349, "multiply_and_add": 349, "to_numpi": 349, "example_udf": 349, "parametr": [349, 385], "example_udf_4cpu": 349, "with_concurr": 349, "mygpuudf": 349, "text": [349, 351, 360, 364, 376, 379, 384], "mygpuudf_8_concurr": 349, "with_init_arg": 349, "runtim": [349, 375, 379, 380, 385], "myudfwithinit": 349, "init": [349, 375], "myudfwithinit_custominitarg": 349, "bar_world": 349, "bar_custom": 349, "blanklin": 349, "against": [350, 356, 357], "popular": 350, "modin": 350, "goal": 350, "demonstr": [350, 364], "meet": [350, 360, 381], "solid": 350, "esoter": 350, "workload": [350, 351, 358, 365, 375, 380, 381], "reliabl": [350, 367], "highli": 350, "intervent": 350, "Of": [350, 383], "enterpris": [350, 351, 372], "stress": 350, "multimod": [350, 351, 358, 360], "job": [350, 351, 365, 368], "terabyt": [350, 353], "tradit": [350, 360], "tabular": [350, 351, 353, 357, 365], "basic": [350, 351], "question": [350, 384], "commonli": [350, 363, 365, 382], "typic": 350, "i3": 350, "2xlarg": 350, "vcpu": 350, "61g": 350, "1900g": 350, "nvme": [350, 380], "ssd": [350, 380], "chose": 350, "emr": 350, "host": [350, 364, 382], "kubernet": [350, 380], "section": [350, 357, 360, 361, 364, 366, 367, 383], "consist": [350, 357, 385], "3x": 350, "7x": 350, "4x": 350, "unabl": 350, "due": [350, 380], "around": [350, 351, 353, 372, 385], "100gb": 350, "worker": [350, 369, 374, 375, 379, 380], "244gb": 350, "spill": [350, 353, 380, 381], "785": 350, "0x": 350, "2648": 350, "6010": 350, "did": 350, "finish": 350, "speed": [350, 353, 357, 360], "futur": [350, 351, 357, 360], "next": [350, 360, 383], "10x": 350, "1tb": 350, "nearli": 350, "stage": 350, "7774": 350, "27161": 350, "5x": 350, "8x": 350, "third": 350, "crash": [350, 376], "capabl": [350, 371, 373, 377, 380, 382], "significantli": [350, 365, 380], "previou": [350, 360, 361], "sweep": 350, "interest": [350, 362], "61gb": 350, "16x": 350, "linearli": 350, "maintain": [350, 353, 357, 380], "script": [350, 375], "repositori": [350, 377], "sparksql": [350, 383], "q1": 350, "q8": 350, "ek": 350, "coloc": 350, "zone": 350, "west": 350, "level": [350, 360, 364, 367, 369, 370, 373, 380], "simul": 350, "realist": 350, "layout": 350, "100sf": 350, "512": 350, "1000sf": 350, "laid": [350, 366, 367], "flat": [350, 364], "folder": [350, 364, 382], "structur": [350, 353, 362, 382, 383], "instruct": 350, "open": [350, 363, 364, 370, 371, 373, 375, 377, 384], "reproduc": 350, "deploi": 350, "kuberai": 350, "creator": 350, "solut": [350, 351], "approach": [350, 382], "readm": 350, "link": [350, 364], "0_1_3": 350, "i32xlarg": 350, "part1": 350, "part2": 350, "6_10_0": 350, "gz": 350, "2023_5_0": 350, "q126": 350, "0_20_1": 350, "thought": [351, 360], "conceptu": [351, 357, 360], "home": [351, 364], "scienc": [351, 353, 357, 360], "ad": [351, 360, 361, 363, 383], "hoc": 351, "explor": [351, 363, 367], "pipelin": [351, 353], "consumpt": 351, "analyz": 351, "summari": 351, "report": 351, "focus": 351, "deep": [351, 357, 384], "involv": [351, 357], "media": 351, "video": 351, "audio": [351, 360], "discuss": [351, 357, 362], "polar": [351, 360], "eagar": 351, "drawback": 351, "scalabl": [351, 370], "problem": 351, "deal": [351, 363, 378, 381], "good": [351, 361, 362], "choic": [351, 357], "aim": [351, 357, 367], "modern": 351, "facto": 351, "scala": 351, "wrapper": 351, "leverag": [351, 360, 380, 381, 382, 383], "ecosystem": 351, "excel": 351, "suffer": 351, "serial": [351, 353, 362], "itself": [351, 364, 376, 385], "jvm": 351, "subprocess": 351, "forth": 351, "somewhat": 351, "allevi": 351, "intermedi": 351, "expert": 351, "citizen": 351, "veloc": 351, "dynam": 351, "program": 351, "hoop": 351, "strongli": 351, "2d": [351, 385], "flatten": [351, 385], "unravel": 351, "again": [351, 359], "debug": 351, "breakpoint": 351, "extrem": [351, 354, 364, 369, 373, 374, 380, 383], "difficult": [351, 357], "lack": 351, "granular": [351, 364], "heavi": 351, "schedul": [351, 353], "downstream": [351, 360, 362], "suit": 351, "increasingli": 351, "domain": 351, "horovod": 351, "prem": [351, 357], "migrat": 351, "stick": [351, 357], "delai": [351, 353, 357], "realli": [351, 383], "fledg": 351, "abstract": [351, 353, 357, 360, 362, 377, 385], "explicit": [351, 357, 360], "visual": [351, 360], "perfect": 351, "sent": 351, "entrypoint": 351, "telemetri": 352, "technic": [352, 357], "benchmark": [352, 357], "face": [353, 357], "respons": 353, "physicalplan": 353, "poll": 353, "state": [353, 357, 364, 385], "compris": [353, 361], "purpos": [353, 360], "datastructur": 353, "thing": [353, 357, 360, 380, 382, 385], "pull": 353, "modul": [353, 354, 364], "understood": 353, "pyrunn": [353, 373, 380], "reason": [353, 360, 361, 380], "independ": [353, 381], "resid": [353, 369, 374], "unlock": 353, "span": 353, "pressur": [353, 380], "possibli": [353, 365], "understand": [353, 354, 357, 367, 369, 374], "partitionspec": 353, "invari": [353, 362], "intellig": [353, 360], "decis": 353, "unnecessari": [353, 370], "movement": [353, 381], "inherit": [353, 361, 363], "compos": [353, 362, 365], "arrow2": [353, 357], "bind": 353, "pyo3": 353, "computation": [353, 357], "heavili": [353, 357], "raw": [353, 357, 377], "bug": 354, "bottleneck": 354, "privaci": 354, "serious": 354, "opt": 354, "daft_analytics_en": 354, "event": 354, "proprietari": 354, "sell": 354, "bui": 354, "v0": 354, "audit": 354, "analyticscli": 354, "track": [354, 357, 371], "walltim": 354, "stacktrac": 354, "remain": 354, "privat": [354, 364, 365, 372], "welcom": [355, 366, 367], "termin": 356, "bleed": 356, "night": 356, "branch": 356, "pypi": 356, "anaconda": 356, "eventu": [356, 380], "inc": 356, "archiv": 356, "ref": 356, "zip": [356, 385], "toolchain": 356, "point": [357, 382], "anyon": 357, "know": [357, 370, 376], "awar": [357, 369, 374], "whenev": [357, 364], "illustr": 357, "pariti": 357, "presenc": 357, "move": [357, 381], "doesn": [357, 360, 370], "iloc": 357, "multiindex": 357, "realiti": 357, "reset_index": 357, "opinion": 357, "simpler": 357, "therefor": [357, 370], "prone": [357, 364, 376], "achiev": [357, 361], "loc": 357, "accomplish": 357, "paralleliz": 357, "fact": 357, "peopl": 357, "complic": 357, "sequenti": 357, "phrase": 357, "docstr": 357, "inconsist": 357, "unclear": 357, "affect": [357, 361, 380], "believ": 357, "challeng": [357, 380], "trade": 357, "curv": 357, "clariti": 357, "straightforward": 357, "awai": [357, 362], "worri": [357, 381], "guidelin": 357, "too": [357, 360, 361, 380, 381], "hard": 357, "especi": [357, 363, 365, 382], "me": 357, "shouldn": 357, "signific": 357, "gain": 357, "kind": 357, "slowli": 357, "far": 357, "rough": 357, "repo": 357, "map_partit": 357, "my_funct": 357, "a_add_on": [357, 363], "crop_imag": [357, 385], "offer": 357, "scikit": 357, "activ": 357, "neural": 357, "quickstart": [357, 367], "toi": [357, 364], "extern": [357, 382], "read_sql": [357, 364, 376, 382], "oppos": 357, "progress": [357, 373], "elimin": 358, "mean_scor": 359, "max_scor": 359, "class_count": 359, "abov": [359, 363, 364, 376, 381, 383, 385], "perhap": [359, 380], "15": [359, 361, 363, 364, 371, 379], "interoper": 360, "close": [360, 364, 373, 376, 383], "spreadsheet": 360, "design": 360, "trigger": [360, 385], "fundament": 360, "primarili": 360, "mention": 360, "earlier": 360, "complementari": 360, "come": [360, 369, 374, 383], "done": [360, 361, 363, 365], "other_df": 360, "arrang": 360, "summar": 360, "depth": 360, "congratul": 360, "why": [360, 376, 378], "messag": [360, 380], "defer": 360, "inmemoryscan": 360, "65": 360, "cannot": [360, 361, 380, 385], "experiment": [360, 381], "crucial": [360, 383], "suggest": [360, 362], "try_thi": 360, "BY": 360, "AS": [360, 363, 364, 376], "peek": 360, "notic": [360, 363, 380, 383], "adher": 360, "modif": 360, "increment": [360, 363, 371], "sometim": [361, 374, 380, 385], "exclud": [361, 365], "seen": [361, 364], "18": [361, 363, 364], "sever": [361, 385], "caveat": 361, "Be": 361, "consciou": 361, "broken": 361, "2x": 361, "overli": [361, 380], "rule": [361, 381], "thumb": [361, 381], "twice": 361, "abbrevi": 362, "ubiquitu": 362, "term": [362, 364, 376], "semant": 362, "128": [362, 385], "127": [362, 379], "digit": 362, "overload": 362, "child_dtyp": 362, "field_nam": 362, "children": 362, "impos": 362, "awesom": 362, "ineffici": 362, "thu": [362, 369, 374, 379, 385], "suitabl": 362, "generaliz": 362, "protobuf": 362, "candid": 362, "promot": 362, "touch": 362, "team": [362, 365], "love": [362, 374, 383], "canon": [362, 364, 365, 366], "uniformli": 362, "nhwc": 362, "hardcod": 363, "oftentim": 363, "helper": [363, 383], "member": 363, "person": 363, "alic": [363, 364], "bob": [363, 364], "charli": 363, "concis": 363, "divis": 363, "a_divide_two": 363, "a_gt_1": 363, "b2": 363, "foofoo": 363, "barfoo": 363, "bazfoo": 363, "There": [363, 364, 365, 380, 385], "b2_contains_b": 363, "www": 363, "0001eeaf4aed83f9": 363, "url_download": [363, 383], "doctyp": 363, "om": 363, "itemscop": 363, "itemtyp": 363, "sche": 363, "x00h": 363, "0001e": 363, "json_queri": 363, "a_eq_b": 363, "sleev": 363, "THEN": 363, "rich": [363, 365], "plus_10_second": 363, "09": [363, 364], "timestamp_str": 363, "york": 363, "ny_tim": 363, "to_datetim": 363, "america": 363, "new_york": 363, "31": 363, "est": 363, "period": 363, "hour_start": 363, "08": [363, 364, 376], "ci": [364, 365], "exit": [364, 365], "synthet": 364, "censu": 364, "census001": 364, "int64ageint64workclassutf8educationutf8education_numint64marital_statusutf8occupationutf8relationshiputf8raceutf8sexutf8capital_gainint64capital_lossint64hours_per_weekint64native_countryutf8incomeutf8": 364, "048self": 364, "emp": 364, "incsom": 364, "college10marri": 364, "civ": 364, "spousecraft": 364, "repairhusbandwhitemale0040unit": 364, "lt": [364, 365], "50k": 364, "117": 364, "11th7never": 364, "marri": 364, "childwhitefemale0016unit": 364, "221privatesom": 364, "college10nev": 364, "marriedhandl": 364, "cleanersnot": 364, "familyblackmale0056unit": 364, "331privatebachelors13marri": 364, "spouseadm": 364, "clericalhusbandasian": 364, "pac": 364, "islandermale0040oth": 364, "gt": [364, 365], "421privatesom": 364, "marriedsalesnot": 364, "familywhitefemale0040unit": 364, "543local": 364, "govbachelors13marri": 364, "clericalwifewhitefemale0036unit": 364, "661self": 364, "incprof": 364, "school15marri": 364, "spouseexec": 364, "managerialhusbandwhitemale0195840unit": 364, "733self": 364, "inch": 364, "grad9marri": 364, "spousefarm": 364, "fishinghusbandwhitemale0040unit": 364, "count_row": 364, "028": 364, "grad9nev": 364, "relativeasian": 364, "islandermale0045oth": 364, "135private7th": 364, "8th4never": 364, "marriedoth": 364, "serviceunmarriedwhitefemale0025unit": 364, "237feder": 364, "govh": 364, "spousetransport": 364, "movinghusbandwhitemale0040oth": 364, "341self": 364, "incbachelors13nev": 364, "marriedprof": 364, "specialtynot": 364, "familyblackmale0040unit": 364, "454privatesom": 364, "college10divorcedadm": 364, "clericalnot": 364, "familywhitemale0019unit": 364, "532private11th5nev": 364, "marriedcraft": 364, "repairunmarriedwhitemale0040unit": 364, "635self": 364, "incbachelors13divorcedtech": 364, "supportnot": 364, "731self": 364, "spouseoth": 364, "servicehusbandwhitemale0025unit": 364, "tpch": 364, "l_commentutf8l_commitdatedatel_discountfloat64l_extendedpricefloat64l_linenumberint64l_linestatusutf8l_orderkeyint64l_partkeyint64l_quantityint64l_receiptdatedatel_returnflagutf8l_shipdatedatel_shipinstructutf8l_shipmodeutf8l_suppkeyint64l_taxfloat64": 364, "egular": 364, "court": 364, "the1996": 364, "120": 364, "0433203": 364, "721o115518935171996": 364, "22n1996": 364, "13deliv": 364, "IN": 364, "persontruck7689510": 364, "ly": 364, "slyli": 364, "bold": 364, "1996": 364, "280": 364, "0969788": 364, "522o16730908361996": 364, "20n1996": 364, "12take": 364, "returnmail7309090": 364, "riousli": 364, "dep1996": 364, "050": 364, "116381": 364, "283o1636997881996": 364, "31n1996": 364, "29take": 364, "returnreg": 364, "air3699790": 364, "lite": 364, "fluffili": 364, "de1996": 364, "0929767": 364, "924o1213150281996": 364, "16n1996": 364, "21noneair4631510": 364, "pend": 364, "fox": 364, "re1996": 364, "140": 364, "137596": 364, "965o12402664241996": 364, "01n1996": 364, "30nonefob1526710": 364, "arefulli": 364, "ex1996": 364, "070": 364, "0748267": 364, "846o11563445321996": 364, "03n1996": 364, "30deliv": 364, "personmail634480": 364, "ven": 364, "deposit": 364, "breach": 364, "a1997": 364, "14071798": 364, "721o210616973381997": 364, "02n1997": 364, "28take": 364, "returnrail1169940": 364, "ongsid": 364, "furious": 364, "brave": 364, "acco1994": 364, "040": 364, "0673200": 364, "151f3429697451994": 364, "23r1994": 364, "02noneair1796980": 364, "sample_taxi": 364, "vendoridint32tpep_pickup_datetimetimestamp": 364, "tpep_dropoff_datetimetimestamp": 364, "passenger_countfloat64trip_distancefloat64ratecodeidfloat64store_and_fwd_flagutf8pulocationidint32dolocationidint32payment_typeint64fare_amountfloat64extrafloat64mta_taxfloat64tip_amountfloat64tolls_amountfloat64improvement_surchargefloat64total_amountfloat64congestion_surchargefloat64airport_feefloat64": 364, "12023": 364, "062023": 364, "4701": 364, "11n230481103": 364, "51": 364, "50116": 364, "262023": 364, "28": 364, "5301": 364, "51n14223819": 364, "850117": 364, "152": 364, "442023": 364, "2222": 364, "21n114186113": 364, "53": 364, "530121": 364, "22023": 364, "172023": 364, "5910": 364, "661n797927": 364, "210": 364, "500112": 364, "162023": 364, "3222": 364, "21n229263111": 364, "410": 364, "520118": 364, "5305": 364, "71n88141123": 364, "500128": 364, "17": 364, "092023": 364, "3115": 364, "331n45162124": 364, "710": 364, "530132": 364, "72": 364, "492023": 364, "1010": 364, "761n17010715": 364, "810": 364, "510111": 364, "82": 364, "mybucket": [364, 382], "protocol": [364, 369, 372, 374, 382], "my_anonymous_io_config": 364, "melbourn": 364, "airbnb": 364, "melbourne_airbnb": 364, "price": 364, "review_scores_r": 364, "idint64textutf8priceint64review_scores_ratingfloat64": 364, "25586695beach": 364, "art": 364, "deco": 364, "heart": 364, "st": 364, "kilda90non": 364, "1057401modern": 364, "baysid": 364, "studio": 364, "apartment7595": 364, "24949385spaciou": 364, "saint": 364, "kilda": 364, "view47non": 364, "20075093reward": 364, "richmond": 364, "outstand": 364, "22096": 364, "16275657close": 364, "centr": 364, "7199": 364, "15136111warm": 364, "gym": 364, "pool": 364, "sauna": 364, "mcg7996": 364, "4122488st": 364, "loft": 364, "beachsid": 364, "hideaway8993": 364, "13721853central": 364, "room": 364, "35085": 364, "substitut": [364, 365], "avriiil": [364, 365], "yellow_tripdata_2023": 364, "eu": [364, 365], "north": [364, 365], "passenger_countint64trip_distancefloat64ratecodeidint64store_and_fwd_flagutf8pulocationidint32dolocationidint32payment_typeint64fare_amountfloat64extrafloat64mta_taxfloat64tip_amountfloat64tolls_amountfloat64improvement_surchargefloat64total_amountfloat64congestion_surchargefloat64airport_feefloat64": 364, "gcp": 364, "dedic": [364, 365], "warehous": [364, 371, 376], "postgresql": [364, 382, 383], "password": [364, 382], "port": [364, 379, 382], "connector": [364, 376], "zero": [364, 376], "alchemi": [364, 376], "easiest": 364, "sqlite3": [364, 376], "IF": [364, 376], "book": [364, 376], "titl": [364, 376], "author": [364, 368, 376], "insert": [364, 376], "INTO": [364, 376], "gatsbi": [364, 376], "scott": [364, 376], "fitzgerald": [364, 376], "1925": [364, 376], "kill": [364, 376, 380], "mockingbird": [364, 376], "harper": [364, 376], "lee": [364, 376], "1960": [364, 376], "1984": [364, 376], "georg": [364, 376], "orwel": [364, 376], "1949": [364, 376], "catcher": [364, 376], "rye": [364, 376], "j": [364, 376], "saling": [364, 376], "1951": [364, 376], "titleutf8authorutf8yearint64": 364, "gatsbyf": 364, "fitzgerald1925": 364, "mockingbirdharp": 364, "lee1960": 364, "1984georg": 364, "orwell1949": 364, "ryej": 364, "salinger1951": 364, "substitu": 364, "engine_uri": 364, "rpelgrim": 364, "daft_sql": 364, "echo": [364, 376], "csv_file_path": 364, "sql_df": [364, 383], "to_sql": 364, "censust": 364, "con": 364, "index_label": 364, "if_exist": 364, "ageint64workclassutf8educationutf8education_numint64marital_statusutf8occupationutf8relationshiputf8raceutf8sexutf8capital_gainint64capital_lossint64hours_per_weekint64native_countryutf8incomeutf8": 364, "48self": 364, "21privatesom": 364, "31privatebachelors13marri": 364, "43local": 364, "61self": 364, "33self": 364, "educ": 364, "rank": [364, 376], "bigqueri": [364, 376], "trend": [364, 376], "credentials_path": [364, 376], "service_account_credenti": [364, 376], "google_trend": [364, 376], "top_term": [364, 376], "refresh_d": [364, 376], "subqueri": [364, 376], "lengthi": [364, 376], "particularli": [364, 376, 382], "read_deltalak": [364, 370, 374, 377], "delta_t": 364, "boto3": 364, "cred": 364, "secret_kei": [364, 369], "xint64": 364, "warehouse_path": 364, "pyiceberg_catalog": 364, "load_tabl": [364, 373, 377], "taxi_dataset": 364, "read_iceberg": [364, 373], "vendoridint64tpep_pickup_datetimetimestamp": 364, "passenger_countfloat64trip_distancefloat64ratecodeidfloat64store_and_fwd_flagutf8pulocationidint64dolocationidint64payment_typeint64fare_amountfloat64extrafloat64mta_taxfloat64tip_amountfloat64tolls_amountfloat64improvement_surchargefloat64total_amountfloat64congestion_surchargefloat64airport_feefloat64": 364, "102023": 364, "3610": 364, "971n16114129": 364, "310": 364, "500114": 364, "082023": 364, "2711": 364, "11n4323717": 364, "910": 364, "540116": 364, "92": 364, "042023": 364, "37": 364, "4912": 364, "511n48238114": 364, "5150134": 364, "482023": 364, "2501": 364, "91n1387112": 364, "500120": 364, "8501": 364, "292023": 364, "1911": 364, "431n10779111": 364, "280119": 364, "682": 364, "342023": 364, "5211": 364, "841n161137112": 364, "5100127": 364, "222023": 364, "19": 364, "4911": 364, "661n239143112": 364, "110": 364, "420120": 364, "522": 364, "27": 364, "122023": 364, "56111": 364, "71n142200145": 364, "510": 364, "743164": 364, "442": 364, "advantag": [364, 373, 377], "hidden": [364, 373], "read_hudi": [364, 371], "_hoodie_commit_timeutf8_hoodie_commit_seqnoutf8_hoodie_record_keyutf8_hoodie_partition_pathutf8_hoodie_file_nameutf8idint32nameutf8isactivebooleanintfieldint32longfieldint64floatfieldfloat32doublefieldfloat64decimalfielddecimal128": 364, "datefielddatetimestampfieldtimestamp": 364, "binaryfieldbinaryarrayfieldlist": 364, "arr_struct_f1": 364, "arr_struct_f2": 364, "mapfieldmap": 364, "map_field_value_struct_f1": 364, "map_field_value_struct_f2": 364, "structfieldstruct": 364, "field1": 364, "field2": 364, "child_struct": 364, "child_field1": 364, "child_field2": 364, "bytefieldint32shortfieldint32": 364, "2024041817323569420240418173235694_0_0id": 364, "alicebytefield": 364, "shortfield": 364, "300a22e8257": 364, "e249": 364, "45e9": 364, "ba46": 364, "115bc85adcba": 364, "0_0": 364, "161": 364, "223_20240418173235694": 364, "parquet1alicefalse15000123456789013": 364, "1415912345": 364, "678902023": 364, "012023": 364, "00b": 364, "red": 364, "blue": 364, "green": 364, "key1": 364, "key2": 364, "10300": 364, "2024041817321367420240418173213674_1_1id": 364, "carolbytefield": 364, "parquet3caroltrue35000192837465031": 364, "4142111111": 364, "222222023": 364, "032023": 364, "black": 364, "white": 364, "700": 364, "pink": 364, "800": 364, "key5": 364, "key6": 364, "654": 364, "321": 364, "carol": 364, "2024041817321367420240418173213674_0_0id": 364, "bobbytefield": 364, "100bb7c3a45": 364, "387f": 364, "490d": 364, "aab2": 364, "981c3f1a8ada": 364, "198_20240418173213674": 364, "parquet2bobfalse25000987654321022": 364, "7182867890": 364, "123452023": 364, "022023": 364, "yellow": 364, "400": [364, 365], "purpl": 364, "500": [364, 365], "key3": 364, "234": 364, "567": 364, "key4": 364, "89": 364, "20100": 364, "2024041817323569420240418173235694_1_0id": 364, "dianabytefield": 364, "1004668e35": 364, "bff8": 364, "4be9": 364, "9ff2": 364, "e7fb17ecb1a7": 364, "0_1": 364, "224_20240418173235694": 364, "parquet4dianatrue4500098765432142": 364, "46865432": 364, "orang": 364, "900": 364, "grai": 364, "key7": 364, "key8": 364, "diana": 364, "987": 364, "30100": 364, "releas": [364, 371], "hoodi": [364, 371], "datasourc": [364, 371, 383], "littl": 364, "deeper": [364, 367], "tweak": 364, "amazonaw": 364, "v1": 364, "sdk": 364, "attach": [364, 380], "my_io_config": 364, "incl": 364, "feel": 364, "workflow": [364, 367, 383], "introduc": 365, "wonder": 365, "magic": 365, "stabl": [365, 381], "truth": 365, "central": 365, "sai": 365, "pathutf8sizeint64num_rowsint64": 365, "jpg23604none": 365, "jpg22713none": 365, "jpg24990none": 365, "jpg42836none": 365, "jpg13432none": 365, "someth": [365, 379, 380], "cdn": 365, "flicker": 365, "full_nameutf8dog_nameutf8urlsutf8": 365, "evergreenerniehttp": 365, "jalejackiehttp": 365, "winterwolfiehttp": 365, "shamasshaggiehttp": 365, "zaphorazadiehttp": 365, "continu": [365, 377, 380], "df_img": 365, "full_nameutf8dog_nameutf8urlsutf8image_bytesbinari": 365, "profession": 365, "full_nameutf8dog_nameutf8urlsutf8image_bytesbinaryimageimag": 365, "That": [365, 376], "classiffi": 365, "thumbnailimag": 365, "waarcacaaiadareaahebaxeb": 365, "9oadambaairaxeapwdyzeydqrxhjgs9kgbu": 365, "fvyahnl8vsmi3ezpiwbpwymy9zrs4ofjrgaettwdwekln8kiopfaszuv": 365, "ed": 365, "lwqqdutbpf": 365, "wd": [365, 375], "ltsitw9tda": 365, "8ahvj": 365, "vhkvf2nwkgygbomx6isne2uiv02iqt2osbzt7b8xoatmykz7lg0ybmu0aypio41nrzabsbweojmmx": 365, "tsbg0y9aopclhuykdvdgtmmrqne6dw": 365, "aojqhxye9vynkpvtn0kxuov3euoo9akjdvjuxwfyp0mjqrcjf8aha7rselhrycapwzaxjhlx": 365, "lqmp3": 365, "aiihkiyofhhak1ce7hmhixw": 365, "jprngsm1k4gikcndnleeljijgbkhqkzdfbpgitqseyej3tvhyjephrs5bmrr5ddx4wzwpwj2zjal7vbgkfinglbym1mzekjsaku0dlcfx5dag9kaqmzaj8wywqddhgvsjfmjpfxdk89vbpxvtyj1bqpes6hcdx0qbjsbv2kypxcww3akehfo47hielrkg8tnic5c1rj4nqom": 365, "xdsfn": 365, "eagbktwbkfdjqjesqtcqsmvpmk4w29pmc5ne6tpd4bkf861tyu5n7tnjpwmifemgpy0a1vlgvkzork8": 365, "bvjeszd9ozumatihsjd2buaogsaukylqtz2oa9c8exxjj": 365, "ett470mhpnc": 365, "wbsw": 365, "0dz0": 365, "opsvcik1nnhksbsehosm5dxb4pabhqocey6vsiz5nc332u6ladwogdjplilzausoyfqzilo5q": 365, "knye9c7ikflucmzrxwacoc0gjrzn1tjlxnog3jqdqlmtsq1szdkinysjfvuspijmrgy6mmkk51okaagxzh7c80xfjutqaxujecuookaml": 365, "3bret5j9fwgde0txlihcosdxxzrydzpnt0cava": 365, "ypwduekaucidha1uyrz": 365, "9usao00m08q0c56rsy2jk9zqcy49axkjbmsvpcoc6guk1lunp5wzmlcexla18tuahmsua6ke28dmkmtywcslptsgy8lss546gtezsuabb7p1go9usehr2ohtfx3wmbzwo2azlssokyhnxnqi2pnowh1insynomgiwhqph29je2kmwpy4pmamzxrqjksggbnnqxoonr0dvcy8rngkqnnlxd4livjnvwujfkckgpqjnapyjarouanqanp0kojkmlcpit31sbyrkyrns0qkr3y56uiblqmwukom5gsvpaqksy1pufmb96pcoye6uwnb7tui5ga4mkrghvsuniy7phzvumncgiew8q8hwoufja0o8ltrhvbdyavwsdj4gld6crygdlswasen3tzj9pkg843etssrr3tdqtsafytr32knlfyvajpjvzqcddvgtj0g2s4rfeuqusmudm7xtp5mcbovbpfizysaymqcikmsskvwrrlio3ycvrjo2i4chpekbo318y4qopuyqrhyq6pyndyszegz71mpgsim9damjkhgoklslcsjbfqmbbx7uxcxwlswlxgvgoe1lmbxl2v3plwcqf7lvcxmetxtb7hz70zihaohccpnarnq3gztcezux86k1npxka3mhibxkuwzfhii1w1chbklikwrzgo": 365, "gxtpc6ake54qszjmtzceew3htqmjoyzy3hflsoa0tuq0xbs6cqc9aah7mu5v64bpnlrr1mm2": 365, "krjc9rwlzvsajj4ykliulsaqnhai4gtjitobt700nspekd": 365, "2vod92tuc02ezsa": 365, "c31pszh44pcfx7uhh0dpvgtruwbzssohjdzsbcxe9wkyjmtjmlsltkbcqwxztedysedzapkqcilyq5m3ohxuthvqbduywp": 365, "fvmu7cclewhlt4slsu4zszp84uu2dm8oteqw5qxk5svjoksvkqdbujenut2ohcqrfsjfnivxg0jzja3vmtiomuip4msl": 365, "xdbwtagr4zc4s6kh": 365, "1sjy0sckikbbpcppvi8dqzsnmh3kaqzcvnobkdkmyoam47f": 365, "yujgaphtimmfjqnzhjkinccpfflxuwpgibojuclssmctqi9akvghtaphquwaqswgzpparwwjcekpikvr2464qiwyximatangfw0xhhgqqthdsch71ce0upm96ziu5h60afvytfdlhfmipgu57fnsyiibbjodipsmhmshccsh86qec2kkbz5hp40wj0u5e4wtrcza": 365, "4alijbe": 365, "wmi4ckmttvirytrbbyapczc2hrtjm3vyfltzn2pummi8m8s2ow6fgpvvfymja2cmsrmmuxh1yqzpjfkvi7kmserssuumi": 365, "alyy7i": 365, "kqetqzpskmbbqp4rryb6wkewp2aclzc9qlatrgq": 365, "lmrip9bveslcczjxtqjm": 365, "e2rjaqlaqsrihsejx7vzftezt6msb6m3loc9mm0mtyswkrfv3x3qit60uigocaaijalav9vpspkhbc9qvihdgfibj4fadn2o1abuldqajfjj70xxlcgimmmhmxta1tbkjgmzxvenlou6095kfmom1lkrzdxnmsrgqzrmtzacu07clg5mmhdhnbjmnrh1esnnae4kykadrtauxg0gglmubcauzulxgetssfxjryosfxvxbqfx2": 365, "fmcrfxxkwsenfncz5b4i1zp5soy8gmi5ozs5jzsgilmukhmicfnwnzynylk6hw3fxcrnoj9mk": 365, "2ttelw57ypxcxmsmalgsq2aydjqaa1iaabjgoerebqboxztumgdk": 365, "fgpgciqb2qki8suzjnm5prqbwekxoo3b4xu2lc3bg1lm1gnkg41oxe5": 365, "9k": 365, "9oadambaairaxeapwdtcr60an49aae4fadepoabmvfafctlqbkky4ogjiyj": 365, "iugslauu77wohy1ebigtflzpgafiq7nads4pgnpnagoao7mprqahb9aag": 365, "yrqblgc0aokybetagvctihzufk40mzt5riwy4gdwuqljefjswzvetynwdwdrhsqbla646mcqaxthugdpp": 365, "urmagwprw8atzmnranplqjwdvx8615kyuljldw6euyr4fmqe0amoakakwlb7uakfmoarxdexqbwf8fbzxikwsmi": 365, "1wr5aoaxlusdekvznrvvmlzgmsjvgdmasmevpjm5y1i22dcsrnb22etnigi": 365, "saapncundnh5un8ke2dsysevsrnblcvoptgbppm9pniqswvq1hvmkle661ulnqeedk6u7njkniw1usjigbmuau0jk0gjsdjptartruboa5nv5dadg4zwvrmtnxzykkzo5yx61ys7vorodhhpwokarlmmqpnqi2ammyarqzh4qsiktg0gihczktwfpnpeqems22vyynccr3vhtnztkmuukcny6xpfbgakc0akrmgbiguakxudtqbvkxedqbx": 365, "iejkxjnzzrptdmcxlcew3irlctsuimzeawx2rno2izsgngam1frfruucfiqullhx3kjqrsbizmghfajomoelcywc05mue9arik9d0bqyrhed6iuyc0ppqo7nvfagykkaanfaeg": 365, "gbu7zd1oaevahwgda163fwoafsxpne32imvd": 365, "rjmo5ttnozjlntjirc4nyyhdntcdktwl0wc896mcncot1nuz4ufsslhtfqz7m6zhbbpwtoquc9sdi1hqu9auo1eqdgjvuwbi": 365, "cee9zwnwy2bcwsrj61azmzqtf1cabg47c10wmclsb1uugkuegtzak6uaboazlctsanjjioakmzi60avpbtzovnagrqlmet3wv8na0et6jaftengoaxbszoubor2utbznpwlj3hbnm2gyeh0rhlojmkeyf81tdqwmmyxtrfmyk5qakh0om24o": 365, "kza5rnua6jfgmjtqmqym7gcufsrzwidiwrnx6dqpnptj6cuqernhujy6ankvqzds0avokanizy4uucgs9adl6uavl5vebxgdkbnl2u2yhmy46muaqjrou5hxsfcadvur1njagk6jyx9k0szcxwh2": 365, "zg461lnfqbkealhkadkwkzziddezjfxqcjxmyjih0qinziuusaaywluhxxky4j6mtqcjcre7ukztep3dpxwjiyyw7vf4htsk4sbc0hkzhokafjxnaejccgzwkxeppcoc8xq7acbwdrxn6urhdwnunx71mylyka92wsbsd2qjmxy7k": 365, "aeehqwjsmjolg7lrjga55rohm3badsrwzowrk7lpmejkntrtqmqroyzar61rhcylsdbb6q7of54fehtv0edudmsh5ju5rw1jjns3onwa5zytg5xqbpgqtmbssgoahmhpakm5pxxfuiyr2qzfrpmyflncjsavi7iz3rslt5p2eumksd3ndqjnbegbe3snisxe2ujpmsjbcuacbhtcvyti3aszqqyop6kvaizsembudvxiangxqdrxoup6hdxpnqwkaackvcpgmy2jojgx4nquxo3zsan3e0aosavztam8okkbnmej4pngba6cpy0eu": 365, "sftmismzao5jxlls6mcn2": 365, "qutyi": 365, "smrp0aunmi4wptfcmjg2hyw6jvshc2dqsg6cdtwnsfzwnoxzv1bmamsdxpy2olsuc5pds8hua8gpbneisee8mqiygaeem38k3jilxui2l6w6zrtnod0g0i": 365, "bd84i": 365, "tb2os50seoyaimbdjf2pax4mg2gbkjuayeslreqccis5uxpbxz5xf2q81mxjnncbnznfgndevowdhetzvqpcmvkx2ej2ct7wzvz71vhu55ahxwphegaahfuzittj6igauc": 365, "rmimhax0rgojenc477opni": 365, "9cbz29cyqalxvrm5crqwboa2isi9gvhstbmsnay5xjhpxfy8e5dszipwtunfpm3bvuxsklobakag": 365, "qtsyhna7puianctar10ynn3mg8zrkz3ri7o1umdxaq4iipi3bwqw": 365, "mpxvhq5jamkb8soxvnkqje9w7dzu3nveo3rlqetwcy4qxjoch6d65xudk2lemfiz3q4izkaa26hqek6kjmrogkyindzrvpginbugik0nm0lc": 365, "bog4xwtroma5mdkmeuffee58ujvpusehuvdnltzmevvy1wvhdnou1zfd846vkboozbtw25fax0jauwlaorymk1opgtibmk4uzp3fylfafo40irm": 365, "apy7eahvznisrf3cvnhxaqkiwyytnak2rjvudreokovzvra7zxmpmerteu5ygrtyk0nepslnrfmcfbp41k1y0urkmpthygv9kxnsb09zdtx3o2fwuf7netixkvxhtmkuhqw4k5q7duwo7fb2p2e2shskokrsmgbjw7xrygwtrfcx5pqbm5lqw0cr1zvqnioe7m64aiu0gi2oa1cyluktrbmztsduvfdp5o4uxdxwrteuz0wqrxipaktjow": 365, "0qud": 365, "ck55o6ymxgplsvj1rhktt0is0iwus7ge9skxc27nsqktczcdadqyh": 365, "bhsmk5vdtppaj5": 365, "b0pii1vplpsrtilem": 365, "27x0puqrgzupt7hgcuo6s1nojeedessa7qcvy8qrk7p": 365, "9oadambaairaxeapwdkdmjskz50tyjyqmpejnhswuttcgauuzgmrlkphnpvmlevm9s1tlqeeiqh5": 365, "g9akv2zzus6wltpzvazps7hoin0m33olqxfgrhpfmqcgzwsdhthcslpxlqstjfupxoessz1wuwx6vuxym9yrlbe4nu6gmizz2hlb0xwcpisuwnrtlgrtub4rbas25tge4gstdmuhijfaculs1mpwicbbilgakm5ni0orog0kmupghcwkilhfm6ir5jo9kkjujodsvy6ywr11pdrsoac1skvyl11qqmqr0q7es8y8vmzs4wrzqiwjmorxbzmrcxsafcmbgpxoaykikbkluluhk8cdqlgc4xozu7osgu": 365, "ktzt3okugmohim2avxs5skmy60cdlgtkziqwjanmwlyzrlybnga0hevlsun08nndwyqwldrbsfpwspoloa8pjyag5pitnbewqrzvwffaknxenevgcklhffwrfsnwkec1lrqmdvp2plsc1oxz0ltdmamgntwswri5jxlbb8mkok5jzckm3bnmquukatpbgcj5alsvjrdi0ustjdhncqmzfbwallmle1uogurmy7vws9srmoj": 365, "lhkkksoe1ztbqj8fhab9kxixcw": 365, "bbo4c": 365, "9nkwes3xnybrxzvinu3twsjpqkzzm9ig6zc": 365, "wixxy3nwozdzyalm9oopmavzhk7rsidbwhnwwte4ysoabzkoo0w7tozwvja52mmwpzpvdq1iijmj1jtd8fj7u7e3omnisu55b5qko50uj2qkr8oosk56lokueqg4l": 365, "nxgxno510dw5uy2dktwod3cdlcqdwt8aegk5xpibtloeniojyb2qw0axuek": 365, "iriqysb0zslzi6zi": 365, "bcde9j6ajue0gg2hz4": 365, "x1rmujeunoeln5u9m53edbxzzgmvnhwkau1r5syyr2rnndf3rz2oqasqf9aednjr7ygrz1okprtdswkdg1vtiyzkxtw0svacelasgzxkee3elphc55": 365, "9wnrghswbm2iztzguxkk0": 365, "jceczuwjuuobryvzrfd": 365, "vtxmmhhtjcukja16": 365, "lgtlzd33c1vtyimlc8v1txbcrzfnjke46vjfm2ehhalk": 365, "oog8sg49k0tjzv0ixdjidp61tvzo9joby4acjrg9klqxnkrgxv15jdasmpscyi85frqklouaifzmgfw0oj2qkcfecxbz61bdzppddqbuvmdjwkiezkew6bylb268d7tdcvy5zsuf3grkrgunbfnj6lyassfrlmjpiznwlgvk1mwqpocczhsdoapmdqfdukeu33cyrwkm5yoi1fsxc2umdfqpk5lcvmexaroaw4jkd": 365, "sud6hwmmvjpgcgbp0pwremt2tkkrpyjmuliwzhq2nisekdhq4mukec6huhmyc9a53oynmuqp5cikc80idzsdpna4tmg08lwyv0axkctrp7u5hu1zsjqdezhc": 365, "aevyscgt6aimz1xdtiud0ruykcz0ajmuad1fzyiwpgdjajz6csna15x9najzrznmmqynuoytvhtyqxkjitejju5flrtocumsfp1p8pjjaldbxw3xuhxzwaivo5rgdjn7ifuymcmo2byuubc": 365, "407bclu4qbzgf7tmhnmmr2smdvmhwuezljch0u0kuz1aunmprij02x0g2vgwi5kv0rvkbrr5t4mlldj5t96spbm0ttfhzmswzw1miz6wjayh9k1im64kwabgdpnkgpy0zc0xbqgunh1dynbprtqi1qovm9mwukhb2qhhk": 365, "o6rqavw2tlgt2o5gow8k6jcew3nm5yp4ql3gdcw805patrqzgcvsqxmvwprbc3paiwgrnl2p3badue9cc2q5hred763im": 365, "eboveqiioo9d1lwruwycth93twtzq8t1q4ivbn5dv3qxnitk51fgelyd3hwtqtjmj0tzsqd6vuzkekm6kbsn4fagxorzu2ayrlwd96lyco10pulqqef2agvg3lqfwoa0rsni": 365, "uqb9kygxbpnfubpycqst6vqhn": 365, "im": 365, "3tsvvasksrehc3vu27dknnct7jcdpiuzlc5vypoa1jtlums3eibti": 365, "50mq5fasvjcplictu2ktpzfcnr": 365, "5vvauimrftnxsjcd6vszmfjjtjogvjp8ikblxmvbxsa5hwdwe2pck1epwhywo9ckmmubd1qoydstpzpiljhaqqwnwdgrvirswxaaqkazvdqw3tmgr92m3zcpj9uvjcxlhprq45u5jxsysdbhssgjamjnfo6trnmovcd6dx3llgp9jj": 365, "wb6mi0e3": 365, "epvw2hi": 365, "7xveo6g4mbwqaw7m52k0rgzvxqaxpntcdnfuvbpiqbgzt3zxaifvkkisuwnyltwskbhtwpoaspjcjoktlt4goolawiumiozopwgrrofjt2cnoua0ecd4h18u7rqehxwe5copa5jkjpc1zsdi3c28cvdkutfee2ttefuk0ilet2": 365, "6j1baedmhsnyxpqvc": 365, "v4xgeo1dnoqso88": 365, "zygqeorukyl": 365, "pnswor1ad4vwspmarijdft2xx": 365, "nzskwkiw0uwsto8nn1pxkszp7tvqygvqpkl0znnjrvxasw0jda0icpxff8a2o0kjutepwa8kujzj7lyckfq5pmxksx2hliycvmy4xne3suixmqc": 365, "9ty3ssoack9q3okw": 365, "fgp5qwi4uxew7uortfty3vrwjnnuzbca7szatyuxlj3pu9c1ixeibbtxtgvxgjcohxnda5fwrdzujhyvljdoau1acyjj61zslk0mm1c7qz5marixnovss4g7qa1gdpqlcmsrkfaulemkqhelegqhh": 365, "ldr81lqdukwq6jrzmcpysbzwsiajojxeftffhozunwzh75pkovytjtx1fibsqhck4nuty3jykb0nkwcgsifhug45p3kty6jrdua3dfyeaqehwpsbfxdwkrzxxrubbf2hmt8dqta8s8sxfz5s4xzweksznxded6z5rxzpzxmlqpn": 365, "kqsc567ok2": 365, "1t": 365, "droranrlz7exapq0wz5frpkw5bed97vweitjmxhspufxr7nu9akrqz2rj1p2a2z9b8tsfn": 365, "wrsw4myiplcjocgpurexfhlvu6ckxzlw4be4xqdncswzksx896syhshgxdlb8xzxxvfgdjdwakqj1fum808aeg2kg9c8c8vnjcapkbyn7erkwedis7eshtxyxchnhqzj6": 365, "4u1bhivgydmvqjrhf2mcsxkzhzcqgcr4w8lcvpmj7dpfztrj5fpavbssrked3rb6algwwc0xfygejwj6uristxgrm4gmyrvs0ciqkmc1dm2xjybc0igxis7ztc5yr9sin6gkirnofhfxr9kujszxjpw0zlpndwviixkz2dvste7lgvr": 365, "qo1u4myov9kgwz47qcc3nw7aac1g2hlczltqmavzn6ghpupvytdbpwqugtpqdn8btdgo2e8elxzmqn5ffq3sdboqeo4p81wppve10jsfljayfsspovjmfnmjyhfztdrnsihwgdj": 365, "9oadambaairaxeapwdd8sdvtuzkiadvqa8y9aafjhrqa3a9adwhygotk4wgka96lhyvuhrrcld2wr1pxhyjaapwquildgdrsuahcetaahhrqa8eetiymr60iqgi9ayjpj96g0dcfwmicxa70gkzzsrd6ebmkpipijfm96ghibie9smqylo9aaj": 365, "ehaojym7qorfvf3paalpc0xd9": 365, "8atuwhitj71kwdtit3p2achx3oat7o3vtsfx6qedavh3hndxrygmv5lfpamkdyiwgnykl": 365, "zeual5w2p5r3k1yu0zjxtsfzjm1arthtmkmuwu5n68u7cnufijgcsvslyoz7lfqkhhtrlma61bot0joas31bzdg8uabfviuz3uaspgfwmhm2dqeopdhckm": 365, "xci4aiup8qobiybdseootbj1tla7ungicznnahayjtwekyji1dfirbqrskmo10xpjwz2pxvsufjuclaqarami47ex2mqdcalisqpennbzrcla8sxchjaoklhyprawticn3pgzcsrz4amkmqjnejgucloyqjvqmj2yl3nmkvfmtuaqyqxdl2jpwgsjet": 365, "dnfguk1xvh3albcgaqg": 365, "doar3f0kahkiozamz71xzgoa": 365, "lsmjjs5z23fmrtqfz7oilhmapvvklka28w": 365, "jz9kvgkjwswhncbqmv6e": 365, "t0potnumgjprcvgch0qyteiksbjabufctwiag5fcyndpjujhfaiqwa": 365, "opxkskbfr3fcymnnuo7incq2sbwxtujmhu7yah5": 365, "1oy0cuwao5hpg6pko": 365, "wbajtplvt7pnb3qhmwdcst537utjpy0xfyn0wywpjlch6mqukwzxc8pykm38kvxoh0e0mhpfcymjo00twb8ppgt": 365, "wbmkdqdxwehikd6beh0xly5pibejbj60xe5jk45qsmwi3d71mrgkab5f9agbv1kvbspichj1pdomv8avtk5a7gkwksuj": 365, "ehfq0umow9nsj8rnipkjv": 365, "eh3ddlk": 365, "9fgiztecd5qr9keioc9lu7hnxbg7vvor6z4cte8pwydxqb2cbimrbvebqxlgadui": 365, "ipyqkixvvdkszhgdpzqarrbccdqmllh1x0xsaqzdgfmpimy5uflzh": 365, "1oyiwl": 365, "6efi3gpkmn4vmjjoafuxnnad5rhxtg0dkjlkuzepktmgqnmbqqywoyi6nhq1sez0dwtqu9dp7vaqrnzrxjxnnfgur3mwbgklbcpomzrvxjhnju4oebognzmdo7fjgjh1lufhg0mki5djnjbosxo6migeqeuckurynidhqpuykai5u96vxlocckmqcg0aotjnmr0nh6ywydnqapmvj0go43rjj0qhxjvfd1naxcvycywlydxuhrvejzg2djoaxtu1hyyyar0qwxphd3mqtlket1qciv9tzjmmimw43ypxgsltw6urgv3bzqmge4bom0cg": 365, "wzwahoaqzasvdt3uzfbgbmi4fg80qs1fg09ayixp0tlkum9abnoonxewjj7vaznivlbpequsxymeoorqmr3dilnpsgri6hq": 365, "ylqklsaoj1s8z2pjqczckckk0cihoqaangyk8wgudntyp3efakblxqouedqbkmzb": 365, "wmm39fqpipbse9qxnqmjmawbcl0pigq6xpefwhzducvoqc7zaxsmb2nahrqyeqogkqwxb7tfqvsjzca2a0ay2pzfvnjsdjkbu4owzsa5": 365, "9l3gpyzpy9aqeddjpjl9j8ra5oa6k2n3acpyd9qjrowrjprcdmj1cp": 365, "nmc3zxxlmmuwc51njrrw69tta1lfxzls7dppancru2chy7iotmepmtsdds5iuuqvzu": 365, "rvp3iasbeog080coa1c": 365, "nnsykcverhgeakzhtqjjyaakukqbodqbukikmgcs3lknzqbu20": 365, "1mjmpsakl6zcegiwgzeoxiiqggw6tnvqi1rennzrk0adtoviixubh400hhtoyqmbiqajmo3c0hpkzxuya4fcbljrhip4no4jhuq0m7injgc9ermc3bqcrmhpb": 365, "kaqykkl7jkgmbibusolmra9kwiwdqi1tmtcvo79atgleqkvtfafajjxqikjjc88udnltchfji4nahur6oksqbimmjouw": 365, "rh": 365, "kdxwjzj": 365, "4pwma1xl9woa2i7yodqax7rceyfagxc6ogoalaux0ynkbatio5tl8nbfmose2qrofptptsk4sar5yztzryazasdkgaqj8kllizbm1lkb7rukorclg": 365, "ovnvygcnocg9adgunis5ubjdssfi": 365, "hzstjlqxkpmnk2twthjo5rxnwjdt61vhxfwfegdry4etaxrwypwgb32yeuxfswndw4fadniv1awkak0tusfyuaqswk46cgculngbg0uwc5zgkrkhjuhiplafmz76chkwaotulyw4640lilu8c1pmplgqayhycchmbiofqingbvkdxtgtad4yudqa8kcaap": 365, "9oadambaairaxeapwdpe0fkycmk2awn2x05oqotsubsfoqn4ue3awzluwuw47yx4ofcviploem280aozaauiwxqaqnmkdekg5ttazgysn41jzch3b70xhl": 365, "klysyn6umvey7dfptjvhztszr5tq9sy7p8": 365, "3qaa9tjhdmplpkm0rbda4oewolgmuxd0qz6ucjimrqiyplzmgzg08cyjlayoeutrltv2mvbzjrqowsl": 365, "bnbeyc": 365, "9ipfi2njl": 365, "64p0namxnurtjm": 365, "7tdg1llisx4ycmiznct": 365, "mgj9bszutj9kkktci3uoarzyxie2ks7goppjjpzlvatvmtnmintbiwjztgoiotqjj5z0hjlmwgb3pknga742g0": 365, "ivljpfphbap8sywdvhxjigdjhrzxlcnpuejjnpwmkfzrsvhezrhpg49tq0umdh4x8cn7qi3odxxzug9t2gyulubdhbhk5pmbeul3ypmaii8oabi3kezbupakwocuizbxhagnzui0r65o": 365, "2iojhzkcpsnm9atewtvmbnfrxtii5hxtgiolwsqyswgkq2cj428xrzqlebjixxtqjhhupa3pftuti": 365, "tvylms8zt1y0wc5wljanylsiuk6qtqm1dkvzyr6ezyycuirn034luzdweet0spezpprkigsi3j4bpdgduinazk9ctcto47hnipfuzc3cyu4o0umgn": 365, "zosaohl8dimqqxcqwwszedaosnhmfipxbha": 365, "yqom": 365, "xosweoeidefuztljggrse2c8zhtstcjeuu7cbitidtsi1dikosgxz61ei0au9kkd3bsjd7w6vjr9afd5x9iuz6lseztjdykqkpxlaak0w20dri6nf50th0fjliyndudhlkg7e0yjsluynbmy5jksurykaazqidzvxj4tjghkjsqzxjg0fphz7rwtszxuh8xic3rtc5gz3hamjsriynvvikuyn1pigmq": 365, "tk4fq0udgedustgva3xeepcser1qbfh0h8m5jlbn2wkxhotckugjwokzjhlhuu0hox7hmi4pcvjaosny2mrh": 365, "8aalpqfxzztmjmvf": 365, "ifnnsnayzk0wspmrx": 365, "ee15": 365, "vgxuperse2czpkxosabrnyq5zsavrtebjogficspnmc": 365, "zvi5i": 365, "3hszsz9j": 365, "ctle1pi": 365, "7ugz0erceugrmnsgkujinagzfqz6vlnis5lxrittxmkwjsnsuvtbwryqmlmrmkfppxa8um5lenw6hhfnipnlekxermpc1zmr5zqawjmkbmqcvyhuh35qjmpisshzsqnd4lq0isam7jvpoatgj3x4rauahqn2qcme1k7o1b2pmscns0ayuggrfmoakykzn": 365, "zixhfqzrm534haqbkyykfvl2rzizpl7wlt7i8llmfvgrss2zheka8hikwbettqmsl0qyssjetta40xs3jfk1htilwkoqd7wpmaptphncetdaf8zb1rowhott6rtprjzxyoflfstyenbogwb0pkkm8ip1ifsxpektrzdxxu6mrvhi3jfxeuowbqr0rzcpenqxe7npu1dydp70ghuaj900cjo2zvicenguaygpniy3pqa9rqb0ph29azukzsfvvnngkgfrxg7x": 365, "t1sinxhcc1gnqayidqg3agtdg4": 365, "o2gdl1vgkqlwiwo1ztkaqryumtdtnypj37msozo6ovm": 365, "f9v1srl5jnd9jiuctc3hmp": 365, "nmrdjnuiqnfiy0mgcxbrmtnk4whsk0r5p3bocr5fvcvgwsam47eucmu7hyvwnx9ncejvuvucxy9t8": 365, "jajkj6zokxcbm35ro97szrlaxt6rmqrgyhubr7mvhnz1hy0pxuc7d6": 365, "et5d64wd1rl57s6pz2pffffij5rlhgsmn2rwmqeh59d3izlxccrjscsabajyoqdjztajyypdldjkebmpy4su3qrkf24ort1iutwhy1lknqjuhwwykxmvylt7xkgimpa4frgq2k0mmbnh64e3vojuon4rozpa": 365, "j9b8rkbkfmgnabwdxujrxt": 365, "a1bparmqynaascd42urzw7vb7w7vnfxnk7njl1umncnj5rriijm5buzvwus4bkkzxtsahpbpask1o4csghgihwaank0bewyamrctoi7dgjb46vgzpvinnefcy9abmtqgmukaagmtfm4rrsmprnnqndlvjgqraa9ajmct2dw9ootlqyxh4e1i2w2dpqt": 365, "ljbkaqfl61yvgau43pivf2pm": 365, "mvq3eqoxuzwwimgcwymnvxoxjzhlkvzj9m08zzyktnosalylcvakbzzjdggbnskah5oeidigcegyowna0bnvqzcy9qlwnfmyb3l": 365, "ai0nefmatizz4ckw": 365, "lz2nezqdj8lzag6symob707ipttd0bnls5gmyjc": 365, "lf7imc41wuxhcfgfbtuonyks6trxmwgvnwdvc1yzg7nrbo4auz7liwz81dnfe1ga6kag": 365, "ldvznoy0koip0pswrn6wm55pogctipnnderkugexsatfaakajo2nndhmscdsyhaecl2jllvlcnly5rno0iz6i0oztzbeno1tlr0qbdbna": 365, "tljspmad5aar5xjcbcxbp940fo4nxhemsgvxpx1qew472inkuyhjrsmbdcrnqoplfaenn9nkyz5nbzix8m9apac": 365, "kvzgmihiqqg0hhqimuasptqxwbndaswn09tojqsmhpfsnhunw78ypjthye9uago9a1gfdpxfh3kzusctya9l": 365, "e4": 365, "ppgp5rruhe75": 365, "vvardnbr1wn4vognpkyz": 365, "unrel": 365, "pil": 365, "top_predict": 365, "confid": 365, "post": 365, "structtyp": 365, "list_r": 365, "new_list": 365, "pred": 365, "conf": 365, "prepar": 365, "transform_imag": 365, "fromarrai": 365, "centercrop": 365, "224": 365, "totensor": 365, "485": 365, "406": 365, "std": 365, "229": 365, "225": 365, "df_pre": 365, "transformed_tensor": 365, "tensortensor": 365, "transformed_tensortensor": 365, "303": 365, "375": 365, "275": 365, "432": 365, "288": 365, "df_classifi": 365, "classify_breedstruct": 365, "79": 365, "df_re": 365, "dog_nameutf8full_nameutf8urlsutf8classify_breedstruct": 365, "ernieernesto": 365, "jackiejam": 365, "wolfiewolfgang": 365, "shaggieshandra": 365, "zadiezaya": 365, "thumbnail_bin": 365, "full_nameutf8dog_nameutf8urlsutf8classify_breedstruct": 365, "thumbnail_binbinari": 365, "dogs_classifi": 365, "write_deltalak": [365, 370], "10mb": 365, "hundr": [365, 380], "thousand": 365, "seem": 365, "small": [365, 381, 382], "volum": [365, 377], "infrastructur": 365, "showcas": 366, "master": [367, 379], "asap": 367, "dive": 367, "itch": 367, "ground": 367, "searchabl": 367, "deepli": 367, "complement": 367, "advanc": [367, 371], "technologi": 367, "serv": 367, "inspir": 367, "onelak": 368, "amazon": 368, "huggingfac": 368, "hierarchi": [369, 374], "piec": [369, 385], "object_kei": [369, 374], "cli": [369, 375], "discov": [369, 374], "aws_access_key_id": 369, "aws_secret_access_kei": 369, "aws_session_token": 369, "provis": [369, 374], "se": 369, "my_bucket": 369, "my_path": [369, 374], "my_other_path": [369, 374], "acid": 370, "transact": [370, 371], "unif": 370, "packag": [370, 376], "major": [370, 385], "never": 370, "df3": 370, "primit": [370, 371, 373], "timestampz": [370, 371, 373], "child_typ": [370, 371, 373], "upsert": [370, 371], "ingest": 371, "hf": 372, "pro": 372, "usernam": 372, "dataset_nam": 372, "file_nam": [372, 373], "httpconfig": 372, "your_token": 372, "tier": 372, "my_private_dataset": 372, "netflix": 373, "load_catalog": 373, "my_iceberg_catalog": 373, "my_namespac": 373, "partition_kei": [373, 377], "write_iceberg": 373, "file_s": 373, "707": 373, "2f1a2bb1": 373, "3e64": 373, "49da": 373, "accd": 373, "1074e": 373, "k": 373, "v2": 373, "extens": 373, "hierarch": 374, "embarrassingli": 374, "container_nam": 374, "my_contain": 374, "abfss": 374, "workspac": 374, "lakehous": 374, "submit": 375, "minor": 375, "eg": 375, "runtime_env": 375, "head_node_host": 375, "10001": 375, "set_runner_rai": [375, 379], "constrain": 375, "__name__": 375, "__main__": 375, "dir": 375, "8265": 375, "env": 375, "create_connect": 376, "big_tabl": 376, "partition_on": 376, "behind": 376, "scene": 376, "claus": 376, "last": 376, "label": 376, "inject": 376, "unmodifi": 376, "12gb": 376, "ram": 376, "With": 376, "87": 376, "peak": 376, "315": 376, "97": 376, "took": 376, "adbc": 376, "asset": 377, "beta": 377, "subject": 377, "unity_catalog": 377, "unitycatalog": 377, "databricks_workspace_id": 377, "list_catalog": 377, "list_schema": 377, "my_catalog_nam": 377, "list_tabl": 377, "my_schema_nam": 377, "unity_t": 377, "my_table_nam": 377, "strong": 379, "spin": 379, "p3": 379, "equip": 379, "myclust": 379, "6379": 379, "en": 379, "ip": [379, 380], "_daft_execution_config": 379, "0x100fbd1f0": 379, "_daft_planning_config": 379, "0x100fbd270": 379, "_runner_config": 379, "_rayrunnerconfig": 379, "_disallow_set_runn": 379, "_runner": 379, "26": 379, "610": 379, "1567": 379, "622": 379, "1752": 379, "biggest": 380, "resili": 380, "big": 380, "walkthrough": 380, "situat": 380, "remedi": 380, "overal": [380, 381], "alert": 380, "raylet": 380, "xx": 380, "16920": 380, "576": 380, "troubleshoot": 380, "insuffici": 380, "gigabyt": 380, "ec2": 380, "r5": 380, "drive": 380, "r5d": 380, "inevit": 380, "poorli": 380, "simpli": [380, 383], "oomkil": 380, "orchestr": 380, "actor": 380, "pod": 380, "restart": 380, "recover": 380, "care": 380, "reviv": 380, "recov": 380, "intens": 380, "decompress": 380, "matrix": 380, "henc": 380, "contact": 380, "forum": 380, "spread": 381, "assign": [381, 385], "addition": [381, 382, 385], "concept": [381, 383], "stabil": 381, "total_num_cpu": 381, "satur": 381, "heurist": 381, "interrog": 381, "fairli": 381, "path_to_100_parquet_fil": 381, "72000000": 381, "72mb": 381, "recogn": 381, "path_to_1000_parquet_fil": 381, "reducemerg": 381, "fanoutbyhash": 381, "varieti": 382, "hive": 382, "list_of_valu": 382, "mysql": 382, "trino": 382, "image_url": 382, "image1": 382, "image2": 382, "image3": 382, "image_data": 382, "write_csv": 382, "languag": [383, 384], "ergonom": 383, "constantli": 383, "feedback": 383, "hear": 383, "my_special_df": 383, "wip": 383, "read_delta_lak": 383, "todai": 383, "workaround": 383, "appreci": 383, "patienc": 383, "hope": 383, "deliv": 383, "present": 383, "cool": 383, "trick": 383, "py_expr": 383, "anywher": 383, "versatil": 383, "cours": 383, "beyond": 383, "encourag": 383, "image_decod": 383, "mirror": 383, "ansi": 383, "complianc": 383, "githubusercont": 383, "17691182": 383, "190476440": 383, "28f29e87": 383, "8e3b": 383, "41c4": 383, "9c28": 383, "e112e595f558": 383, "stack": 384, "exchang": 384, "reddest": 384, "prompt": 384, "mini": 384, "dall": 384, "abil": 385, "flexibli": 385, "walk": 385, "throughout": 385, "x1": 385, "x2": 385, "y1": 385, "y2": 385, "flattened_imag": 385, "cropped_img": 385, "break": 385, "At": 385, "restrict": 385, "consider": 385, "columnar": 385, "castabl": 385, "runmodel": 385, "_model": 385, "create_model": 385, "features_col": 385, "cousin": 385, "image_classif": 385, "runmodelwithonegpu": 385, "replica": 385, "massiv": 385, "runmodelwithtwogpu": 385}, "objects": {"daft": [[11, 0, 1, "", "DataFrame"], [4, 0, 1, "", "DataType"], [226, 0, 1, "", "ImageFormat"], [227, 0, 1, "", "ImageMode"], [346, 0, 1, "", "Schema"], [347, 0, 1, "", "Series"], [203, 3, 1, "", "col"], [7, 3, 1, "", "execution_config_ctx"], [211, 3, 1, "", "from_arrow"], [212, 3, 1, "", "from_dask_dataframe"], [213, 3, 1, "", "from_glob_path"], [214, 3, 1, "", "from_pandas"], [215, 3, 1, "", "from_pydict"], [216, 3, 1, "", "from_pylist"], [217, 3, 1, "", "from_ray_dataset"], [204, 3, 1, "", "lit"], [8, 3, 1, "", "planning_config_ctx"], [218, 3, 1, "", "read_csv"], [219, 3, 1, "", "read_deltalake"], [220, 3, 1, "", "read_hudi"], [221, 3, 1, "", "read_iceberg"], [222, 3, 1, "", "read_json"], [223, 3, 1, "", "read_lance"], [224, 3, 1, "", "read_parquet"], [225, 3, 1, "", "read_sql"], [9, 3, 1, "", "set_execution_config"], [10, 3, 1, "", "set_planning_config"], [348, 3, 1, "", "sql"], [348, 3, 1, "", "sql_expr"], [205, 3, 1, "", "to_struct"], [349, 3, 1, "", "udf"]], "daft.DataFrame": [[12, 1, 1, "", "__getitem__"], [11, 1, 1, "", "__init__"], [13, 1, 1, "", "agg"], [14, 1, 1, "", "collect"], [15, 2, 1, "", "column_names"], [16, 1, 1, "", "concat"], [17, 1, 1, "", "count"], [18, 1, 1, "", "distinct"], [19, 1, 1, "", "exclude"], [20, 1, 1, "", "explain"], [21, 1, 1, "", "explode"], [22, 1, 1, "", "filter"], [23, 1, 1, "", "groupby"], [24, 1, 1, "", "into_partitions"], [25, 1, 1, "", "iter_partitions"], [26, 1, 1, "", "iter_rows"], [27, 1, 1, "", "join"], [28, 1, 1, "", "limit"], [29, 1, 1, "", "max"], [30, 1, 1, "", "mean"], [31, 1, 1, "", "melt"], [32, 1, 1, "", "min"], [33, 1, 1, "", "pivot"], [34, 1, 1, "", "repartition"], [35, 1, 1, "", "sample"], [36, 1, 1, "", "schema"], [37, 1, 1, "", "select"], [38, 1, 1, "", "show"], [39, 1, 1, "", "sort"], [40, 1, 1, "", "stddev"], [41, 1, 1, "", "sum"], [42, 1, 1, "", "to_arrow"], [43, 1, 1, "", "to_dask_dataframe"], [44, 1, 1, "", "to_pandas"], [45, 1, 1, "", "to_pydict"], [46, 1, 1, "", "to_pylist"], [47, 1, 1, "", "to_ray_dataset"], [48, 1, 1, "", "to_torch_iter_dataset"], [49, 1, 1, "", "to_torch_map_dataset"], [50, 1, 1, "", "transform"], [51, 1, 1, "", "unpivot"], [52, 1, 1, "", "where"], [53, 1, 1, "", "with_column"], [54, 1, 1, "", "with_columns"], [55, 1, 1, "", "write_csv"], [56, 1, 1, "", "write_deltalake"], [57, 1, 1, "", "write_iceberg"], [58, 1, 1, "", "write_parquet"]], "daft.DataType": [[4, 1, 1, "", "binary"], [4, 1, 1, "", "bool"], [4, 1, 1, "", "date"], [4, 1, 1, "", "decimal128"], [4, 1, 1, "", "duration"], [4, 1, 1, "", "embedding"], [4, 1, 1, "", "fixed_size_binary"], [4, 1, 1, "", "fixed_size_list"], [4, 1, 1, "", "float32"], [4, 1, 1, "", "float64"], [4, 1, 1, "", "from_arrow_type"], [4, 1, 1, "", "from_numpy_dtype"], [4, 1, 1, "", "image"], [4, 1, 1, "", "int16"], [4, 1, 1, "", "int32"], [4, 1, 1, "", "int64"], [4, 1, 1, "", "int8"], [4, 1, 1, "", "interval"], [4, 1, 1, "", "list"], [4, 1, 1, "", "map"], [4, 1, 1, "", "null"], [4, 1, 1, "", "python"], [4, 1, 1, "", "sparse_tensor"], [4, 1, 1, "", "string"], [4, 1, 1, "", "struct"], [4, 1, 1, "", "tensor"], [4, 1, 1, "", "time"], [4, 1, 1, "", "timestamp"], [4, 1, 1, "", "uint16"], [4, 1, 1, "", "uint32"], [4, 1, 1, "", "uint64"], [4, 1, 1, "", "uint8"]], "daft.Expression": [[59, 1, 1, "", "__abs__"], [60, 1, 1, "", "__add__"], [61, 1, 1, "", "__and__"], [62, 1, 1, "", "__eq__"], [63, 1, 1, "", "__ge__"], [64, 1, 1, "", "__gt__"], [65, 1, 1, "", "__invert__"], [66, 1, 1, "", "__le__"], [67, 1, 1, "", "__lshift__"], [68, 1, 1, "", "__lt__"], [69, 1, 1, "", "__mod__"], [70, 1, 1, "", "__mul__"], [71, 1, 1, "", "__ne__"], [72, 1, 1, "", "__or__"], [73, 1, 1, "", "__rshift__"], [74, 1, 1, "", "__sub__"], [75, 1, 1, "", "__truediv__"], [76, 1, 1, "", "agg_concat"], [77, 1, 1, "", "agg_list"], [78, 1, 1, "", "alias"], [79, 1, 1, "", "any_value"], [80, 1, 1, "", "apply"], [81, 1, 1, "", "approx_count_distinct"], [82, 1, 1, "", "approx_percentiles"], [83, 1, 1, "", "arccos"], [84, 1, 1, "", "arccosh"], [85, 1, 1, "", "arcsin"], [86, 1, 1, "", "arcsinh"], [87, 1, 1, "", "arctan"], [88, 1, 1, "", "arctan2"], [89, 1, 1, "", "arctanh"], [90, 1, 1, "", "between"], [94, 1, 1, "", "cast"], [95, 1, 1, "", "cbrt"], [96, 1, 1, "", "ceil"], [97, 1, 1, "", "clip"], [98, 1, 1, "", "cos"], [99, 1, 1, "", "cot"], [100, 1, 1, "", "count"], [101, 1, 1, "", "degrees"], [113, 1, 1, "", "eq_null_safe"], [114, 1, 1, "", "exp"], [115, 1, 1, "", "fill_null"], [120, 1, 1, "", "floor"], [121, 1, 1, "", "hash"], [122, 1, 1, "", "if_else"], [128, 1, 1, "", "is_in"], [129, 1, 1, "", "is_null"], [143, 1, 1, "", "ln"], [144, 1, 1, "", "log"], [145, 1, 1, "", "log10"], [146, 1, 1, "", "log2"], [148, 1, 1, "", "max"], [149, 1, 1, "", "mean"], [150, 1, 1, "", "min"], [151, 1, 1, "", "minhash"], [152, 1, 1, "", "not_null"], [159, 1, 1, "", "radians"], [160, 1, 1, "", "round"], [161, 1, 1, "", "shift_left"], [162, 1, 1, "", "shift_right"], [163, 1, 1, "", "sign"], [164, 1, 1, "", "sin"], [165, 1, 1, "", "sqrt"], [166, 1, 1, "", "stddev"], [200, 1, 1, "", "sum"], [201, 1, 1, "", "tan"]], "daft.Expression.binary": [[91, 1, 1, "", "concat"], [92, 1, 1, "", "length"], [93, 1, 1, "", "slice"]], "daft.Expression.dt": [[102, 1, 1, "", "date"], [103, 1, 1, "", "day"], [104, 1, 1, "", "day_of_week"], [105, 1, 1, "", "hour"], [106, 1, 1, "", "minute"], [107, 1, 1, "", "month"], [108, 1, 1, "", "second"], [109, 1, 1, "", "time"], [110, 1, 1, "", "truncate"], [111, 1, 1, "", "year"]], "daft.Expression.embedding": [[112, 1, 1, "", "cosine_distance"]], "daft.Expression.float": [[116, 1, 1, "", "fill_nan"], [117, 1, 1, "", "is_inf"], [118, 1, 1, "", "is_nan"], [119, 1, 1, "", "not_nan"]], "daft.Expression.image": [[123, 1, 1, "", "crop"], [124, 1, 1, "", "decode"], [125, 1, 1, "", "encode"], [126, 1, 1, "", "resize"], [127, 1, 1, "", "to_mode"]], "daft.Expression.json": [[130, 1, 1, "", "query"]], "daft.Expression.list": [[131, 1, 1, "", "chunk"], [132, 1, 1, "", "count"], [133, 1, 1, "", "get"], [134, 1, 1, "", "join"], [135, 1, 1, "", "length"], [136, 1, 1, "", "max"], [137, 1, 1, "", "mean"], [138, 1, 1, "", "min"], [139, 1, 1, "", "slice"], [140, 1, 1, "", "sort"], [141, 1, 1, "", "sum"], [142, 1, 1, "", "value_counts"]], "daft.Expression.map": [[147, 1, 1, "", "get"]], "daft.Expression.partitioning": [[153, 1, 1, "", "days"], [154, 1, 1, "", "hours"], [155, 1, 1, "", "iceberg_bucket"], [156, 1, 1, "", "iceberg_truncate"], [157, 1, 1, "", "months"], [158, 1, 1, "", "years"]], "daft.Expression.str": [[167, 1, 1, "", "capitalize"], [168, 1, 1, "", "concat"], [169, 1, 1, "", "contains"], [170, 1, 1, "", "count_matches"], [171, 1, 1, "", "endswith"], [172, 1, 1, "", "extract"], [173, 1, 1, "", "extract_all"], [174, 1, 1, "", "find"], [175, 1, 1, "", "ilike"], [176, 1, 1, "", "left"], [177, 1, 1, "", "length"], [178, 1, 1, "", "length_bytes"], [179, 1, 1, "", "like"], [180, 1, 1, "", "lower"], [181, 1, 1, "", "lpad"], [182, 1, 1, "", "lstrip"], [183, 1, 1, "", "match"], [184, 1, 1, "", "normalize"], [185, 1, 1, "", "repeat"], [186, 1, 1, "", "replace"], [187, 1, 1, "", "reverse"], [188, 1, 1, "", "right"], [189, 1, 1, "", "rpad"], [190, 1, 1, "", "rstrip"], [191, 1, 1, "", "split"], [192, 1, 1, "", "startswith"], [193, 1, 1, "", "substr"], [194, 1, 1, "", "to_date"], [195, 1, 1, "", "to_datetime"], [196, 1, 1, "", "tokenize_decode"], [197, 1, 1, "", "tokenize_encode"], [198, 1, 1, "", "upper"]], "daft.Expression.struct": [[199, 1, 1, "", "get"]], "daft.Expression.url": [[202, 1, 1, "", "download"]], "daft.ImageFormat": [[226, 1, 1, "", "__init__"]], "daft.ImageMode": [[227, 1, 1, "", "__init__"]], "daft.Schema": [[346, 1, 1, "", "from_pyarrow_schema"], [346, 1, 1, "", "to_pyarrow_schema"]], "daft.Series": [[347, 1, 1, "", "arccos"], [347, 1, 1, "", "arccosh"], [347, 1, 1, "", "arcsin"], [347, 1, 1, "", "arcsinh"], [347, 1, 1, "", "arctan"], [347, 1, 1, "", "arctan2"], [347, 1, 1, "", "arctanh"], [347, 1, 1, "", "cos"], [347, 1, 1, "", "cot"], [347, 1, 1, "", "degrees"], [347, 1, 1, "", "exp"], [347, 1, 1, "", "from_arrow"], [347, 1, 1, "", "from_numpy"], [347, 1, 1, "", "from_pandas"], [347, 1, 1, "", "from_pylist"], [347, 1, 1, "", "ln"], [347, 1, 1, "", "log"], [347, 1, 1, "", "log10"], [347, 1, 1, "", "log2"], [347, 1, 1, "", "minhash"], [347, 1, 1, "", "radians"], [347, 1, 1, "", "sin"], [347, 1, 1, "", "size_bytes"], [347, 1, 1, "", "tan"], [347, 1, 1, "", "to_arrow"], [347, 1, 1, "", "to_pylist"]], "daft.context": [[5, 3, 1, "", "set_runner_py"], [6, 3, 1, "", "set_runner_ray"]], "daft.dataframe": [[343, 0, 1, "", "GroupedDataFrame"]], "daft.dataframe.GroupedDataFrame": [[343, 1, 1, "", "agg"], [343, 1, 1, "", "agg_concat"], [343, 1, 1, "", "agg_list"], [343, 1, 1, "", "any_value"], [343, 1, 1, "", "count"], [343, 1, 1, "", "map_groups"], [343, 1, 1, "", "max"], [343, 1, 1, "", "mean"], [343, 1, 1, "", "min"], [343, 1, 1, "", "stddev"], [343, 1, 1, "", "sum"]], "daft.io": [[206, 0, 1, "", "AzureConfig"], [207, 0, 1, "", "GCSConfig"], [208, 0, 1, "", "IOConfig"], [209, 0, 1, "", "S3Config"], [210, 0, 1, "", "S3Credentials"]], "daft.io.AzureConfig": [[206, 1, 1, "", "__init__"]], "daft.io.GCSConfig": [[207, 1, 1, "", "__init__"]], "daft.io.IOConfig": [[208, 1, 1, "", "__init__"]], "daft.io.S3Config": [[209, 1, 1, "", "__init__"]], "daft.io.S3Credentials": [[210, 1, 1, "", "__init__"]], "daft.sql._sql_funcs": [[228, 3, 1, "", "AzureConfig"], [229, 3, 1, "", "GCSConfig"], [230, 3, 1, "", "HTTPConfig"], [231, 3, 1, "", "S3Config"], [232, 3, 1, "", "abs"], [233, 3, 1, "", "acos"], [234, 3, 1, "", "acosh"], [235, 3, 1, "", "array_to_string"], [236, 3, 1, "", "asin"], [237, 3, 1, "", "asinh"], [238, 3, 1, "", "atan"], [239, 3, 1, "", "atan2"], [240, 3, 1, "", "atanh"], [241, 3, 1, "", "avg"], [242, 3, 1, "", "capitalize"], [243, 3, 1, "", "ceil"], [244, 3, 1, "", "clip"], [245, 3, 1, "", "coalesce"], [246, 3, 1, "", "concat"], [247, 3, 1, "", "contains"], [248, 3, 1, "", "cos"], [249, 3, 1, "", "cot"], [250, 3, 1, "", "count"], [251, 3, 1, "", "count_distinct"], [252, 3, 1, "", "count_matches"], [253, 3, 1, "", "date"], [254, 3, 1, "", "day"], [255, 3, 1, "", "dayofweek"], [256, 3, 1, "", "degrees"], [257, 3, 1, "", "ends_with"], [258, 3, 1, "", "exp"], [259, 3, 1, "", "explode"], [260, 3, 1, "", "fill_nan"], [261, 3, 1, "", "find"], [262, 3, 1, "", "floor"], [263, 3, 1, "", "hash"], [264, 3, 1, "", "hour"], [265, 3, 1, "", "image_crop"], [266, 3, 1, "", "image_decode"], [267, 3, 1, "", "image_encode"], [268, 3, 1, "", "image_resize"], [269, 3, 1, "", "image_to_mode"], [270, 3, 1, "", "is_inf"], [271, 3, 1, "", "is_nan"], [272, 3, 1, "", "json_query"], [273, 3, 1, "", "left"], [274, 3, 1, "", "length"], [275, 3, 1, "", "length_bytes"], [276, 3, 1, "", "list_chunk"], [277, 3, 1, "", "list_count"], [278, 3, 1, "", "list_join"], [279, 3, 1, "", "list_max"], [280, 3, 1, "", "list_mean"], [281, 3, 1, "", "list_min"], [282, 3, 1, "", "list_slice"], [283, 3, 1, "", "list_sort"], [284, 3, 1, "", "list_sum"], [285, 3, 1, "", "ln"], [286, 3, 1, "", "log"], [287, 3, 1, "", "log10"], [288, 3, 1, "", "log2"], [289, 3, 1, "", "lower"], [290, 3, 1, "", "lpad"], [291, 3, 1, "", "lstrip"], [292, 3, 1, "", "map_extract"], [293, 3, 1, "", "map_get"], [294, 3, 1, "", "max"], [295, 3, 1, "", "mean"], [296, 3, 1, "", "min"], [297, 3, 1, "", "minhash"], [298, 3, 1, "", "minute"], [299, 3, 1, "", "month"], [300, 3, 1, "", "normalize"], [301, 3, 1, "", "not_nan"], [302, 3, 1, "", "partitioning_days"], [303, 3, 1, "", "partitioning_hours"], [304, 3, 1, "", "partitioning_iceberg_bucket"], [305, 3, 1, "", "partitioning_iceberg_truncate"], [306, 3, 1, "", "partitioning_months"], [307, 3, 1, "", "partitioning_years"], [308, 3, 1, "", "radians"], [309, 3, 1, "", "regexp_extract"], [310, 3, 1, "", "regexp_extract_all"], [311, 3, 1, "", "regexp_match"], [312, 3, 1, "", "regexp_replace"], [313, 3, 1, "", "regexp_split"], [314, 3, 1, "", "repeat"], [315, 3, 1, "", "reverse"], [316, 3, 1, "", "right"], [317, 3, 1, "", "round"], [318, 3, 1, "", "rpad"], [319, 3, 1, "", "rstrip"], [320, 3, 1, "", "second"], [321, 3, 1, "", "sign"], [322, 3, 1, "", "sin"], [323, 3, 1, "", "split"], [324, 3, 1, "", "sqrt"], [325, 3, 1, "", "starts_with"], [326, 3, 1, "", "stddev"], [327, 3, 1, "", "stddev_samp"], [328, 3, 1, "", "struct_extract"], [329, 3, 1, "", "struct_get"], [330, 3, 1, "", "sum"], [331, 3, 1, "", "tan"], [332, 3, 1, "", "time"], [333, 3, 1, "", "to_date"], [334, 3, 1, "", "to_datetime"], [335, 3, 1, "", "tokenize_decode"], [336, 3, 1, "", "tokenize_encode"], [337, 3, 1, "", "unnest"], [338, 3, 1, "", "upper"], [339, 3, 1, "", "url_download"], [340, 3, 1, "", "url_upload"], [341, 3, 1, "", "year"]], "daft.udf": [[349, 0, 1, "", "UDF"]], "daft.udf.UDF": [[349, 1, 1, "", "__call__"], [349, 1, 1, "", "override_options"], [349, 1, 1, "", "with_concurrency"], [349, 1, 1, "", "with_init_args"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:function"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "function", "Python function"]}, "titleterms": {"10": 0, "minut": [0, 106, 298], "quickstart": 0, "what": [0, 354], "i": [0, 1, 357, 360, 381], "daft": [0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 356, 357, 364, 367, 370, 371, 376, 377, 378], "when": [0, 357, 360], "should": [0, 357, 360], "us": [0, 349, 357, 361, 363, 385], "instal": [0, 356, 370, 371, 376], "import": 0, "creat": [0, 349, 360, 363, 364, 365], "your": [0, 365], "first": 0, "datafram": [0, 2, 3, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 351, 353, 360, 361, 363, 365, 377, 383], "multimod": [0, 357, 365], "data": [0, 2, 3, 350, 353, 354, 357, 360, 364, 366, 370, 376, 381, 382, 383], "type": [0, 345, 357, 360, 362, 370, 371, 373, 385], "sourc": [0, 356], "execut": [0, 3, 353, 360], "displai": 0, "basic": [0, 360, 363, 367], "oper": [0, 361, 363], "select": [0, 3, 37, 361], "column": [0, 3, 361, 363, 382, 385], "exclud": [0, 19], "transform": [0, 50], "express": [0, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 342, 357, 360, 363, 383], "other": 0, "sort": [0, 39, 140], "group": [0, 359], "aggreg": [0, 3, 342, 359], "miss": 0, "filter": [0, 3, 22], "queri": [0, 130, 357, 360, 367, 376, 384], "plan": [0, 360], "more": 0, "advanc": [0, 356], "merg": 0, "work": [0, 365], "user": [0, 349, 367, 385], "defin": [0, 349, 385], "function": [0, 348, 349, 383, 385], "ml": [0, 365], "workload": [0, 357], "write": [0, 3, 370, 373, 382], "": 0, "next": 0, "contribut": 0, "configur": [1, 364], "set": [1, 364, 365], "runner": 1, "o": 1, "creation": 2, "In": [2, 353], "memori": [2, 353, 380, 382], "python": [2, 357, 362], "object": [2, 365], "arrow": 2, "panda": [2, 351, 357], "file": [2, 364, 382], "parquet": [2, 364], "csv": [2, 364], "json": [2, 130, 342, 363, 364], "path": [2, 365, 382], "catalog": [2, 364, 377, 382], "apach": [2, 371, 373], "iceberg": [2, 364, 373], "delta": [2, 364, 370, 377], "lake": [2, 364, 370, 377], "hudi": [2, 364, 371], "integr": [2, 3, 367, 368], "rai": [2, 350, 351, 375], "dataset": [2, 351, 372, 384], "dask": [2, 350, 351, 357], "databas": [2, 364, 382], "manipul": 3, "row": [3, 361, 385], "reorder": [3, 361], "combin": [3, 357, 361], "retriev": 3, "materi": [3, 360], "visual": 3, "schema": [3, 36, 346, 360], "lineag": 3, "datatyp": [4, 362], "context": [5, 6], "set_runner_pi": 5, "set_runner_rai": 6, "execution_config_ctx": 7, "planning_config_ctx": 8, "set_execution_config": 9, "set_planning_config": 10, "__getitem__": 12, "agg": 13, "collect": [14, 354], "column_nam": 15, "concat": [16, 91, 168, 246], "count": [17, 100, 132, 250, 350], "distinct": 18, "explain": 20, "explod": [21, 259, 361], "groupbi": [23, 343], "into_partit": 24, "iter_partit": 25, "iter_row": 26, "join": [27, 134], "limit": 28, "max": [29, 136, 148, 294], "mean": [30, 137, 149, 295], "melt": 31, "min": [32, 138, 150, 296], "pivot": 33, "repartit": [34, 357, 361], "sampl": 35, "show": 38, "stddev": [40, 166, 326], "sum": [41, 141, 200, 330], "to_arrow": 42, "to_dask_datafram": 43, "to_panda": 44, "to_pydict": 45, "to_pylist": 46, "to_ray_dataset": 47, "to_torch_iter_dataset": 48, "to_torch_map_dataset": 49, "unpivot": 51, "where": 52, "with_column": [53, 54], "write_csv": 55, "write_deltalak": 56, "write_iceberg": 57, "write_parquet": 58, "__abs__": 59, "__add__": 60, "__and__": 61, "__eq__": 62, "__ge__": 63, "__gt__": 64, "__invert__": 65, "__le__": 66, "__lshift__": 67, "__lt__": 68, "__mod__": 69, "__mul__": 70, "__ne__": 71, "__or__": 72, "__rshift__": 73, "__sub__": 74, "__truediv__": 75, "agg_concat": 76, "agg_list": 77, "alia": 78, "any_valu": 79, "appli": [80, 385], "approx_count_distinct": 81, "approx_percentil": 82, "arcco": 83, "arccosh": 84, "arcsin": 85, "arcsinh": 86, "arctan": 87, "arctan2": 88, "arctanh": 89, "between": 90, "binari": [91, 92, 93, 342], "length": [92, 135, 177, 274], "slice": [93, 139], "cast": 94, "cbrt": 95, "ceil": [96, 243], "clip": [97, 244], "co": [98, 248], "cot": [99, 249], "degre": [101, 256], "dt": [102, 103, 104, 105, 106, 107, 108, 109, 110, 111], "date": [102, 253], "dai": [103, 153, 254], "day_of_week": 104, "hour": [105, 154, 264], "month": [107, 157, 299], "second": [108, 320], "time": [109, 332, 363], "truncat": [110, 363], "year": [111, 158, 341], "embed": [112, 342], "cosine_dist": 112, "eq_null_saf": 113, "exp": [114, 258], "fill_nul": 115, "float": [116, 117, 118, 119, 342], "fill_nan": [116, 260], "is_inf": [117, 270], "is_nan": [118, 271], "not_nan": [119, 301], "floor": [120, 262], "hash": [121, 263], "if_els": 122, "imag": [123, 124, 125, 126, 127, 342, 345, 365, 384], "crop": 123, "decod": 124, "encod": 125, "resiz": 126, "to_mod": 127, "is_in": 128, "is_nul": 129, "list": [131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 342], "chunk": 131, "get": [133, 147, 199], "value_count": 142, "ln": [143, 285], "log": [144, 286, 350], "log10": [145, 287], "log2": [146, 288], "map": [147, 342], "minhash": [151, 297], "not_nul": 152, "partit": [153, 154, 155, 156, 157, 158, 342, 353, 381, 385], "iceberg_bucket": 155, "iceberg_trunc": 156, "radian": [159, 308], "round": [160, 317], "shift_left": 161, "shift_right": 162, "sign": [163, 321], "sin": [164, 322], "sqrt": [165, 324], "str": [167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198], "capit": [167, 242], "contain": [169, 247], "count_match": [170, 252], "endswith": 171, "extract": [172, 363], "extract_al": 173, "find": [174, 261], "ilik": 175, "left": [176, 273], "length_byt": [178, 275], "like": 179, "lower": [180, 289], "lpad": [181, 290], "lstrip": [182, 291], "match": 183, "normal": [184, 300], "repeat": [185, 314], "replac": 186, "revers": [187, 315], "right": [188, 316], "rpad": [189, 318], "rstrip": [190, 319], "split": [191, 323], "startswith": 192, "substr": 193, "to_dat": [194, 333], "to_datetim": [195, 334], "tokenize_decod": [196, 335], "tokenize_encod": [197, 336], "upper": [198, 338], "struct": [199, 342], "tan": [201, 331], "url": [202, 342, 363, 365, 382], "download": [202, 365], "col": 203, "lit": 204, "to_struct": 205, "io": [206, 207, 208, 209, 210, 364], "azureconfig": [206, 228], "gcsconfig": [207, 229], "ioconfig": [208, 364], "s3config": [209, 231], "s3credenti": 210, "from_arrow": 211, "from_dask_datafram": 212, "from_glob_path": 213, "from_panda": 214, "from_pydict": 215, "from_pylist": 216, "from_ray_dataset": 217, "read_csv": 218, "read_deltalak": 219, "read_hudi": 220, "read_iceberg": 221, "read_json": 222, "read_lanc": 223, "read_parquet": 224, "read_sql": 225, "imageformat": 226, "imagemod": 227, "httpconfig": 230, "ab": 232, "aco": 233, "acosh": 234, "array_to_str": 235, "asin": 236, "asinh": 237, "atan": 238, "atan2": 239, "atanh": 240, "avg": 241, "coalesc": 245, "count_distinct": 251, "dayofweek": 255, "ends_with": 257, "image_crop": 265, "image_decod": 266, "image_encod": 267, "image_res": 268, "image_to_mod": 269, "json_queri": 272, "list_chunk": 276, "list_count": 277, "list_join": 278, "list_max": 279, "list_mean": 280, "list_min": 281, "list_slic": 282, "list_sort": 283, "list_sum": 284, "map_extract": 292, "map_get": 293, "partitioning_dai": 302, "partitioning_hour": 303, "partitioning_iceberg_bucket": 304, "partitioning_iceberg_trunc": 305, "partitioning_month": 306, "partitioning_year": 307, "regexp_extract": 309, "regexp_extract_al": 310, "regexp_match": 311, "regexp_replac": 312, "regexp_split": 313, "starts_with": 325, "stddev_samp": 327, "struct_extract": 328, "struct_get": 329, "unnest": 337, "url_download": 339, "url_upload": 340, "constructor": 342, "gener": [342, 384], "numer": [342, 362, 363], "logic": [342, 362, 363], "string": [342, 362, 363], "tempor": [342, 362, 363], "api": [344, 364], "document": 344, "miscellan": 345, "seri": 347, "sql": [348, 357, 360, 363, 364, 367, 376, 383], "udf": [349, 357, 384, 385], "resourc": [349, 385], "request": [349, 385], "benchmark": 350, "tpc": 350, "h": 350, "setup": 350, "result": [350, 365], "highlight": 350, "100": 350, "scale": 350, "factor": 350, "1000": 350, "node": 350, "ablat": 350, "detail": 350, "code": 350, "infrastructur": 350, "cluster": [350, 357], "spark": [350, 351], "comparison": [351, 363], "modin": 351, "frequent": 352, "ask": 352, "question": 352, "technic": 353, "architectur": 353, "high": 353, "level": 353, "overview": 353, "model": 353, "represent": 353, "telemetri": 354, "do": [354, 381], "we": [354, 381], "content": [355, 366, 367], "extra": 356, "depend": 356, "nightli": 356, "from": [356, 364, 377, 382, 383], "migrat": [357, 358], "guid": [357, 358, 367], "doe": 357, "an": 357, "index": 357, "try": 357, "copi": 357, "syntax": 357, "elimin": 357, "manual": [357, 369, 374], "perform": 357, "optim": [357, 364, 370, 376], "comput": [357, 360, 379], "parallel": [357, 364, 376], "built": 357, "machin": 357, "learn": 357, "support": [357, 370, 371, 376], "distribut": [357, 364, 376, 379], "remot": [357, 364], "rust": 357, "pyarrow": 357, "global": [359, 364], "concept": [360, 367], "terminologi": 360, "structur": [360, 367], "languag": [360, 367], "our": 360, "view": 360, "my": [360, 381], "run": [360, 383, 384], "wildcard": [361, 363], "nest": 362, "complex": 362, "refer": 363, "liter": 363, "compos": 363, "If": 363, "els": 363, "pattern": 363, "compon": 363, "zone": 363, "000": [364, 366], "access": [364, 366], "read": [364, 370, 371, 372, 373, 376, 382, 383], "e": 364, "g": 364, "s3": 364, "public": [364, 372], "bucket": 364, "connectorx": 364, "v": 364, "sqlalchemi": 364, "exampl": 364, "local": 364, "skip": [364, 370, 376], "deep": 364, "dive": 364, "default": 364, "behavior": 364, "overrid": 364, "per": [364, 385], "call": 364, "101": 365, "1": 365, "load": [365, 377], "store": 365, "cloud": 365, "2": 365, "byte": 365, "3": 365, "render": 365, "4": 365, "process": [365, 380], "thumbnail": 365, "classif": [365, 384], "up": 365, "pytorch": 365, "preprocess": 365, "classifi": 365, "puppi": 365, "5": 365, "A": 365, "note": 365, "about": 365, "featur": 366, "week": 366, "tabl": [366, 367, 370, 371, 373, 377], "001": 366, "depth": 367, "The": [367, 378], "powerus": [367, 378], "tutori": [367, 384], "amazon": 369, "web": 369, "servic": 369, "author": [369, 372, 374], "authent": [369, 374], "reli": [369, 374], "environ": [369, 374], "specifi": [369, 374], "credenti": [369, 374], "system": [370, 371, 373], "roadmap": [370, 371, 373, 376, 377], "huggingfac": 372, "microsoft": 374, "azur": 374, "connect": [374, 377], "fabric": 374, "onelak": 374, "usag": [375, 380], "client": 375, "job": 375, "uniti": 377, "manag": 380, "out": 380, "core": 380, "deal": 380, "oom": 380, "error": 380, "why": 381, "need": 381, "how": 381, "can": 381, "chang": 381, "wai": 381, "mnist": 384, "digit": 384, "llm": 384, "red": 384, "pajama": 384, "gpu": 384, "multi": 385, "input": 385, "return": 385, "class": 385}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"10 minutes Quickstart": [[0, "minutes-quickstart"]], "What is Daft?": [[0, "what-is-daft"]], "When Should I use Daft?": [[0, "when-should-i-use-daft"]], "Install and Import Daft": [[0, "install-and-import-daft"]], "Create your first Daft DataFrame": [[0, "create-your-first-daft-dataframe"]], "Multimodal Data Types": [[0, "multimodal-data-types"]], "Data Sources": [[0, "data-sources"]], "Executing and Displaying Data": [[0, "executing-and-displaying-data"]], "Basic DataFrame Operations": [[0, "basic-dataframe-operations"]], "Selecting Columns": [[0, "selecting-columns"], [3, "selecting-columns"], [361, "selecting-columns"]], "Excluding Data": [[0, "excluding-data"]], "Transforming Columns with Expressions": [[0, "transforming-columns-with-expressions"]], "Other DataFrame Operations": [[0, "other-dataframe-operations"]], "Sorting Data": [[0, "sorting-data"]], "Grouping and Aggregating Data": [[0, "grouping-and-aggregating-data"]], "Missing Data": [[0, "missing-data"]], "Filtering Data": [[0, "filtering-data"]], "Query Planning": [[0, "query-planning"]], "More Advanced Operations": [[0, "more-advanced-operations"]], "Merging DataFrames": [[0, "merging-dataframes"]], "Working with Multimodal Data": [[0, "working-with-multimodal-data"]], "User-Defined Functions": [[0, "user-defined-functions"]], "ML Workloads": [[0, "ml-workloads"]], "Writing Data": [[0, "writing-data"], [3, "writing-data"], [382, "writing-data"]], "What\u2019s Next?": [[0, "what-s-next"]], "Contributing": [[0, "contributing"]], "Configuration": [[1, "configuration"]], "Setting the Runner": [[1, "setting-the-runner"]], "Setting configurations": [[1, "setting-configurations"]], "I/O Configurations": [[1, "i-o-configurations"]], "Dataframe Creation": [[2, "dataframe-creation"]], "In-Memory Data": [[2, "in-memory-data"]], "Python Objects": [[2, "python-objects"]], "Arrow": [[2, "arrow"]], "Pandas": [[2, "pandas"]], "Files": [[2, "files"], [364, "files"]], "Parquet": [[2, "parquet"], [364, "parquet"]], "CSV": [[2, "csv"], [364, "csv"]], "JSON": [[2, "json"], [342, "json"], [364, "json"]], "File Paths": [[2, "file-paths"]], "Data Catalogs": [[2, "data-catalogs"], [364, "data-catalogs"]], "Apache Iceberg": [[2, "apache-iceberg"], [373, "apache-iceberg"]], "Delta Lake": [[2, "delta-lake"], [364, "delta-lake"], [370, "delta-lake"]], "Apache Hudi": [[2, "apache-hudi"], [371, "apache-hudi"]], "Integrations": [[2, "integrations"], [3, "integrations"], [367, "integrations"], [368, "integrations"]], "Ray Datasets": [[2, "ray-datasets"], [351, "ray-datasets"]], "Dask": [[2, "dask"]], "Databases": [[2, "databases"]], "DataFrame": [[3, "dataframe"], [360, "dataframe"]], "Data Manipulation": [[3, "data-manipulation"]], "Manipulating Columns": [[3, "manipulating-columns"]], "Filtering Rows": [[3, "filtering-rows"]], "Reordering": [[3, "reordering"]], "Combining": [[3, "combining"]], "Aggregations": [[3, "aggregations"]], "Execution": [[3, "execution"]], "Data Retrieval": [[3, "data-retrieval"]], "Materialization": [[3, "materialization"]], "Visualization": [[3, "visualization"]], "Schema and Lineage": [[3, "schema-and-lineage"]], "DataTypes": [[4, "datatypes"]], "daft.context.set_runner_py": [[5, "daft-context-set-runner-py"]], "daft.context.set_runner_ray": [[6, "daft-context-set-runner-ray"]], "daft.execution_config_ctx": [[7, "daft-execution-config-ctx"]], "daft.planning_config_ctx": [[8, "daft-planning-config-ctx"]], "daft.set_execution_config": [[9, "daft-set-execution-config"]], "daft.set_planning_config": [[10, "daft-set-planning-config"]], "daft.DataFrame": [[11, "daft-dataframe"]], "daft.DataFrame.__getitem__": [[12, "daft-dataframe-getitem"]], "daft.DataFrame.agg": [[13, "daft-dataframe-agg"]], "daft.DataFrame.collect": [[14, "daft-dataframe-collect"]], "daft.DataFrame.column_names": [[15, "daft-dataframe-column-names"]], "daft.DataFrame.concat": [[16, "daft-dataframe-concat"]], "daft.DataFrame.count": [[17, "daft-dataframe-count"]], "daft.DataFrame.distinct": [[18, "daft-dataframe-distinct"]], "daft.DataFrame.exclude": [[19, "daft-dataframe-exclude"]], "daft.DataFrame.explain": [[20, "daft-dataframe-explain"]], "daft.DataFrame.explode": [[21, "daft-dataframe-explode"]], "daft.DataFrame.filter": [[22, "daft-dataframe-filter"]], "daft.DataFrame.groupby": [[23, "daft-dataframe-groupby"]], "daft.DataFrame.into_partitions": [[24, "daft-dataframe-into-partitions"]], "daft.DataFrame.iter_partitions": [[25, "daft-dataframe-iter-partitions"]], "daft.DataFrame.iter_rows": [[26, "daft-dataframe-iter-rows"]], "daft.DataFrame.join": [[27, "daft-dataframe-join"]], "daft.DataFrame.limit": [[28, "daft-dataframe-limit"]], "daft.DataFrame.max": [[29, "daft-dataframe-max"]], "daft.DataFrame.mean": [[30, "daft-dataframe-mean"]], "daft.DataFrame.melt": [[31, "daft-dataframe-melt"]], "daft.DataFrame.min": [[32, "daft-dataframe-min"]], "daft.DataFrame.pivot": [[33, "daft-dataframe-pivot"]], "daft.DataFrame.repartition": [[34, "daft-dataframe-repartition"]], "daft.DataFrame.sample": [[35, "daft-dataframe-sample"]], "daft.DataFrame.schema": [[36, "daft-dataframe-schema"]], "daft.DataFrame.select": [[37, "daft-dataframe-select"]], "daft.DataFrame.show": [[38, "daft-dataframe-show"]], "daft.DataFrame.sort": [[39, "daft-dataframe-sort"]], "daft.DataFrame.stddev": [[40, "daft-dataframe-stddev"]], "daft.DataFrame.sum": [[41, "daft-dataframe-sum"]], "daft.DataFrame.to_arrow": [[42, "daft-dataframe-to-arrow"]], "daft.DataFrame.to_dask_dataframe": [[43, "daft-dataframe-to-dask-dataframe"]], "daft.DataFrame.to_pandas": [[44, "daft-dataframe-to-pandas"]], "daft.DataFrame.to_pydict": [[45, "daft-dataframe-to-pydict"]], "daft.DataFrame.to_pylist": [[46, "daft-dataframe-to-pylist"]], "daft.DataFrame.to_ray_dataset": [[47, "daft-dataframe-to-ray-dataset"]], "daft.DataFrame.to_torch_iter_dataset": [[48, "daft-dataframe-to-torch-iter-dataset"]], "daft.DataFrame.to_torch_map_dataset": [[49, "daft-dataframe-to-torch-map-dataset"]], "daft.DataFrame.transform": [[50, "daft-dataframe-transform"]], "daft.DataFrame.unpivot": [[51, "daft-dataframe-unpivot"]], "daft.DataFrame.where": [[52, "daft-dataframe-where"]], "daft.DataFrame.with_column": [[53, "daft-dataframe-with-column"]], "daft.DataFrame.with_columns": [[54, "daft-dataframe-with-columns"]], "daft.DataFrame.write_csv": [[55, "daft-dataframe-write-csv"]], "daft.DataFrame.write_deltalake": [[56, "daft-dataframe-write-deltalake"]], "daft.DataFrame.write_iceberg": [[57, "daft-dataframe-write-iceberg"]], "daft.DataFrame.write_parquet": [[58, "daft-dataframe-write-parquet"]], "daft.Expression.__abs__": [[59, "daft-expression-abs"]], "daft.Expression.__add__": [[60, "daft-expression-add"]], "daft.Expression.__and__": [[61, "daft-expression-and"]], "daft.Expression.__eq__": [[62, "daft-expression-eq"]], "daft.Expression.__ge__": [[63, "daft-expression-ge"]], "daft.Expression.__gt__": [[64, "daft-expression-gt"]], "daft.Expression.__invert__": [[65, "daft-expression-invert"]], "daft.Expression.__le__": [[66, "daft-expression-le"]], "daft.Expression.__lshift__": [[67, "daft-expression-lshift"]], "daft.Expression.__lt__": [[68, "daft-expression-lt"]], "daft.Expression.__mod__": [[69, "daft-expression-mod"]], "daft.Expression.__mul__": [[70, "daft-expression-mul"]], "daft.Expression.__ne__": [[71, "daft-expression-ne"]], "daft.Expression.__or__": [[72, "daft-expression-or"]], "daft.Expression.__rshift__": [[73, "daft-expression-rshift"]], "daft.Expression.__sub__": [[74, "daft-expression-sub"]], "daft.Expression.__truediv__": [[75, "daft-expression-truediv"]], "daft.Expression.agg_concat": [[76, "daft-expression-agg-concat"]], "daft.Expression.agg_list": [[77, "daft-expression-agg-list"]], "daft.Expression.alias": [[78, "daft-expression-alias"]], "daft.Expression.any_value": [[79, "daft-expression-any-value"]], "daft.Expression.apply": [[80, "daft-expression-apply"]], "daft.Expression.approx_count_distinct": [[81, "daft-expression-approx-count-distinct"]], "daft.Expression.approx_percentiles": [[82, "daft-expression-approx-percentiles"]], "daft.Expression.arccos": [[83, "daft-expression-arccos"]], "daft.Expression.arccosh": [[84, "daft-expression-arccosh"]], "daft.Expression.arcsin": [[85, "daft-expression-arcsin"]], "daft.Expression.arcsinh": [[86, "daft-expression-arcsinh"]], "daft.Expression.arctan": [[87, "daft-expression-arctan"]], "daft.Expression.arctan2": [[88, "daft-expression-arctan2"]], "daft.Expression.arctanh": [[89, "daft-expression-arctanh"]], "daft.Expression.between": [[90, "daft-expression-between"]], "daft.Expression.binary.concat": [[91, "daft-expression-binary-concat"]], "daft.Expression.binary.length": [[92, "daft-expression-binary-length"]], "daft.Expression.binary.slice": [[93, "daft-expression-binary-slice"]], "daft.Expression.cast": [[94, "daft-expression-cast"]], "daft.Expression.cbrt": [[95, "daft-expression-cbrt"]], "daft.Expression.ceil": [[96, "daft-expression-ceil"]], "daft.Expression.clip": [[97, "daft-expression-clip"]], "daft.Expression.cos": [[98, "daft-expression-cos"]], "daft.Expression.cot": [[99, "daft-expression-cot"]], "daft.Expression.count": [[100, "daft-expression-count"]], "daft.Expression.degrees": [[101, "daft-expression-degrees"]], "daft.Expression.dt.date": [[102, "daft-expression-dt-date"]], "daft.Expression.dt.day": [[103, "daft-expression-dt-day"]], "daft.Expression.dt.day_of_week": [[104, "daft-expression-dt-day-of-week"]], "daft.Expression.dt.hour": [[105, "daft-expression-dt-hour"]], "daft.Expression.dt.minute": [[106, "daft-expression-dt-minute"]], "daft.Expression.dt.month": [[107, "daft-expression-dt-month"]], "daft.Expression.dt.second": [[108, "daft-expression-dt-second"]], "daft.Expression.dt.time": [[109, "daft-expression-dt-time"]], "daft.Expression.dt.truncate": [[110, "daft-expression-dt-truncate"]], "daft.Expression.dt.year": [[111, "daft-expression-dt-year"]], "daft.Expression.embedding.cosine_distance": [[112, "daft-expression-embedding-cosine-distance"]], "daft.Expression.eq_null_safe": [[113, "daft-expression-eq-null-safe"]], "daft.Expression.exp": [[114, "daft-expression-exp"]], "daft.Expression.fill_null": [[115, "daft-expression-fill-null"]], "daft.Expression.float.fill_nan": [[116, "daft-expression-float-fill-nan"]], "daft.Expression.float.is_inf": [[117, "daft-expression-float-is-inf"]], "daft.Expression.float.is_nan": [[118, "daft-expression-float-is-nan"]], "daft.Expression.float.not_nan": [[119, "daft-expression-float-not-nan"]], "daft.Expression.floor": [[120, "daft-expression-floor"]], "daft.Expression.hash": [[121, "daft-expression-hash"]], "daft.Expression.if_else": [[122, "daft-expression-if-else"]], "daft.Expression.image.crop": [[123, "daft-expression-image-crop"]], "daft.Expression.image.decode": [[124, "daft-expression-image-decode"]], "daft.Expression.image.encode": [[125, "daft-expression-image-encode"]], "daft.Expression.image.resize": [[126, "daft-expression-image-resize"]], "daft.Expression.image.to_mode": [[127, "daft-expression-image-to-mode"]], "daft.Expression.is_in": [[128, "daft-expression-is-in"]], "daft.Expression.is_null": [[129, "daft-expression-is-null"]], "daft.Expression.json.query": [[130, "daft-expression-json-query"]], "daft.Expression.list.chunk": [[131, "daft-expression-list-chunk"]], "daft.Expression.list.count": [[132, "daft-expression-list-count"]], "daft.Expression.list.get": [[133, "daft-expression-list-get"]], "daft.Expression.list.join": [[134, "daft-expression-list-join"]], "daft.Expression.list.length": [[135, "daft-expression-list-length"]], "daft.Expression.list.max": [[136, "daft-expression-list-max"]], "daft.Expression.list.mean": [[137, "daft-expression-list-mean"]], "daft.Expression.list.min": [[138, "daft-expression-list-min"]], "daft.Expression.list.slice": [[139, "daft-expression-list-slice"]], "daft.Expression.list.sort": [[140, "daft-expression-list-sort"]], "daft.Expression.list.sum": [[141, "daft-expression-list-sum"]], "daft.Expression.list.value_counts": [[142, "daft-expression-list-value-counts"]], "daft.Expression.ln": [[143, "daft-expression-ln"]], "daft.Expression.log": [[144, "daft-expression-log"]], "daft.Expression.log10": [[145, "daft-expression-log10"]], "daft.Expression.log2": [[146, "daft-expression-log2"]], "daft.Expression.map.get": [[147, "daft-expression-map-get"]], "daft.Expression.max": [[148, "daft-expression-max"]], "daft.Expression.mean": [[149, "daft-expression-mean"]], "daft.Expression.min": [[150, "daft-expression-min"]], "daft.Expression.minhash": [[151, "daft-expression-minhash"]], "daft.Expression.not_null": [[152, "daft-expression-not-null"]], "daft.Expression.partitioning.days": [[153, "daft-expression-partitioning-days"]], "daft.Expression.partitioning.hours": [[154, "daft-expression-partitioning-hours"]], "daft.Expression.partitioning.iceberg_bucket": [[155, "daft-expression-partitioning-iceberg-bucket"]], "daft.Expression.partitioning.iceberg_truncate": [[156, "daft-expression-partitioning-iceberg-truncate"]], "daft.Expression.partitioning.months": [[157, "daft-expression-partitioning-months"]], "daft.Expression.partitioning.years": [[158, "daft-expression-partitioning-years"]], "daft.Expression.radians": [[159, "daft-expression-radians"]], "daft.Expression.round": [[160, "daft-expression-round"]], "daft.Expression.shift_left": [[161, "daft-expression-shift-left"]], "daft.Expression.shift_right": [[162, "daft-expression-shift-right"]], "daft.Expression.sign": [[163, "daft-expression-sign"]], "daft.Expression.sin": [[164, "daft-expression-sin"]], "daft.Expression.sqrt": [[165, "daft-expression-sqrt"]], "daft.Expression.stddev": [[166, "daft-expression-stddev"]], "daft.Expression.str.capitalize": [[167, "daft-expression-str-capitalize"]], "daft.Expression.str.concat": [[168, "daft-expression-str-concat"]], "daft.Expression.str.contains": [[169, "daft-expression-str-contains"]], "daft.Expression.str.count_matches": [[170, "daft-expression-str-count-matches"]], "daft.Expression.str.endswith": [[171, "daft-expression-str-endswith"]], "daft.Expression.str.extract": [[172, "daft-expression-str-extract"]], "daft.Expression.str.extract_all": [[173, "daft-expression-str-extract-all"]], "daft.Expression.str.find": [[174, "daft-expression-str-find"]], "daft.Expression.str.ilike": [[175, "daft-expression-str-ilike"]], "daft.Expression.str.left": [[176, "daft-expression-str-left"]], "daft.Expression.str.length": [[177, "daft-expression-str-length"]], "daft.Expression.str.length_bytes": [[178, "daft-expression-str-length-bytes"]], "daft.Expression.str.like": [[179, "daft-expression-str-like"]], "daft.Expression.str.lower": [[180, "daft-expression-str-lower"]], "daft.Expression.str.lpad": [[181, "daft-expression-str-lpad"]], "daft.Expression.str.lstrip": [[182, "daft-expression-str-lstrip"]], "daft.Expression.str.match": [[183, "daft-expression-str-match"]], "daft.Expression.str.normalize": [[184, "daft-expression-str-normalize"]], "daft.Expression.str.repeat": [[185, "daft-expression-str-repeat"]], "daft.Expression.str.replace": [[186, "daft-expression-str-replace"]], "daft.Expression.str.reverse": [[187, "daft-expression-str-reverse"]], "daft.Expression.str.right": [[188, "daft-expression-str-right"]], "daft.Expression.str.rpad": [[189, "daft-expression-str-rpad"]], "daft.Expression.str.rstrip": [[190, "daft-expression-str-rstrip"]], "daft.Expression.str.split": [[191, "daft-expression-str-split"]], "daft.Expression.str.startswith": [[192, "daft-expression-str-startswith"]], "daft.Expression.str.substr": [[193, "daft-expression-str-substr"]], "daft.Expression.str.to_date": [[194, "daft-expression-str-to-date"]], "daft.Expression.str.to_datetime": [[195, "daft-expression-str-to-datetime"]], "daft.Expression.str.tokenize_decode": [[196, "daft-expression-str-tokenize-decode"]], "daft.Expression.str.tokenize_encode": [[197, "daft-expression-str-tokenize-encode"]], "daft.Expression.str.upper": [[198, "daft-expression-str-upper"]], "daft.Expression.struct.get": [[199, "daft-expression-struct-get"]], "daft.Expression.sum": [[200, "daft-expression-sum"]], "daft.Expression.tan": [[201, "daft-expression-tan"]], "daft.Expression.url.download": [[202, "daft-expression-url-download"]], "daft.col": [[203, "daft-col"]], "daft.lit": [[204, "daft-lit"]], "daft.to_struct": [[205, "daft-to-struct"]], "daft.io.AzureConfig": [[206, "daft-io-azureconfig"]], "daft.io.GCSConfig": [[207, "daft-io-gcsconfig"]], "daft.io.IOConfig": [[208, "daft-io-ioconfig"]], "daft.io.S3Config": [[209, "daft-io-s3config"]], "daft.io.S3Credentials": [[210, "daft-io-s3credentials"]], "daft.from_arrow": [[211, "daft-from-arrow"]], "daft.from_dask_dataframe": [[212, "daft-from-dask-dataframe"]], "daft.from_glob_path": [[213, "daft-from-glob-path"]], "daft.from_pandas": [[214, "daft-from-pandas"]], "daft.from_pydict": [[215, "daft-from-pydict"]], "daft.from_pylist": [[216, "daft-from-pylist"]], "daft.from_ray_dataset": [[217, "daft-from-ray-dataset"]], "daft.read_csv": [[218, "daft-read-csv"]], "daft.read_deltalake": [[219, "daft-read-deltalake"]], "daft.read_hudi": [[220, "daft-read-hudi"]], "daft.read_iceberg": [[221, "daft-read-iceberg"]], "daft.read_json": [[222, "daft-read-json"]], "daft.read_lance": [[223, "daft-read-lance"]], "daft.read_parquet": [[224, "daft-read-parquet"]], "daft.read_sql": [[225, "daft-read-sql"]], "daft.ImageFormat": [[226, "daft-imageformat"]], "daft.ImageMode": [[227, "daft-imagemode"]], "Expressions": [[342, "expressions"], [360, "expressions"], [363, "expressions"]], "Constructors": [[342, "constructors"]], "Generic": [[342, "generic"]], "Numeric": [[342, "numeric"]], "Logical": [[342, "logical"]], "Aggregation": [[342, "aggregation"]], "Strings": [[342, "strings"]], "Binary": [[342, "binary"]], "Floats": [[342, "floats"]], "Temporal": [[342, "temporal"], [362, "temporal"]], "List": [[342, "list"]], "Struct": [[342, "struct"]], "Map": [[342, "map"]], "Image": [[342, "image"]], "Partitioning": [[342, "partitioning"], [381, "partitioning"]], "URLs": [[342, "urls"]], "Embedding": [[342, "embedding"]], "GroupBy": [[343, "groupby"]], "API Documentation": [[344, "api-documentation"]], "Miscellaneous": [[345, "miscellaneous"]], "Types": [[345, "types"]], "Image Types": [[345, "image-types"]], "Schema": [[346, "schema"]], "Series": [[347, "series"]], "SQL": [[348, "sql"], [376, "sql"], [383, "sql"]], "SQL Functions": [[348, "sql-functions"], [383, "sql-functions"]], "User Defined Functions (UDFs)": [[349, "user-defined-functions-udfs"]], "Creating UDFs": [[349, "creating-udfs"]], "Resource Requests": [[349, "resource-requests"], [385, "resource-requests"]], "Using UDFs": [[349, "using-udfs"]], "Benchmarks": [[350, "benchmarks"]], "TPC-H Benchmark": [[350, "tpc-h-benchmark"]], "Setup": [[350, "setup"]], "Results": [[350, "results"]], "Highlights": [[350, "highlights"]], "100 Scale Factor": [[350, "scale-factor"]], "1000 Scale Factor": [[350, "id2"]], "1000 Scale Factor - Node Count Ablation": [[350, "scale-factor-node-count-ablation"]], "Detailed Benchmarking Setup": [[350, "detailed-benchmarking-setup"]], "Benchmarking Code": [[350, "benchmarking-code"]], "Infrastructure": [[350, "infrastructure"]], "Data": [[350, "data"]], "Cluster Setup": [[350, "cluster-setup"]], "Dask and Ray": [[350, "dask-and-ray"]], "Spark": [[350, "spark"]], "Logs": [[350, "logs"]], "Dataframe Comparison": [[351, "dataframe-comparison"]], "Pandas/Modin": [[351, "pandas-modin"]], "Spark Dataframes": [[351, "spark-dataframes"]], "Dask Dataframes": [[351, "dask-dataframes"]], "Frequently Asked Questions": [[352, "frequently-asked-questions"]], "Technical Architecture": [[353, "technical-architecture"]], "High Level Overview": [[353, "high-level-overview"]], "Execution Model": [[353, "execution-model"]], "DataFrame Partitioning": [[353, "dataframe-partitioning"]], "In-Memory Data Representation": [[353, "in-memory-data-representation"]], "Telemetry": [[354, "telemetry"]], "What data do we collect?": [[354, "what-data-do-we-collect"]], "Contents:": [[355, null]], "Installation": [[356, "installation"]], "Extra Dependencies": [[356, "extra-dependencies"]], "Advanced Installation": [[356, "advanced-installation"]], "Installing Nightlies": [[356, "installing-nightlies"]], "Installing Daft from source": [[356, "installing-daft-from-source"]], "Dask Migration Guide": [[357, "dask-migration-guide"]], "When should I use Daft?": [[357, "when-should-i-use-daft"]], "Daft does not use an index": [[357, "daft-does-not-use-an-index"]], "Daft does not try to copy the pandas syntax": [[357, "daft-does-not-try-to-copy-the-pandas-syntax"]], "Daft eliminates manual repartitioning of data": [[357, "daft-eliminates-manual-repartitioning-of-data"]], "Daft performs Query Optimization for optimal performance": [[357, "daft-performs-query-optimization-for-optimal-performance"]], "Daft uses Expressions and UDFs to perform computations in parallel": [[357, "daft-uses-expressions-and-udfs-to-perform-computations-in-parallel"]], "Daft is built for Machine Learning Workloads": [[357, "daft-is-built-for-machine-learning-workloads"]], "Daft supports Multimodal Data Types": [[357, "daft-supports-multimodal-data-types"]], "Distributed Computing and Remote Clusters": [[357, "distributed-computing-and-remote-clusters"]], "SQL Support": [[357, "sql-support"]], "Daft combines Python with Rust and Pyarrow for optimal performance": [[357, "daft-combines-python-with-rust-and-pyarrow-for-optimal-performance"]], "Migration Guides": [[358, "migration-guides"]], "Aggregations and Grouping": [[359, "aggregations-and-grouping"]], "Global Aggregations": [[359, "global-aggregations"]], "Grouped Aggregations": [[359, "grouped-aggregations"]], "Basic Concepts": [[360, "basic-concepts"], [367, "basic-concepts"]], "Terminology": [[360, "terminology"]], "DataFrames": [[360, "dataframes"]], "Query Plan": [[360, "query-plan"]], "Structured Query Language (SQL)": [[360, "structured-query-language-sql"], [367, "structured-query-language-sql"]], "Creating a Dataframe": [[360, "creating-a-dataframe"]], "Executing our DataFrame and Viewing Data": [[360, "executing-our-dataframe-and-viewing-data"]], "When should I materialize my DataFrame?": [[360, "when-should-i-materialize-my-dataframe"]], "Schemas and Types": [[360, "schemas-and-types"]], "Running Computation with Expressions": [[360, "running-computation-with-expressions"]], "DataFrame Operations": [[361, "dataframe-operations"]], "Selecting Columns Using Wildcards": [[361, "selecting-columns-using-wildcards"]], "Selecting Rows": [[361, "selecting-rows"]], "Combining DataFrames": [[361, "combining-dataframes"]], "Reordering Rows": [[361, "reordering-rows"]], "Exploding Columns": [[361, "exploding-columns"]], "Repartitioning": [[361, "repartitioning"]], "Datatypes": [[362, "datatypes"]], "Numeric DataTypes": [[362, "numeric-datatypes"]], "Logical DataTypes": [[362, "logical-datatypes"]], "String Types": [[362, "string-types"]], "Nested": [[362, "nested"]], "Python": [[362, "python"]], "Complex Types": [[362, "complex-types"]], "Creating Expressions": [[363, "creating-expressions"]], "Referring to a column in a DataFrame": [[363, "referring-to-a-column-in-a-dataframe"]], "Using SQL": [[363, "using-sql"]], "Literals": [[363, "literals"]], "Wildcard Expressions": [[363, "wildcard-expressions"]], "Composing Expressions": [[363, "composing-expressions"]], "Numeric Expressions": [[363, "numeric-expressions"]], "String Expressions": [[363, "string-expressions"]], "URL Expressions": [[363, "url-expressions"]], "JSON Expressions": [[363, "json-expressions"]], "Logical Expressions": [[363, "logical-expressions"]], "Comparisons": [[363, "comparisons"]], "If Else Pattern": [[363, "if-else-pattern"]], "Temporal Expressions": [[363, "temporal-expressions"]], "Basic Temporal Operations": [[363, "basic-temporal-operations"]], "Temporal Component Extraction": [[363, "temporal-component-extraction"]], "Time Zone Operations": [[363, "time-zone-operations"]], "Temporal Truncation": [[363, "temporal-truncation"]], "#000 - Data Access": [[364, "data-access"], [366, "data-access"]], "Remote Reads, e.g. S3": [[364, "remote-reads-e-g-s3"]], "Reading from Public Buckets": [[364, "reading-from-public-buckets"]], "Remote IO Configuration": [[364, "remote-io-configuration"]], "SQL Databases": [[364, "sql-databases"]], "ConnectorX vs SQLAlchemy": [[364, "connectorx-vs-sqlalchemy"]], "Example": [[364, "example"]], "create local SQL database from CSV file": [[364, "create-local-sql-database-from-csv-file"]], "Access SQL Database with Daft": [[364, "access-sql-database-with-daft"]], "Parallel and Distributed Reads": [[364, "parallel-and-distributed-reads"]], "Data Skipping Optimizations": [[364, "data-skipping-optimizations"], [370, "data-skipping-optimizations"], [376, "data-skipping-optimizations"]], "Iceberg": [[364, "iceberg"]], "Hudi": [[364, "hudi"]], "IOConfig Deep Dive": [[364, "ioconfig-deep-dive"]], "Default IOConfig Behavior": [[364, "default-ioconfig-behavior"]], "Overriding the IOConfig": [[364, "overriding-the-ioconfig"]], "Setting a Global Override": [[364, "setting-a-global-override"]], "Overriding IOConfigs per-API call": [[364, "overriding-ioconfigs-per-api-call"]], "Data Access with Daft": [[364, "data-access-with-daft"]], "Multimodal 101: Images": [[365, "multimodal-101-images"]], "Working with Images in DataFrames": [[365, "working-with-images-in-dataframes"]], "1. Loading Image Paths": [[365, "loading-image-paths"]], "Storing Images in Cloud Object Store": [[365, "storing-images-in-cloud-object-store"]], "Storing Images at URLs": [[365, "storing-images-at-urls"]], "2. Download Images as Bytes": [[365, "download-images-as-bytes"]], "3. Render Images": [[365, "render-images"]], "4. Process your Images": [[365, "process-your-images"]], "Create Thumbnails": [[365, "create-thumbnails"]], "ML Classification": [[365, "ml-classification"]], "Setting up PyTorch": [[365, "setting-up-pytorch"]], "Preprocessing": [[365, "preprocessing"]], "Classify the Puppies! \ud83d\udc36": [[365, "classify-the-puppies"]], "5. Store your Results": [[365, "store-your-results"]], "A note about working with Images at URLs": [[365, "a-note-about-working-with-images-at-urls"]], "Feature of the Week": [[366, "feature-of-the-week"]], "Table of Contents": [[366, "table-of-contents"], [367, "table-of-contents"]], "#001 - Data Access": [[366, "id1"]], "Daft User Guide": [[367, "daft-user-guide"]], "Daft in Depth": [[367, "daft-in-depth"]], "The Daft Poweruser": [[367, "the-daft-poweruser"], [378, "the-daft-poweruser"]], "Tutorials": [[367, "tutorials"], [384, "tutorials"]], "Amazon Web Services": [[369, "amazon-web-services"]], "Authorization/Authentication": [[369, "authorization-authentication"], [374, "authorization-authentication"]], "Rely on Environment": [[369, "rely-on-environment"], [374, "rely-on-environment"]], "Manually specify credentials": [[369, "manually-specify-credentials"], [374, "manually-specify-credentials"]], "Installing Daft with Delta Lake Support": [[370, "installing-daft-with-delta-lake-support"]], "Reading a Table": [[370, "reading-a-table"], [371, "reading-a-table"], [373, "reading-a-table"]], "Write to Delta Lake": [[370, "write-to-delta-lake"]], "Type System": [[370, "type-system"], [371, "type-system"], [373, "type-system"]], "Roadmap": [[370, "roadmap"], [371, "roadmap"], [373, "roadmap"], [376, "roadmap"], [377, "roadmap"]], "Installing Daft with Apache Hudi Support": [[371, "installing-daft-with-apache-hudi-support"]], "Huggingface Datasets": [[372, "huggingface-datasets"]], "Reading Public Datasets": [[372, "reading-public-datasets"]], "Authorization": [[372, "authorization"]], "Writing to a Table": [[373, "writing-to-a-table"]], "Microsoft Azure": [[374, "microsoft-azure"]], "Connect to Microsoft Fabric/OneLake": [[374, "connect-to-microsoft-fabric-onelake"]], "Ray": [[375, "ray"]], "Usage": [[375, "usage"]], "Ray Client": [[375, "id2"]], "Ray Job": [[375, "ray-job"]], "Installing Daft with SQL Support": [[376, "installing-daft-with-sql-support"]], "Reading a SQL query": [[376, "reading-a-sql-query"]], "Parallel + Distributed Reads": [[376, "parallel-distributed-reads"]], "Unity Catalog": [[377, "unity-catalog"]], "Connecting to the Unity Catalog": [[377, "connecting-to-the-unity-catalog"]], "Loading a Daft Dataframe from a Delta Lake table in Unity Catalog": [[377, "loading-a-daft-dataframe-from-a-delta-lake-table-in-unity-catalog"]], "Distributed Computing": [[379, "distributed-computing"]], "Managing Memory Usage": [[380, "managing-memory-usage"]], "Out-of-core Processing": [[380, "out-of-core-processing"]], "Dealing with out-of-memory (OOM) errors": [[380, "dealing-with-out-of-memory-oom-errors"]], "Why do we need partitions?": [[381, "why-do-we-need-partitions"]], "How is my data partitioned?": [[381, "how-is-my-data-partitioned"]], "How can I change the way my data is partitioned?": [[381, "how-can-i-change-the-way-my-data-is-partitioned"]], "Reading/Writing Data": [[382, "reading-writing-data"]], "Reading Data": [[382, "reading-data"]], "From Files": [[382, "from-files"]], "From Data Catalogs": [[382, "from-data-catalogs"]], "From File Paths": [[382, "from-file-paths"]], "From Memory": [[382, "from-memory"]], "From Databases": [[382, "from-databases"]], "Reading a column of URLs": [[382, "reading-a-column-of-urls"]], "Running SQL on DataFrames": [[383, "running-sql-on-dataframes"]], "Reading data from SQL": [[383, "reading-data-from-sql"]], "SQL Expressions": [[383, "sql-expressions"]], "MNIST Digit Classification": [[384, "mnist-digit-classification"]], "Running LLMs on the Red Pajamas Dataset": [[384, "running-llms-on-the-red-pajamas-dataset"]], "Querying Images with UDFs": [[384, "querying-images-with-udfs"]], "Image generation on GPUs": [[384, "image-generation-on-gpus"]], "User-Defined Functions (UDF)": [[385, "user-defined-functions-udf"]], "Per-column per-row functions using .apply": [[385, "per-column-per-row-functions-using-apply"]], "Multi-column per-partition functions using @udf": [[385, "multi-column-per-partition-functions-using-udf"]], "UDF Inputs": [[385, "udf-inputs"]], "Return Types": [[385, "return-types"]], "Class UDFs": [[385, "class-udfs"]], "AzureConfig": [[228, "azureconfig"]], "GCSConfig": [[229, "gcsconfig"]], "HTTPConfig": [[230, "httpconfig"]], "S3Config": [[231, "s3config"]], "abs": [[232, "abs"]], "acos": [[233, "acos"]], "acosh": [[234, "acosh"]], "array_to_string": [[235, "array-to-string"]], "asin": [[236, "asin"]], "asinh": [[237, "asinh"]], "atan": [[238, "atan"]], "atan2": [[239, "atan2"]], "atanh": [[240, "atanh"]], "avg": [[241, "avg"]], "capitalize": [[242, "capitalize"]], "ceil": [[243, "ceil"]], "clip": [[244, "clip"]], "coalesce": [[245, "coalesce"]], "concat": [[246, "concat"]], "contains": [[247, "contains"]], "cos": [[248, "cos"]], "cot": [[249, "cot"]], "count": [[250, "count"]], "count_distinct": [[251, "count-distinct"]], "count_matches": [[252, "count-matches"]], "date": [[253, "date"]], "day": [[254, "day"]], "dayofweek": [[255, "dayofweek"]], "degrees": [[256, "degrees"]], "ends_with": [[257, "ends-with"]], "exp": [[258, "exp"]], "explode": [[259, "explode"]], "fill_nan": [[260, "fill-nan"]], "find": [[261, "find"]], "floor": [[262, "floor"]], "hash": [[263, "hash"]], "hour": [[264, "hour"]], "image_crop": [[265, "image-crop"]], "image_decode": [[266, "image-decode"]], "image_encode": [[267, "image-encode"]], "image_resize": [[268, "image-resize"]], "image_to_mode": [[269, "image-to-mode"]], "is_inf": [[270, "is-inf"]], "is_nan": [[271, "is-nan"]], "json_query": [[272, "json-query"]], "left": [[273, "left"]], "length": [[274, "length"]], "length_bytes": [[275, "length-bytes"]], "list_chunk": [[276, "list-chunk"]], "list_count": [[277, "list-count"]], "list_join": [[278, "list-join"]], "list_max": [[279, "list-max"]], "list_mean": [[280, "list-mean"]], "list_min": [[281, "list-min"]], "list_slice": [[282, "list-slice"]], "list_sort": [[283, "list-sort"]], "list_sum": [[284, "list-sum"]], "ln": [[285, "ln"]], "log": [[286, "log"]], "log10": [[287, "log10"]], "log2": [[288, "log2"]], "lower": [[289, "lower"]], "lpad": [[290, "lpad"]], "lstrip": [[291, "lstrip"]], "map_extract": [[292, "map-extract"]], "map_get": [[293, "map-get"]], "max": [[294, "max"]], "mean": [[295, "mean"]], "min": [[296, "min"]], "minhash": [[297, "minhash"]], "minute": [[298, "minute"]], "month": [[299, "month"]], "normalize": [[300, "normalize"]], "not_nan": [[301, "not-nan"]], "partitioning_days": [[302, "partitioning-days"]], "partitioning_hours": [[303, "partitioning-hours"]], "partitioning_iceberg_bucket": [[304, "partitioning-iceberg-bucket"]], "partitioning_iceberg_truncate": [[305, "partitioning-iceberg-truncate"]], "partitioning_months": [[306, "partitioning-months"]], "partitioning_years": [[307, "partitioning-years"]], "radians": [[308, "radians"]], "regexp_extract": [[309, "regexp-extract"]], "regexp_extract_all": [[310, "regexp-extract-all"]], "regexp_match": [[311, "regexp-match"]], "regexp_replace": [[312, "regexp-replace"]], "regexp_split": [[313, "regexp-split"]], "repeat": [[314, "repeat"]], "reverse": [[315, "reverse"]], "right": [[316, "right"]], "round": [[317, "round"]], "rpad": [[318, "rpad"]], "rstrip": [[319, "rstrip"]], "second": [[320, "second"]], "sign": [[321, "sign"]], "sin": [[322, "sin"]], "split": [[323, "split"]], "sqrt": [[324, "sqrt"]], "starts_with": [[325, "starts-with"]], "stddev": [[326, "stddev"]], "stddev_samp": [[327, "stddev-samp"]], "struct_extract": [[328, "struct-extract"]], "struct_get": [[329, "struct-get"]], "sum": [[330, "sum"]], "tan": [[331, "tan"]], "time": [[332, "time"]], "to_date": [[333, "to-date"]], "to_datetime": [[334, "to-datetime"]], "tokenize_decode": [[335, "tokenize-decode"]], "tokenize_encode": [[336, "tokenize-encode"]], "unnest": [[337, "unnest"]], "upper": [[338, "upper"]], "url_download": [[339, "url-download"]], "url_upload": [[340, "url-upload"]], "year": [[341, "year"]]}, "indexentries": {"azureconfig() (in module daft.sql._sql_funcs)": [[228, "daft.sql._sql_funcs.AzureConfig"]], "gcsconfig() (in module daft.sql._sql_funcs)": [[229, "daft.sql._sql_funcs.GCSConfig"]], "httpconfig() (in module daft.sql._sql_funcs)": [[230, "daft.sql._sql_funcs.HTTPConfig"]], "s3config() (in module daft.sql._sql_funcs)": [[231, "daft.sql._sql_funcs.S3Config"]], "abs() (in module daft.sql._sql_funcs)": [[232, "daft.sql._sql_funcs.abs"]], "acos() (in module daft.sql._sql_funcs)": [[233, "daft.sql._sql_funcs.acos"]], "acosh() (in module daft.sql._sql_funcs)": [[234, "daft.sql._sql_funcs.acosh"]], "array_to_string() (in module daft.sql._sql_funcs)": [[235, "daft.sql._sql_funcs.array_to_string"]], "asin() (in module daft.sql._sql_funcs)": [[236, "daft.sql._sql_funcs.asin"]], "asinh() (in module daft.sql._sql_funcs)": [[237, "daft.sql._sql_funcs.asinh"]], "atan() (in module daft.sql._sql_funcs)": [[238, "daft.sql._sql_funcs.atan"]], "atan2() (in module daft.sql._sql_funcs)": [[239, "daft.sql._sql_funcs.atan2"]], "atanh() (in module daft.sql._sql_funcs)": [[240, "daft.sql._sql_funcs.atanh"]], "avg() (in module daft.sql._sql_funcs)": [[241, "daft.sql._sql_funcs.avg"]], "capitalize() (in module daft.sql._sql_funcs)": [[242, "daft.sql._sql_funcs.capitalize"]], "ceil() (in module daft.sql._sql_funcs)": [[243, "daft.sql._sql_funcs.ceil"]], "clip() (in module daft.sql._sql_funcs)": [[244, "daft.sql._sql_funcs.clip"]], "coalesce() (in module daft.sql._sql_funcs)": [[245, "daft.sql._sql_funcs.coalesce"]], "concat() (in module daft.sql._sql_funcs)": [[246, "daft.sql._sql_funcs.concat"]], "contains() (in module daft.sql._sql_funcs)": [[247, "daft.sql._sql_funcs.contains"]], "cos() (in module daft.sql._sql_funcs)": [[248, "daft.sql._sql_funcs.cos"]], "cot() (in module daft.sql._sql_funcs)": [[249, "daft.sql._sql_funcs.cot"]], "count() (in module daft.sql._sql_funcs)": [[250, "daft.sql._sql_funcs.count"]], "count_distinct() (in module daft.sql._sql_funcs)": [[251, "daft.sql._sql_funcs.count_distinct"]], "count_matches() (in module daft.sql._sql_funcs)": [[252, "daft.sql._sql_funcs.count_matches"]], "date() (in module daft.sql._sql_funcs)": [[253, "daft.sql._sql_funcs.date"]], "day() (in module daft.sql._sql_funcs)": [[254, "daft.sql._sql_funcs.day"]], "dayofweek() (in module daft.sql._sql_funcs)": [[255, "daft.sql._sql_funcs.dayofweek"]], "degrees() (in module daft.sql._sql_funcs)": [[256, "daft.sql._sql_funcs.degrees"]], "ends_with() (in module daft.sql._sql_funcs)": [[257, "daft.sql._sql_funcs.ends_with"]], "exp() (in module daft.sql._sql_funcs)": [[258, "daft.sql._sql_funcs.exp"]], "explode() (in module daft.sql._sql_funcs)": [[259, "daft.sql._sql_funcs.explode"]], "fill_nan() (in module daft.sql._sql_funcs)": [[260, "daft.sql._sql_funcs.fill_nan"]], "find() (in module daft.sql._sql_funcs)": [[261, "daft.sql._sql_funcs.find"]], "floor() (in module daft.sql._sql_funcs)": [[262, "daft.sql._sql_funcs.floor"]], "hash() (in module daft.sql._sql_funcs)": [[263, "daft.sql._sql_funcs.hash"]], "hour() (in module daft.sql._sql_funcs)": [[264, "daft.sql._sql_funcs.hour"]], "image_crop() (in module daft.sql._sql_funcs)": [[265, "daft.sql._sql_funcs.image_crop"]], "image_decode() (in module daft.sql._sql_funcs)": [[266, "daft.sql._sql_funcs.image_decode"]], "image_encode() (in module daft.sql._sql_funcs)": [[267, "daft.sql._sql_funcs.image_encode"]], "image_resize() (in module daft.sql._sql_funcs)": [[268, "daft.sql._sql_funcs.image_resize"]], "image_to_mode() (in module daft.sql._sql_funcs)": [[269, "daft.sql._sql_funcs.image_to_mode"]], "is_inf() (in module daft.sql._sql_funcs)": [[270, "daft.sql._sql_funcs.is_inf"]], "is_nan() (in module daft.sql._sql_funcs)": [[271, "daft.sql._sql_funcs.is_nan"]], "json_query() (in module daft.sql._sql_funcs)": [[272, "daft.sql._sql_funcs.json_query"]], "left() (in module daft.sql._sql_funcs)": [[273, "daft.sql._sql_funcs.left"]], "length() (in module daft.sql._sql_funcs)": [[274, "daft.sql._sql_funcs.length"]], "length_bytes() (in module daft.sql._sql_funcs)": [[275, "daft.sql._sql_funcs.length_bytes"]], "list_chunk() (in module daft.sql._sql_funcs)": [[276, "daft.sql._sql_funcs.list_chunk"]], "list_count() (in module daft.sql._sql_funcs)": [[277, "daft.sql._sql_funcs.list_count"]], "list_join() (in module daft.sql._sql_funcs)": [[278, "daft.sql._sql_funcs.list_join"]], "list_max() (in module daft.sql._sql_funcs)": [[279, "daft.sql._sql_funcs.list_max"]], "list_mean() (in module daft.sql._sql_funcs)": [[280, "daft.sql._sql_funcs.list_mean"]], "list_min() (in module daft.sql._sql_funcs)": [[281, "daft.sql._sql_funcs.list_min"]], "list_slice() (in module daft.sql._sql_funcs)": [[282, "daft.sql._sql_funcs.list_slice"]], "list_sort() (in module daft.sql._sql_funcs)": [[283, "daft.sql._sql_funcs.list_sort"]], "list_sum() (in module daft.sql._sql_funcs)": [[284, "daft.sql._sql_funcs.list_sum"]], "ln() (in module daft.sql._sql_funcs)": [[285, "daft.sql._sql_funcs.ln"]], "log() (in module daft.sql._sql_funcs)": [[286, "daft.sql._sql_funcs.log"]], "log10() (in module daft.sql._sql_funcs)": [[287, "daft.sql._sql_funcs.log10"]], "log2() (in module daft.sql._sql_funcs)": [[288, "daft.sql._sql_funcs.log2"]], "lower() (in module daft.sql._sql_funcs)": [[289, "daft.sql._sql_funcs.lower"]], "lpad() (in module daft.sql._sql_funcs)": [[290, "daft.sql._sql_funcs.lpad"]], "lstrip() (in module daft.sql._sql_funcs)": [[291, "daft.sql._sql_funcs.lstrip"]], "map_extract() (in module daft.sql._sql_funcs)": [[292, "daft.sql._sql_funcs.map_extract"]], "map_get() (in module daft.sql._sql_funcs)": [[293, "daft.sql._sql_funcs.map_get"]], "max() (in module daft.sql._sql_funcs)": [[294, "daft.sql._sql_funcs.max"]], "mean() (in module daft.sql._sql_funcs)": [[295, "daft.sql._sql_funcs.mean"]], "min() (in module daft.sql._sql_funcs)": [[296, "daft.sql._sql_funcs.min"]], "minhash() (in module daft.sql._sql_funcs)": [[297, "daft.sql._sql_funcs.minhash"]], "minute() (in module daft.sql._sql_funcs)": [[298, "daft.sql._sql_funcs.minute"]], "month() (in module daft.sql._sql_funcs)": [[299, "daft.sql._sql_funcs.month"]], "normalize() (in module daft.sql._sql_funcs)": [[300, "daft.sql._sql_funcs.normalize"]], "not_nan() (in module daft.sql._sql_funcs)": [[301, "daft.sql._sql_funcs.not_nan"]], "partitioning_days() (in module daft.sql._sql_funcs)": [[302, "daft.sql._sql_funcs.partitioning_days"]], "partitioning_hours() (in module daft.sql._sql_funcs)": [[303, "daft.sql._sql_funcs.partitioning_hours"]], "partitioning_iceberg_bucket() (in module daft.sql._sql_funcs)": [[304, "daft.sql._sql_funcs.partitioning_iceberg_bucket"]], "partitioning_iceberg_truncate() (in module daft.sql._sql_funcs)": [[305, "daft.sql._sql_funcs.partitioning_iceberg_truncate"]], "partitioning_months() (in module daft.sql._sql_funcs)": [[306, "daft.sql._sql_funcs.partitioning_months"]], "partitioning_years() (in module daft.sql._sql_funcs)": [[307, "daft.sql._sql_funcs.partitioning_years"]], "radians() (in module daft.sql._sql_funcs)": [[308, "daft.sql._sql_funcs.radians"]], "regexp_extract() (in module daft.sql._sql_funcs)": [[309, "daft.sql._sql_funcs.regexp_extract"]], "regexp_extract_all() (in module daft.sql._sql_funcs)": [[310, "daft.sql._sql_funcs.regexp_extract_all"]], "regexp_match() (in module daft.sql._sql_funcs)": [[311, "daft.sql._sql_funcs.regexp_match"]], "regexp_replace() (in module daft.sql._sql_funcs)": [[312, "daft.sql._sql_funcs.regexp_replace"]], "regexp_split() (in module daft.sql._sql_funcs)": [[313, "daft.sql._sql_funcs.regexp_split"]], "repeat() (in module daft.sql._sql_funcs)": [[314, "daft.sql._sql_funcs.repeat"]], "reverse() (in module daft.sql._sql_funcs)": [[315, "daft.sql._sql_funcs.reverse"]], "right() (in module daft.sql._sql_funcs)": [[316, "daft.sql._sql_funcs.right"]], "round() (in module daft.sql._sql_funcs)": [[317, "daft.sql._sql_funcs.round"]], "rpad() (in module daft.sql._sql_funcs)": [[318, "daft.sql._sql_funcs.rpad"]], "rstrip() (in module daft.sql._sql_funcs)": [[319, "daft.sql._sql_funcs.rstrip"]], "second() (in module daft.sql._sql_funcs)": [[320, "daft.sql._sql_funcs.second"]], "sign() (in module daft.sql._sql_funcs)": [[321, "daft.sql._sql_funcs.sign"]], "sin() (in module daft.sql._sql_funcs)": [[322, "daft.sql._sql_funcs.sin"]], "split() (in module daft.sql._sql_funcs)": [[323, "daft.sql._sql_funcs.split"]], "sqrt() (in module daft.sql._sql_funcs)": [[324, "daft.sql._sql_funcs.sqrt"]], "starts_with() (in module daft.sql._sql_funcs)": [[325, "daft.sql._sql_funcs.starts_with"]], "stddev() (in module daft.sql._sql_funcs)": [[326, "daft.sql._sql_funcs.stddev"]], "stddev_samp() (in module daft.sql._sql_funcs)": [[327, "daft.sql._sql_funcs.stddev_samp"]], "struct_extract() (in module daft.sql._sql_funcs)": [[328, "daft.sql._sql_funcs.struct_extract"]], "struct_get() (in module daft.sql._sql_funcs)": [[329, "daft.sql._sql_funcs.struct_get"]], "sum() (in module daft.sql._sql_funcs)": [[330, "daft.sql._sql_funcs.sum"]], "tan() (in module daft.sql._sql_funcs)": [[331, "daft.sql._sql_funcs.tan"]], "time() (in module daft.sql._sql_funcs)": [[332, "daft.sql._sql_funcs.time"]], "to_date() (in module daft.sql._sql_funcs)": [[333, "daft.sql._sql_funcs.to_date"]], "to_datetime() (in module daft.sql._sql_funcs)": [[334, "daft.sql._sql_funcs.to_datetime"]], "tokenize_decode() (in module daft.sql._sql_funcs)": [[335, "daft.sql._sql_funcs.tokenize_decode"]], "tokenize_encode() (in module daft.sql._sql_funcs)": [[336, "daft.sql._sql_funcs.tokenize_encode"]], "unnest() (in module daft.sql._sql_funcs)": [[337, "daft.sql._sql_funcs.unnest"]], "upper() (in module daft.sql._sql_funcs)": [[338, "daft.sql._sql_funcs.upper"]], "url_download() (in module daft.sql._sql_funcs)": [[339, "daft.sql._sql_funcs.url_download"]], "url_upload() (in module daft.sql._sql_funcs)": [[340, "daft.sql._sql_funcs.url_upload"]], "year() (in module daft.sql._sql_funcs)": [[341, "daft.sql._sql_funcs.year"]], "sql() (in module daft)": [[348, "daft.sql"]], "sql_expr() (in module daft)": [[348, "daft.sql_expr"]]}})