Search.setIndex({"docnames": ["configs", "creation", "dataframe", "datatype", "doc_gen/configuration_functions/daft.context.set_runner_py", "doc_gen/configuration_functions/daft.context.set_runner_ray", "doc_gen/configuration_functions/daft.execution_config_ctx", "doc_gen/configuration_functions/daft.planning_config_ctx", "doc_gen/configuration_functions/daft.set_execution_config", "doc_gen/configuration_functions/daft.set_planning_config", "doc_gen/dataframe_methods/daft.DataFrame", "doc_gen/dataframe_methods/daft.DataFrame.__getitem__", "doc_gen/dataframe_methods/daft.DataFrame.agg", "doc_gen/dataframe_methods/daft.DataFrame.collect", "doc_gen/dataframe_methods/daft.DataFrame.column_names", "doc_gen/dataframe_methods/daft.DataFrame.concat", "doc_gen/dataframe_methods/daft.DataFrame.count", "doc_gen/dataframe_methods/daft.DataFrame.distinct", "doc_gen/dataframe_methods/daft.DataFrame.exclude", "doc_gen/dataframe_methods/daft.DataFrame.explain", "doc_gen/dataframe_methods/daft.DataFrame.explode", "doc_gen/dataframe_methods/daft.DataFrame.filter", "doc_gen/dataframe_methods/daft.DataFrame.groupby", "doc_gen/dataframe_methods/daft.DataFrame.into_partitions", "doc_gen/dataframe_methods/daft.DataFrame.iter_partitions", "doc_gen/dataframe_methods/daft.DataFrame.iter_rows", "doc_gen/dataframe_methods/daft.DataFrame.join", "doc_gen/dataframe_methods/daft.DataFrame.limit", "doc_gen/dataframe_methods/daft.DataFrame.max", "doc_gen/dataframe_methods/daft.DataFrame.mean", "doc_gen/dataframe_methods/daft.DataFrame.melt", "doc_gen/dataframe_methods/daft.DataFrame.min", "doc_gen/dataframe_methods/daft.DataFrame.pivot", "doc_gen/dataframe_methods/daft.DataFrame.repartition", "doc_gen/dataframe_methods/daft.DataFrame.sample", "doc_gen/dataframe_methods/daft.DataFrame.schema", "doc_gen/dataframe_methods/daft.DataFrame.select", "doc_gen/dataframe_methods/daft.DataFrame.show", "doc_gen/dataframe_methods/daft.DataFrame.sort", "doc_gen/dataframe_methods/daft.DataFrame.stddev", "doc_gen/dataframe_methods/daft.DataFrame.sum", "doc_gen/dataframe_methods/daft.DataFrame.to_arrow", "doc_gen/dataframe_methods/daft.DataFrame.to_dask_dataframe", "doc_gen/dataframe_methods/daft.DataFrame.to_pandas", "doc_gen/dataframe_methods/daft.DataFrame.to_pydict", "doc_gen/dataframe_methods/daft.DataFrame.to_pylist", "doc_gen/dataframe_methods/daft.DataFrame.to_ray_dataset", "doc_gen/dataframe_methods/daft.DataFrame.to_torch_iter_dataset", "doc_gen/dataframe_methods/daft.DataFrame.to_torch_map_dataset", "doc_gen/dataframe_methods/daft.DataFrame.transform", "doc_gen/dataframe_methods/daft.DataFrame.unpivot", "doc_gen/dataframe_methods/daft.DataFrame.where", "doc_gen/dataframe_methods/daft.DataFrame.with_column", "doc_gen/dataframe_methods/daft.DataFrame.with_columns", "doc_gen/dataframe_methods/daft.DataFrame.write_csv", "doc_gen/dataframe_methods/daft.DataFrame.write_deltalake", "doc_gen/dataframe_methods/daft.DataFrame.write_iceberg", "doc_gen/dataframe_methods/daft.DataFrame.write_parquet", "doc_gen/expression_methods/daft.Expression.__abs__", "doc_gen/expression_methods/daft.Expression.__add__", "doc_gen/expression_methods/daft.Expression.__and__", "doc_gen/expression_methods/daft.Expression.__eq__", "doc_gen/expression_methods/daft.Expression.__ge__", "doc_gen/expression_methods/daft.Expression.__gt__", "doc_gen/expression_methods/daft.Expression.__invert__", "doc_gen/expression_methods/daft.Expression.__le__", "doc_gen/expression_methods/daft.Expression.__lshift__", "doc_gen/expression_methods/daft.Expression.__lt__", "doc_gen/expression_methods/daft.Expression.__mod__", "doc_gen/expression_methods/daft.Expression.__mul__", "doc_gen/expression_methods/daft.Expression.__ne__", "doc_gen/expression_methods/daft.Expression.__or__", "doc_gen/expression_methods/daft.Expression.__rshift__", "doc_gen/expression_methods/daft.Expression.__sub__", "doc_gen/expression_methods/daft.Expression.__truediv__", "doc_gen/expression_methods/daft.Expression.agg_concat", "doc_gen/expression_methods/daft.Expression.agg_list", "doc_gen/expression_methods/daft.Expression.alias", "doc_gen/expression_methods/daft.Expression.any_value", "doc_gen/expression_methods/daft.Expression.apply", "doc_gen/expression_methods/daft.Expression.approx_count_distinct", "doc_gen/expression_methods/daft.Expression.approx_percentiles", "doc_gen/expression_methods/daft.Expression.arccos", "doc_gen/expression_methods/daft.Expression.arccosh", "doc_gen/expression_methods/daft.Expression.arcsin", "doc_gen/expression_methods/daft.Expression.arcsinh", "doc_gen/expression_methods/daft.Expression.arctan", "doc_gen/expression_methods/daft.Expression.arctan2", "doc_gen/expression_methods/daft.Expression.arctanh", "doc_gen/expression_methods/daft.Expression.between", "doc_gen/expression_methods/daft.Expression.binary.concat", "doc_gen/expression_methods/daft.Expression.binary.length", "doc_gen/expression_methods/daft.Expression.binary.slice", "doc_gen/expression_methods/daft.Expression.cast", "doc_gen/expression_methods/daft.Expression.cbrt", "doc_gen/expression_methods/daft.Expression.ceil", "doc_gen/expression_methods/daft.Expression.clip", "doc_gen/expression_methods/daft.Expression.cos", "doc_gen/expression_methods/daft.Expression.cot", "doc_gen/expression_methods/daft.Expression.count", "doc_gen/expression_methods/daft.Expression.degrees", "doc_gen/expression_methods/daft.Expression.dt.date", "doc_gen/expression_methods/daft.Expression.dt.day", "doc_gen/expression_methods/daft.Expression.dt.day_of_week", "doc_gen/expression_methods/daft.Expression.dt.hour", "doc_gen/expression_methods/daft.Expression.dt.minute", "doc_gen/expression_methods/daft.Expression.dt.month", "doc_gen/expression_methods/daft.Expression.dt.second", "doc_gen/expression_methods/daft.Expression.dt.time", "doc_gen/expression_methods/daft.Expression.dt.truncate", "doc_gen/expression_methods/daft.Expression.dt.year", "doc_gen/expression_methods/daft.Expression.embedding.cosine_distance", "doc_gen/expression_methods/daft.Expression.eq_null_safe", "doc_gen/expression_methods/daft.Expression.exp", "doc_gen/expression_methods/daft.Expression.fill_null", "doc_gen/expression_methods/daft.Expression.float.fill_nan", "doc_gen/expression_methods/daft.Expression.float.is_inf", "doc_gen/expression_methods/daft.Expression.float.is_nan", "doc_gen/expression_methods/daft.Expression.float.not_nan", "doc_gen/expression_methods/daft.Expression.floor", "doc_gen/expression_methods/daft.Expression.hash", "doc_gen/expression_methods/daft.Expression.if_else", "doc_gen/expression_methods/daft.Expression.image.crop", "doc_gen/expression_methods/daft.Expression.image.decode", "doc_gen/expression_methods/daft.Expression.image.encode", "doc_gen/expression_methods/daft.Expression.image.resize", "doc_gen/expression_methods/daft.Expression.image.to_mode", "doc_gen/expression_methods/daft.Expression.is_in", "doc_gen/expression_methods/daft.Expression.is_null", "doc_gen/expression_methods/daft.Expression.json.query", "doc_gen/expression_methods/daft.Expression.list.chunk", "doc_gen/expression_methods/daft.Expression.list.count", "doc_gen/expression_methods/daft.Expression.list.get", "doc_gen/expression_methods/daft.Expression.list.join", "doc_gen/expression_methods/daft.Expression.list.length", "doc_gen/expression_methods/daft.Expression.list.max", "doc_gen/expression_methods/daft.Expression.list.mean", "doc_gen/expression_methods/daft.Expression.list.min", "doc_gen/expression_methods/daft.Expression.list.slice", "doc_gen/expression_methods/daft.Expression.list.sort", "doc_gen/expression_methods/daft.Expression.list.sum", "doc_gen/expression_methods/daft.Expression.list.value_counts", "doc_gen/expression_methods/daft.Expression.ln", "doc_gen/expression_methods/daft.Expression.log", "doc_gen/expression_methods/daft.Expression.log10", "doc_gen/expression_methods/daft.Expression.log2", "doc_gen/expression_methods/daft.Expression.map.get", "doc_gen/expression_methods/daft.Expression.max", "doc_gen/expression_methods/daft.Expression.mean", "doc_gen/expression_methods/daft.Expression.min", "doc_gen/expression_methods/daft.Expression.minhash", "doc_gen/expression_methods/daft.Expression.not_null", "doc_gen/expression_methods/daft.Expression.partitioning.days", "doc_gen/expression_methods/daft.Expression.partitioning.hours", "doc_gen/expression_methods/daft.Expression.partitioning.iceberg_bucket", "doc_gen/expression_methods/daft.Expression.partitioning.iceberg_truncate", "doc_gen/expression_methods/daft.Expression.partitioning.months", "doc_gen/expression_methods/daft.Expression.partitioning.years", "doc_gen/expression_methods/daft.Expression.radians", "doc_gen/expression_methods/daft.Expression.round", "doc_gen/expression_methods/daft.Expression.shift_left", "doc_gen/expression_methods/daft.Expression.shift_right", "doc_gen/expression_methods/daft.Expression.sign", "doc_gen/expression_methods/daft.Expression.sin", "doc_gen/expression_methods/daft.Expression.sqrt", "doc_gen/expression_methods/daft.Expression.stddev", "doc_gen/expression_methods/daft.Expression.str.capitalize", "doc_gen/expression_methods/daft.Expression.str.concat", "doc_gen/expression_methods/daft.Expression.str.contains", "doc_gen/expression_methods/daft.Expression.str.count_matches", "doc_gen/expression_methods/daft.Expression.str.endswith", "doc_gen/expression_methods/daft.Expression.str.extract", "doc_gen/expression_methods/daft.Expression.str.extract_all", "doc_gen/expression_methods/daft.Expression.str.find", "doc_gen/expression_methods/daft.Expression.str.ilike", "doc_gen/expression_methods/daft.Expression.str.left", "doc_gen/expression_methods/daft.Expression.str.length", "doc_gen/expression_methods/daft.Expression.str.length_bytes", "doc_gen/expression_methods/daft.Expression.str.like", "doc_gen/expression_methods/daft.Expression.str.lower", "doc_gen/expression_methods/daft.Expression.str.lpad", "doc_gen/expression_methods/daft.Expression.str.lstrip", "doc_gen/expression_methods/daft.Expression.str.match", "doc_gen/expression_methods/daft.Expression.str.normalize", "doc_gen/expression_methods/daft.Expression.str.repeat", "doc_gen/expression_methods/daft.Expression.str.replace", "doc_gen/expression_methods/daft.Expression.str.reverse", "doc_gen/expression_methods/daft.Expression.str.right", "doc_gen/expression_methods/daft.Expression.str.rpad", "doc_gen/expression_methods/daft.Expression.str.rstrip", "doc_gen/expression_methods/daft.Expression.str.split", "doc_gen/expression_methods/daft.Expression.str.startswith", "doc_gen/expression_methods/daft.Expression.str.substr", "doc_gen/expression_methods/daft.Expression.str.to_date", "doc_gen/expression_methods/daft.Expression.str.to_datetime", "doc_gen/expression_methods/daft.Expression.str.tokenize_decode", "doc_gen/expression_methods/daft.Expression.str.tokenize_encode", "doc_gen/expression_methods/daft.Expression.str.upper", "doc_gen/expression_methods/daft.Expression.struct.get", "doc_gen/expression_methods/daft.Expression.sum", "doc_gen/expression_methods/daft.Expression.tan", "doc_gen/expression_methods/daft.Expression.url.download", "doc_gen/expression_methods/daft.col", "doc_gen/expression_methods/daft.lit", "doc_gen/expression_methods/daft.to_struct", "doc_gen/io_configs/daft.io.AzureConfig", "doc_gen/io_configs/daft.io.GCSConfig", "doc_gen/io_configs/daft.io.IOConfig", "doc_gen/io_configs/daft.io.S3Config", "doc_gen/io_configs/daft.io.S3Credentials", "doc_gen/io_functions/daft.from_arrow", "doc_gen/io_functions/daft.from_dask_dataframe", "doc_gen/io_functions/daft.from_glob_path", "doc_gen/io_functions/daft.from_pandas", "doc_gen/io_functions/daft.from_pydict", "doc_gen/io_functions/daft.from_pylist", "doc_gen/io_functions/daft.from_ray_dataset", "doc_gen/io_functions/daft.read_csv", "doc_gen/io_functions/daft.read_deltalake", "doc_gen/io_functions/daft.read_hudi", "doc_gen/io_functions/daft.read_iceberg", "doc_gen/io_functions/daft.read_json", "doc_gen/io_functions/daft.read_lance", "doc_gen/io_functions/daft.read_parquet", "doc_gen/io_functions/daft.read_sql", "doc_gen/misc/daft.ImageFormat", "doc_gen/misc/daft.ImageMode", "doc_gen/sql_funcs/daft.sql._sql_funcs.AzureConfig", "doc_gen/sql_funcs/daft.sql._sql_funcs.GCSConfig", "doc_gen/sql_funcs/daft.sql._sql_funcs.HTTPConfig", "doc_gen/sql_funcs/daft.sql._sql_funcs.S3Config", "doc_gen/sql_funcs/daft.sql._sql_funcs.abs", "doc_gen/sql_funcs/daft.sql._sql_funcs.acos", "doc_gen/sql_funcs/daft.sql._sql_funcs.acosh", "doc_gen/sql_funcs/daft.sql._sql_funcs.array_to_string", "doc_gen/sql_funcs/daft.sql._sql_funcs.asin", "doc_gen/sql_funcs/daft.sql._sql_funcs.asinh", "doc_gen/sql_funcs/daft.sql._sql_funcs.atan", "doc_gen/sql_funcs/daft.sql._sql_funcs.atan2", "doc_gen/sql_funcs/daft.sql._sql_funcs.atanh", "doc_gen/sql_funcs/daft.sql._sql_funcs.avg", "doc_gen/sql_funcs/daft.sql._sql_funcs.capitalize", "doc_gen/sql_funcs/daft.sql._sql_funcs.ceil", "doc_gen/sql_funcs/daft.sql._sql_funcs.clip", "doc_gen/sql_funcs/daft.sql._sql_funcs.coalesce", "doc_gen/sql_funcs/daft.sql._sql_funcs.concat", "doc_gen/sql_funcs/daft.sql._sql_funcs.contains", "doc_gen/sql_funcs/daft.sql._sql_funcs.cos", "doc_gen/sql_funcs/daft.sql._sql_funcs.cot", "doc_gen/sql_funcs/daft.sql._sql_funcs.count", "doc_gen/sql_funcs/daft.sql._sql_funcs.count_distinct", "doc_gen/sql_funcs/daft.sql._sql_funcs.count_matches", "doc_gen/sql_funcs/daft.sql._sql_funcs.date", "doc_gen/sql_funcs/daft.sql._sql_funcs.day", "doc_gen/sql_funcs/daft.sql._sql_funcs.dayofweek", "doc_gen/sql_funcs/daft.sql._sql_funcs.degrees", "doc_gen/sql_funcs/daft.sql._sql_funcs.ends_with", "doc_gen/sql_funcs/daft.sql._sql_funcs.exp", "doc_gen/sql_funcs/daft.sql._sql_funcs.explode", "doc_gen/sql_funcs/daft.sql._sql_funcs.fill_nan", "doc_gen/sql_funcs/daft.sql._sql_funcs.find", "doc_gen/sql_funcs/daft.sql._sql_funcs.floor", "doc_gen/sql_funcs/daft.sql._sql_funcs.hash", "doc_gen/sql_funcs/daft.sql._sql_funcs.hour", "doc_gen/sql_funcs/daft.sql._sql_funcs.image_crop", "doc_gen/sql_funcs/daft.sql._sql_funcs.image_decode", "doc_gen/sql_funcs/daft.sql._sql_funcs.image_encode", "doc_gen/sql_funcs/daft.sql._sql_funcs.image_resize", "doc_gen/sql_funcs/daft.sql._sql_funcs.image_to_mode", "doc_gen/sql_funcs/daft.sql._sql_funcs.is_inf", "doc_gen/sql_funcs/daft.sql._sql_funcs.is_nan", "doc_gen/sql_funcs/daft.sql._sql_funcs.json_query", "doc_gen/sql_funcs/daft.sql._sql_funcs.left", "doc_gen/sql_funcs/daft.sql._sql_funcs.length", "doc_gen/sql_funcs/daft.sql._sql_funcs.length_bytes", "doc_gen/sql_funcs/daft.sql._sql_funcs.list_chunk", "doc_gen/sql_funcs/daft.sql._sql_funcs.list_count", "doc_gen/sql_funcs/daft.sql._sql_funcs.list_join", "doc_gen/sql_funcs/daft.sql._sql_funcs.list_max", "doc_gen/sql_funcs/daft.sql._sql_funcs.list_mean", "doc_gen/sql_funcs/daft.sql._sql_funcs.list_min", "doc_gen/sql_funcs/daft.sql._sql_funcs.list_slice", "doc_gen/sql_funcs/daft.sql._sql_funcs.list_sort", "doc_gen/sql_funcs/daft.sql._sql_funcs.list_sum", "doc_gen/sql_funcs/daft.sql._sql_funcs.ln", "doc_gen/sql_funcs/daft.sql._sql_funcs.log", "doc_gen/sql_funcs/daft.sql._sql_funcs.log10", "doc_gen/sql_funcs/daft.sql._sql_funcs.log2", "doc_gen/sql_funcs/daft.sql._sql_funcs.lower", "doc_gen/sql_funcs/daft.sql._sql_funcs.lpad", "doc_gen/sql_funcs/daft.sql._sql_funcs.lstrip", "doc_gen/sql_funcs/daft.sql._sql_funcs.map_extract", "doc_gen/sql_funcs/daft.sql._sql_funcs.map_get", "doc_gen/sql_funcs/daft.sql._sql_funcs.max", "doc_gen/sql_funcs/daft.sql._sql_funcs.mean", "doc_gen/sql_funcs/daft.sql._sql_funcs.min", "doc_gen/sql_funcs/daft.sql._sql_funcs.minhash", "doc_gen/sql_funcs/daft.sql._sql_funcs.minute", "doc_gen/sql_funcs/daft.sql._sql_funcs.month", "doc_gen/sql_funcs/daft.sql._sql_funcs.normalize", "doc_gen/sql_funcs/daft.sql._sql_funcs.not_nan", "doc_gen/sql_funcs/daft.sql._sql_funcs.partitioning_days", "doc_gen/sql_funcs/daft.sql._sql_funcs.partitioning_hours", "doc_gen/sql_funcs/daft.sql._sql_funcs.partitioning_iceberg_bucket", "doc_gen/sql_funcs/daft.sql._sql_funcs.partitioning_iceberg_truncate", "doc_gen/sql_funcs/daft.sql._sql_funcs.partitioning_months", "doc_gen/sql_funcs/daft.sql._sql_funcs.partitioning_years", "doc_gen/sql_funcs/daft.sql._sql_funcs.radians", "doc_gen/sql_funcs/daft.sql._sql_funcs.regexp_extract", "doc_gen/sql_funcs/daft.sql._sql_funcs.regexp_extract_all", "doc_gen/sql_funcs/daft.sql._sql_funcs.regexp_match", "doc_gen/sql_funcs/daft.sql._sql_funcs.regexp_replace", "doc_gen/sql_funcs/daft.sql._sql_funcs.regexp_split", "doc_gen/sql_funcs/daft.sql._sql_funcs.repeat", "doc_gen/sql_funcs/daft.sql._sql_funcs.reverse", "doc_gen/sql_funcs/daft.sql._sql_funcs.right", "doc_gen/sql_funcs/daft.sql._sql_funcs.round", "doc_gen/sql_funcs/daft.sql._sql_funcs.rpad", "doc_gen/sql_funcs/daft.sql._sql_funcs.rstrip", "doc_gen/sql_funcs/daft.sql._sql_funcs.second", "doc_gen/sql_funcs/daft.sql._sql_funcs.sign", "doc_gen/sql_funcs/daft.sql._sql_funcs.sin", "doc_gen/sql_funcs/daft.sql._sql_funcs.split", "doc_gen/sql_funcs/daft.sql._sql_funcs.sqrt", "doc_gen/sql_funcs/daft.sql._sql_funcs.starts_with", "doc_gen/sql_funcs/daft.sql._sql_funcs.stddev", "doc_gen/sql_funcs/daft.sql._sql_funcs.stddev_samp", "doc_gen/sql_funcs/daft.sql._sql_funcs.struct_extract", "doc_gen/sql_funcs/daft.sql._sql_funcs.struct_get", "doc_gen/sql_funcs/daft.sql._sql_funcs.sum", "doc_gen/sql_funcs/daft.sql._sql_funcs.tan", "doc_gen/sql_funcs/daft.sql._sql_funcs.time", "doc_gen/sql_funcs/daft.sql._sql_funcs.to_date", "doc_gen/sql_funcs/daft.sql._sql_funcs.to_datetime", "doc_gen/sql_funcs/daft.sql._sql_funcs.tokenize_decode", "doc_gen/sql_funcs/daft.sql._sql_funcs.tokenize_encode", "doc_gen/sql_funcs/daft.sql._sql_funcs.unnest", "doc_gen/sql_funcs/daft.sql._sql_funcs.upper", "doc_gen/sql_funcs/daft.sql._sql_funcs.url_download", "doc_gen/sql_funcs/daft.sql._sql_funcs.url_upload", "doc_gen/sql_funcs/daft.sql._sql_funcs.year", "expressions", "groupby", "index", "misc", "schema", "series", "sql", "udf"], "filenames": ["configs.rst", "creation.rst", "dataframe.rst", "datatype.rst", "doc_gen/configuration_functions/daft.context.set_runner_py.rst", "doc_gen/configuration_functions/daft.context.set_runner_ray.rst", "doc_gen/configuration_functions/daft.execution_config_ctx.rst", "doc_gen/configuration_functions/daft.planning_config_ctx.rst", "doc_gen/configuration_functions/daft.set_execution_config.rst", "doc_gen/configuration_functions/daft.set_planning_config.rst", "doc_gen/dataframe_methods/daft.DataFrame.rst", "doc_gen/dataframe_methods/daft.DataFrame.__getitem__.rst", "doc_gen/dataframe_methods/daft.DataFrame.agg.rst", "doc_gen/dataframe_methods/daft.DataFrame.collect.rst", "doc_gen/dataframe_methods/daft.DataFrame.column_names.rst", "doc_gen/dataframe_methods/daft.DataFrame.concat.rst", "doc_gen/dataframe_methods/daft.DataFrame.count.rst", "doc_gen/dataframe_methods/daft.DataFrame.distinct.rst", "doc_gen/dataframe_methods/daft.DataFrame.exclude.rst", "doc_gen/dataframe_methods/daft.DataFrame.explain.rst", "doc_gen/dataframe_methods/daft.DataFrame.explode.rst", "doc_gen/dataframe_methods/daft.DataFrame.filter.rst", "doc_gen/dataframe_methods/daft.DataFrame.groupby.rst", "doc_gen/dataframe_methods/daft.DataFrame.into_partitions.rst", "doc_gen/dataframe_methods/daft.DataFrame.iter_partitions.rst", "doc_gen/dataframe_methods/daft.DataFrame.iter_rows.rst", "doc_gen/dataframe_methods/daft.DataFrame.join.rst", "doc_gen/dataframe_methods/daft.DataFrame.limit.rst", "doc_gen/dataframe_methods/daft.DataFrame.max.rst", "doc_gen/dataframe_methods/daft.DataFrame.mean.rst", "doc_gen/dataframe_methods/daft.DataFrame.melt.rst", "doc_gen/dataframe_methods/daft.DataFrame.min.rst", "doc_gen/dataframe_methods/daft.DataFrame.pivot.rst", "doc_gen/dataframe_methods/daft.DataFrame.repartition.rst", "doc_gen/dataframe_methods/daft.DataFrame.sample.rst", "doc_gen/dataframe_methods/daft.DataFrame.schema.rst", "doc_gen/dataframe_methods/daft.DataFrame.select.rst", "doc_gen/dataframe_methods/daft.DataFrame.show.rst", "doc_gen/dataframe_methods/daft.DataFrame.sort.rst", "doc_gen/dataframe_methods/daft.DataFrame.stddev.rst", "doc_gen/dataframe_methods/daft.DataFrame.sum.rst", "doc_gen/dataframe_methods/daft.DataFrame.to_arrow.rst", "doc_gen/dataframe_methods/daft.DataFrame.to_dask_dataframe.rst", "doc_gen/dataframe_methods/daft.DataFrame.to_pandas.rst", "doc_gen/dataframe_methods/daft.DataFrame.to_pydict.rst", "doc_gen/dataframe_methods/daft.DataFrame.to_pylist.rst", "doc_gen/dataframe_methods/daft.DataFrame.to_ray_dataset.rst", "doc_gen/dataframe_methods/daft.DataFrame.to_torch_iter_dataset.rst", "doc_gen/dataframe_methods/daft.DataFrame.to_torch_map_dataset.rst", "doc_gen/dataframe_methods/daft.DataFrame.transform.rst", "doc_gen/dataframe_methods/daft.DataFrame.unpivot.rst", "doc_gen/dataframe_methods/daft.DataFrame.where.rst", "doc_gen/dataframe_methods/daft.DataFrame.with_column.rst", "doc_gen/dataframe_methods/daft.DataFrame.with_columns.rst", "doc_gen/dataframe_methods/daft.DataFrame.write_csv.rst", "doc_gen/dataframe_methods/daft.DataFrame.write_deltalake.rst", "doc_gen/dataframe_methods/daft.DataFrame.write_iceberg.rst", "doc_gen/dataframe_methods/daft.DataFrame.write_parquet.rst", "doc_gen/expression_methods/daft.Expression.__abs__.rst", "doc_gen/expression_methods/daft.Expression.__add__.rst", "doc_gen/expression_methods/daft.Expression.__and__.rst", "doc_gen/expression_methods/daft.Expression.__eq__.rst", "doc_gen/expression_methods/daft.Expression.__ge__.rst", "doc_gen/expression_methods/daft.Expression.__gt__.rst", "doc_gen/expression_methods/daft.Expression.__invert__.rst", "doc_gen/expression_methods/daft.Expression.__le__.rst", "doc_gen/expression_methods/daft.Expression.__lshift__.rst", "doc_gen/expression_methods/daft.Expression.__lt__.rst", "doc_gen/expression_methods/daft.Expression.__mod__.rst", "doc_gen/expression_methods/daft.Expression.__mul__.rst", "doc_gen/expression_methods/daft.Expression.__ne__.rst", "doc_gen/expression_methods/daft.Expression.__or__.rst", "doc_gen/expression_methods/daft.Expression.__rshift__.rst", "doc_gen/expression_methods/daft.Expression.__sub__.rst", "doc_gen/expression_methods/daft.Expression.__truediv__.rst", "doc_gen/expression_methods/daft.Expression.agg_concat.rst", "doc_gen/expression_methods/daft.Expression.agg_list.rst", "doc_gen/expression_methods/daft.Expression.alias.rst", "doc_gen/expression_methods/daft.Expression.any_value.rst", "doc_gen/expression_methods/daft.Expression.apply.rst", "doc_gen/expression_methods/daft.Expression.approx_count_distinct.rst", "doc_gen/expression_methods/daft.Expression.approx_percentiles.rst", "doc_gen/expression_methods/daft.Expression.arccos.rst", "doc_gen/expression_methods/daft.Expression.arccosh.rst", "doc_gen/expression_methods/daft.Expression.arcsin.rst", "doc_gen/expression_methods/daft.Expression.arcsinh.rst", "doc_gen/expression_methods/daft.Expression.arctan.rst", "doc_gen/expression_methods/daft.Expression.arctan2.rst", "doc_gen/expression_methods/daft.Expression.arctanh.rst", "doc_gen/expression_methods/daft.Expression.between.rst", "doc_gen/expression_methods/daft.Expression.binary.concat.rst", "doc_gen/expression_methods/daft.Expression.binary.length.rst", "doc_gen/expression_methods/daft.Expression.binary.slice.rst", "doc_gen/expression_methods/daft.Expression.cast.rst", "doc_gen/expression_methods/daft.Expression.cbrt.rst", "doc_gen/expression_methods/daft.Expression.ceil.rst", "doc_gen/expression_methods/daft.Expression.clip.rst", "doc_gen/expression_methods/daft.Expression.cos.rst", "doc_gen/expression_methods/daft.Expression.cot.rst", "doc_gen/expression_methods/daft.Expression.count.rst", "doc_gen/expression_methods/daft.Expression.degrees.rst", "doc_gen/expression_methods/daft.Expression.dt.date.rst", "doc_gen/expression_methods/daft.Expression.dt.day.rst", "doc_gen/expression_methods/daft.Expression.dt.day_of_week.rst", "doc_gen/expression_methods/daft.Expression.dt.hour.rst", "doc_gen/expression_methods/daft.Expression.dt.minute.rst", "doc_gen/expression_methods/daft.Expression.dt.month.rst", "doc_gen/expression_methods/daft.Expression.dt.second.rst", "doc_gen/expression_methods/daft.Expression.dt.time.rst", "doc_gen/expression_methods/daft.Expression.dt.truncate.rst", "doc_gen/expression_methods/daft.Expression.dt.year.rst", "doc_gen/expression_methods/daft.Expression.embedding.cosine_distance.rst", "doc_gen/expression_methods/daft.Expression.eq_null_safe.rst", "doc_gen/expression_methods/daft.Expression.exp.rst", "doc_gen/expression_methods/daft.Expression.fill_null.rst", "doc_gen/expression_methods/daft.Expression.float.fill_nan.rst", "doc_gen/expression_methods/daft.Expression.float.is_inf.rst", "doc_gen/expression_methods/daft.Expression.float.is_nan.rst", "doc_gen/expression_methods/daft.Expression.float.not_nan.rst", "doc_gen/expression_methods/daft.Expression.floor.rst", "doc_gen/expression_methods/daft.Expression.hash.rst", "doc_gen/expression_methods/daft.Expression.if_else.rst", "doc_gen/expression_methods/daft.Expression.image.crop.rst", "doc_gen/expression_methods/daft.Expression.image.decode.rst", "doc_gen/expression_methods/daft.Expression.image.encode.rst", "doc_gen/expression_methods/daft.Expression.image.resize.rst", "doc_gen/expression_methods/daft.Expression.image.to_mode.rst", "doc_gen/expression_methods/daft.Expression.is_in.rst", "doc_gen/expression_methods/daft.Expression.is_null.rst", "doc_gen/expression_methods/daft.Expression.json.query.rst", "doc_gen/expression_methods/daft.Expression.list.chunk.rst", "doc_gen/expression_methods/daft.Expression.list.count.rst", "doc_gen/expression_methods/daft.Expression.list.get.rst", "doc_gen/expression_methods/daft.Expression.list.join.rst", "doc_gen/expression_methods/daft.Expression.list.length.rst", "doc_gen/expression_methods/daft.Expression.list.max.rst", "doc_gen/expression_methods/daft.Expression.list.mean.rst", "doc_gen/expression_methods/daft.Expression.list.min.rst", "doc_gen/expression_methods/daft.Expression.list.slice.rst", "doc_gen/expression_methods/daft.Expression.list.sort.rst", "doc_gen/expression_methods/daft.Expression.list.sum.rst", "doc_gen/expression_methods/daft.Expression.list.value_counts.rst", "doc_gen/expression_methods/daft.Expression.ln.rst", "doc_gen/expression_methods/daft.Expression.log.rst", "doc_gen/expression_methods/daft.Expression.log10.rst", "doc_gen/expression_methods/daft.Expression.log2.rst", "doc_gen/expression_methods/daft.Expression.map.get.rst", "doc_gen/expression_methods/daft.Expression.max.rst", "doc_gen/expression_methods/daft.Expression.mean.rst", "doc_gen/expression_methods/daft.Expression.min.rst", "doc_gen/expression_methods/daft.Expression.minhash.rst", "doc_gen/expression_methods/daft.Expression.not_null.rst", "doc_gen/expression_methods/daft.Expression.partitioning.days.rst", "doc_gen/expression_methods/daft.Expression.partitioning.hours.rst", "doc_gen/expression_methods/daft.Expression.partitioning.iceberg_bucket.rst", "doc_gen/expression_methods/daft.Expression.partitioning.iceberg_truncate.rst", "doc_gen/expression_methods/daft.Expression.partitioning.months.rst", "doc_gen/expression_methods/daft.Expression.partitioning.years.rst", "doc_gen/expression_methods/daft.Expression.radians.rst", "doc_gen/expression_methods/daft.Expression.round.rst", "doc_gen/expression_methods/daft.Expression.shift_left.rst", "doc_gen/expression_methods/daft.Expression.shift_right.rst", "doc_gen/expression_methods/daft.Expression.sign.rst", "doc_gen/expression_methods/daft.Expression.sin.rst", "doc_gen/expression_methods/daft.Expression.sqrt.rst", "doc_gen/expression_methods/daft.Expression.stddev.rst", "doc_gen/expression_methods/daft.Expression.str.capitalize.rst", "doc_gen/expression_methods/daft.Expression.str.concat.rst", "doc_gen/expression_methods/daft.Expression.str.contains.rst", "doc_gen/expression_methods/daft.Expression.str.count_matches.rst", "doc_gen/expression_methods/daft.Expression.str.endswith.rst", "doc_gen/expression_methods/daft.Expression.str.extract.rst", "doc_gen/expression_methods/daft.Expression.str.extract_all.rst", "doc_gen/expression_methods/daft.Expression.str.find.rst", "doc_gen/expression_methods/daft.Expression.str.ilike.rst", "doc_gen/expression_methods/daft.Expression.str.left.rst", "doc_gen/expression_methods/daft.Expression.str.length.rst", "doc_gen/expression_methods/daft.Expression.str.length_bytes.rst", "doc_gen/expression_methods/daft.Expression.str.like.rst", "doc_gen/expression_methods/daft.Expression.str.lower.rst", "doc_gen/expression_methods/daft.Expression.str.lpad.rst", "doc_gen/expression_methods/daft.Expression.str.lstrip.rst", "doc_gen/expression_methods/daft.Expression.str.match.rst", "doc_gen/expression_methods/daft.Expression.str.normalize.rst", "doc_gen/expression_methods/daft.Expression.str.repeat.rst", "doc_gen/expression_methods/daft.Expression.str.replace.rst", "doc_gen/expression_methods/daft.Expression.str.reverse.rst", "doc_gen/expression_methods/daft.Expression.str.right.rst", "doc_gen/expression_methods/daft.Expression.str.rpad.rst", "doc_gen/expression_methods/daft.Expression.str.rstrip.rst", "doc_gen/expression_methods/daft.Expression.str.split.rst", "doc_gen/expression_methods/daft.Expression.str.startswith.rst", "doc_gen/expression_methods/daft.Expression.str.substr.rst", "doc_gen/expression_methods/daft.Expression.str.to_date.rst", "doc_gen/expression_methods/daft.Expression.str.to_datetime.rst", "doc_gen/expression_methods/daft.Expression.str.tokenize_decode.rst", "doc_gen/expression_methods/daft.Expression.str.tokenize_encode.rst", "doc_gen/expression_methods/daft.Expression.str.upper.rst", "doc_gen/expression_methods/daft.Expression.struct.get.rst", "doc_gen/expression_methods/daft.Expression.sum.rst", "doc_gen/expression_methods/daft.Expression.tan.rst", "doc_gen/expression_methods/daft.Expression.url.download.rst", "doc_gen/expression_methods/daft.col.rst", "doc_gen/expression_methods/daft.lit.rst", "doc_gen/expression_methods/daft.to_struct.rst", "doc_gen/io_configs/daft.io.AzureConfig.rst", "doc_gen/io_configs/daft.io.GCSConfig.rst", "doc_gen/io_configs/daft.io.IOConfig.rst", "doc_gen/io_configs/daft.io.S3Config.rst", "doc_gen/io_configs/daft.io.S3Credentials.rst", "doc_gen/io_functions/daft.from_arrow.rst", "doc_gen/io_functions/daft.from_dask_dataframe.rst", "doc_gen/io_functions/daft.from_glob_path.rst", "doc_gen/io_functions/daft.from_pandas.rst", "doc_gen/io_functions/daft.from_pydict.rst", "doc_gen/io_functions/daft.from_pylist.rst", "doc_gen/io_functions/daft.from_ray_dataset.rst", "doc_gen/io_functions/daft.read_csv.rst", "doc_gen/io_functions/daft.read_deltalake.rst", "doc_gen/io_functions/daft.read_hudi.rst", "doc_gen/io_functions/daft.read_iceberg.rst", "doc_gen/io_functions/daft.read_json.rst", "doc_gen/io_functions/daft.read_lance.rst", "doc_gen/io_functions/daft.read_parquet.rst", "doc_gen/io_functions/daft.read_sql.rst", "doc_gen/misc/daft.ImageFormat.rst", "doc_gen/misc/daft.ImageMode.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.AzureConfig.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.GCSConfig.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.HTTPConfig.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.S3Config.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.abs.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.acos.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.acosh.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.array_to_string.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.asin.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.asinh.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.atan.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.atan2.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.atanh.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.avg.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.capitalize.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.ceil.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.clip.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.coalesce.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.concat.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.contains.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.cos.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.cot.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.count.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.count_distinct.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.count_matches.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.date.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.day.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.dayofweek.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.degrees.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.ends_with.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.exp.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.explode.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.fill_nan.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.find.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.floor.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.hash.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.hour.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.image_crop.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.image_decode.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.image_encode.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.image_resize.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.image_to_mode.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.is_inf.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.is_nan.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.json_query.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.left.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.length.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.length_bytes.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.list_chunk.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.list_count.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.list_join.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.list_max.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.list_mean.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.list_min.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.list_slice.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.list_sort.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.list_sum.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.ln.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.log.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.log10.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.log2.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.lower.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.lpad.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.lstrip.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.map_extract.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.map_get.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.max.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.mean.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.min.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.minhash.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.minute.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.month.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.normalize.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.not_nan.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.partitioning_days.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.partitioning_hours.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.partitioning_iceberg_bucket.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.partitioning_iceberg_truncate.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.partitioning_months.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.partitioning_years.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.radians.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.regexp_extract.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.regexp_extract_all.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.regexp_match.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.regexp_replace.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.regexp_split.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.repeat.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.reverse.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.right.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.round.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.rpad.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.rstrip.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.second.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.sign.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.sin.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.split.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.sqrt.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.starts_with.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.stddev.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.stddev_samp.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.struct_extract.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.struct_get.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.sum.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.tan.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.time.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.to_date.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.to_datetime.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.tokenize_decode.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.tokenize_encode.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.unnest.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.upper.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.url_download.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.url_upload.rst", "doc_gen/sql_funcs/daft.sql._sql_funcs.year.rst", "expressions.rst", "groupby.rst", "index.rst", "misc.rst", "schema.rst", "series.rst", "sql.rst", "udf.rst"], "titles": ["Configuration", "Dataframe Creation", "DataFrame", "DataTypes", "daft.context.set_runner_py", "daft.context.set_runner_ray", "daft.execution_config_ctx", "daft.planning_config_ctx", "daft.set_execution_config", "daft.set_planning_config", "daft.DataFrame", "daft.DataFrame.__getitem__", "daft.DataFrame.agg", "daft.DataFrame.collect", "daft.DataFrame.column_names", "daft.DataFrame.concat", "daft.DataFrame.count", "daft.DataFrame.distinct", "daft.DataFrame.exclude", "daft.DataFrame.explain", "daft.DataFrame.explode", "daft.DataFrame.filter", "daft.DataFrame.groupby", "daft.DataFrame.into_partitions", "daft.DataFrame.iter_partitions", "daft.DataFrame.iter_rows", "daft.DataFrame.join", "daft.DataFrame.limit", "daft.DataFrame.max", "daft.DataFrame.mean", "daft.DataFrame.melt", "daft.DataFrame.min", "daft.DataFrame.pivot", "daft.DataFrame.repartition", "daft.DataFrame.sample", "daft.DataFrame.schema", "daft.DataFrame.select", "daft.DataFrame.show", "daft.DataFrame.sort", "daft.DataFrame.stddev", "daft.DataFrame.sum", "daft.DataFrame.to_arrow", "daft.DataFrame.to_dask_dataframe", "daft.DataFrame.to_pandas", "daft.DataFrame.to_pydict", "daft.DataFrame.to_pylist", "daft.DataFrame.to_ray_dataset", "daft.DataFrame.to_torch_iter_dataset", "daft.DataFrame.to_torch_map_dataset", "daft.DataFrame.transform", "daft.DataFrame.unpivot", "daft.DataFrame.where", "daft.DataFrame.with_column", "daft.DataFrame.with_columns", "daft.DataFrame.write_csv", "daft.DataFrame.write_deltalake", "daft.DataFrame.write_iceberg", "daft.DataFrame.write_parquet", "daft.Expression.__abs__", "daft.Expression.__add__", "daft.Expression.__and__", "daft.Expression.__eq__", "daft.Expression.__ge__", "daft.Expression.__gt__", "daft.Expression.__invert__", "daft.Expression.__le__", "daft.Expression.__lshift__", "daft.Expression.__lt__", "daft.Expression.__mod__", "daft.Expression.__mul__", "daft.Expression.__ne__", "daft.Expression.__or__", "daft.Expression.__rshift__", "daft.Expression.__sub__", "daft.Expression.__truediv__", "daft.Expression.agg_concat", "daft.Expression.agg_list", "daft.Expression.alias", "daft.Expression.any_value", "daft.Expression.apply", "daft.Expression.approx_count_distinct", "daft.Expression.approx_percentiles", "daft.Expression.arccos", "daft.Expression.arccosh", "daft.Expression.arcsin", "daft.Expression.arcsinh", "daft.Expression.arctan", "daft.Expression.arctan2", "daft.Expression.arctanh", "daft.Expression.between", "daft.Expression.binary.concat", "daft.Expression.binary.length", "daft.Expression.binary.slice", "daft.Expression.cast", "daft.Expression.cbrt", "daft.Expression.ceil", "daft.Expression.clip", "daft.Expression.cos", "daft.Expression.cot", "daft.Expression.count", "daft.Expression.degrees", "daft.Expression.dt.date", "daft.Expression.dt.day", "daft.Expression.dt.day_of_week", "daft.Expression.dt.hour", "daft.Expression.dt.minute", "daft.Expression.dt.month", "daft.Expression.dt.second", "daft.Expression.dt.time", "daft.Expression.dt.truncate", "daft.Expression.dt.year", "daft.Expression.embedding.cosine_distance", "daft.Expression.eq_null_safe", "daft.Expression.exp", "daft.Expression.fill_null", "daft.Expression.float.fill_nan", "daft.Expression.float.is_inf", "daft.Expression.float.is_nan", "daft.Expression.float.not_nan", "daft.Expression.floor", "daft.Expression.hash", "daft.Expression.if_else", "daft.Expression.image.crop", "daft.Expression.image.decode", "daft.Expression.image.encode", "daft.Expression.image.resize", "daft.Expression.image.to_mode", "daft.Expression.is_in", "daft.Expression.is_null", "daft.Expression.json.query", "daft.Expression.list.chunk", "daft.Expression.list.count", "daft.Expression.list.get", "daft.Expression.list.join", "daft.Expression.list.length", "daft.Expression.list.max", "daft.Expression.list.mean", "daft.Expression.list.min", "daft.Expression.list.slice", "daft.Expression.list.sort", "daft.Expression.list.sum", "daft.Expression.list.value_counts", "daft.Expression.ln", "daft.Expression.log", "daft.Expression.log10", "daft.Expression.log2", "daft.Expression.map.get", "daft.Expression.max", "daft.Expression.mean", "daft.Expression.min", "daft.Expression.minhash", "daft.Expression.not_null", "daft.Expression.partitioning.days", "daft.Expression.partitioning.hours", "daft.Expression.partitioning.iceberg_bucket", "daft.Expression.partitioning.iceberg_truncate", "daft.Expression.partitioning.months", "daft.Expression.partitioning.years", "daft.Expression.radians", "daft.Expression.round", "daft.Expression.shift_left", "daft.Expression.shift_right", "daft.Expression.sign", "daft.Expression.sin", "daft.Expression.sqrt", "daft.Expression.stddev", "daft.Expression.str.capitalize", "daft.Expression.str.concat", "daft.Expression.str.contains", "daft.Expression.str.count_matches", "daft.Expression.str.endswith", "daft.Expression.str.extract", "daft.Expression.str.extract_all", "daft.Expression.str.find", "daft.Expression.str.ilike", "daft.Expression.str.left", "daft.Expression.str.length", "daft.Expression.str.length_bytes", "daft.Expression.str.like", "daft.Expression.str.lower", "daft.Expression.str.lpad", "daft.Expression.str.lstrip", "daft.Expression.str.match", "daft.Expression.str.normalize", "daft.Expression.str.repeat", "daft.Expression.str.replace", "daft.Expression.str.reverse", "daft.Expression.str.right", "daft.Expression.str.rpad", "daft.Expression.str.rstrip", "daft.Expression.str.split", "daft.Expression.str.startswith", "daft.Expression.str.substr", "daft.Expression.str.to_date", "daft.Expression.str.to_datetime", "daft.Expression.str.tokenize_decode", "daft.Expression.str.tokenize_encode", "daft.Expression.str.upper", "daft.Expression.struct.get", "daft.Expression.sum", "daft.Expression.tan", "daft.Expression.url.download", "daft.col", "daft.lit", "daft.to_struct", "daft.io.AzureConfig", "daft.io.GCSConfig", "daft.io.IOConfig", "daft.io.S3Config", "daft.io.S3Credentials", "daft.from_arrow", "daft.from_dask_dataframe", "daft.from_glob_path", "daft.from_pandas", "daft.from_pydict", "daft.from_pylist", "daft.from_ray_dataset", "daft.read_csv", "daft.read_deltalake", "daft.read_hudi", "daft.read_iceberg", "daft.read_json", "daft.read_lance", "daft.read_parquet", "daft.read_sql", "daft.ImageFormat", "daft.ImageMode", "AzureConfig", "GCSConfig", "HTTPConfig", "S3Config", "abs", "acos", "acosh", "array_to_string", "asin", "asinh", "atan", "atan2", "atanh", "avg", "capitalize", "ceil", "clip", "coalesce", "concat", "contains", "cos", "cot", "count", "count_distinct", "count_matches", "date", "day", "dayofweek", "degrees", "ends_with", "exp", "explode", "fill_nan", "find", "floor", "hash", "hour", "image_crop", "image_decode", "image_encode", "image_resize", "image_to_mode", "is_inf", "is_nan", "json_query", "left", "length", "length_bytes", "list_chunk", "list_count", "list_join", "list_max", "list_mean", "list_min", "list_slice", "list_sort", "list_sum", "ln", "log", "log10", "log2", "lower", "lpad", "lstrip", "map_extract", "map_get", "max", "mean", "min", "minhash", "minute", "month", "normalize", "not_nan", "partitioning_days", "partitioning_hours", "partitioning_iceberg_bucket", "partitioning_iceberg_truncate", "partitioning_months", "partitioning_years", "radians", "regexp_extract", "regexp_extract_all", "regexp_match", "regexp_replace", "regexp_split", "repeat", "reverse", "right", "round", "rpad", "rstrip", "second", "sign", "sin", "split", "sqrt", "starts_with", "stddev", "stddev_samp", "struct_extract", "struct_get", "sum", "tan", "time", "to_date", "to_datetime", "tokenize_decode", "tokenize_encode", "unnest", "upper", "url_download", "url_upload", "year", "Expressions", "GroupBy", "API Documentation", "Miscellaneous", "Schema", "Series", "SQL", "User Defined Functions (UDFs)"], "terms": {"control": [0, 8, 9, 24, 25, 139], "execut": [0, 4, 5, 8, 13, 19, 24, 25, 27, 37, 41, 42, 43, 44, 47, 54, 55, 56, 57, 79, 224, 347, 348], "backend": [0, 24], "daft": [0, 3, 341, 342, 343, 345, 346, 347, 348], "run": [0, 2, 8, 24, 25, 42, 46, 56, 79, 150, 201, 211, 212, 216, 218, 223, 342, 346, 347, 348], "call": [0, 2, 5, 8, 9, 10, 13, 16, 37, 41, 43, 44, 54, 55, 56, 57, 342, 347, 348], "function": [0, 5, 16, 26, 32, 33, 42, 46, 49, 79, 120, 141, 150, 167, 208, 211, 216, 218, 220, 222, 224, 240, 294, 341, 342, 346], "onc": [0, 5, 24, 25, 348], "start": [0, 92, 103, 109, 138, 191, 192, 217, 281, 324], "your": [0, 2, 4, 33, 49, 79, 201, 205, 226, 347, 348], "applic": [0, 43, 346], "variou": [0, 8, 9, 342], "wai": [0, 167], "dure": [0, 23, 26, 201], "behavior": [0, 4, 5, 9, 16, 26, 201, 208, 265], "when": [0, 2, 3, 8, 9, 13, 37, 41, 43, 44, 54, 55, 56, 57, 78, 79, 112, 123, 195, 196, 201, 205, 206, 207, 208, 209, 212, 218, 219, 220, 222, 223, 224, 227, 228, 230, 342, 348], "interact": [0, 54, 55, 57, 218], "storag": [0, 8, 54, 55, 56, 57, 195, 196, 201, 205, 206, 207, 218, 219, 220, 227, 228], "e": [0, 3, 8, 9, 16, 64, 93, 109, 113, 116, 117, 118, 123, 143, 205, 223, 224, 257, 268, 346, 348], "g": [0, 3, 8, 9, 93, 109, 123, 205, 206, 207, 222, 223, 224, 268, 348], "credenti": [0, 205, 206, 208, 209, 228], "retri": [0, 206, 208], "polici": 0, "other": [0, 8, 9, 10, 15, 20, 26, 59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 79, 87, 90, 111, 112, 127, 160, 161, 167, 207, 212, 226, 346, 347], "knob": 0, "perform": [0, 8, 12, 16, 18, 22, 26, 28, 29, 31, 32, 39, 40, 48, 72, 80, 112, 161, 342], "resourc": [0, 24, 25, 218, 223], "usag": 0, "These": [0, 2, 8, 9, 167], "ar": [0, 2, 3, 8, 9, 10, 16, 20, 25, 26, 33, 42, 45, 48, 56, 81, 89, 109, 112, 116, 117, 118, 121, 127, 128, 141, 150, 151, 167, 169, 183, 201, 205, 208, 209, 218, 220, 341, 342, 346, 348], "most": [0, 2, 175, 187, 348], "often": [0, 342], "us": [0, 8, 9, 15, 16, 19, 24, 25, 26, 33, 37, 42, 45, 46, 47, 48, 51, 54, 55, 56, 57, 79, 80, 81, 120, 121, 129, 133, 150, 167, 174, 178, 183, 193, 194, 195, 196, 201, 205, 206, 207, 208, 209, 211, 212, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 227, 228, 230, 234, 271, 277, 299, 303, 332, 333, 334, 335, 341, 346, 347], "input": [0, 8, 15, 42, 155, 196, 204, 231, 232, 233, 234, 235, 236, 237, 239, 240, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 261, 262, 263, 265, 269, 270, 271, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 316, 319, 320, 321, 323, 325, 326, 327, 328, 329, 330, 331, 334, 335, 336, 338, 339, 340, 342, 348], "datafram": [0, 3, 4, 5, 8, 9, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 341, 342, 346, 347, 348], "read": [0, 8, 205, 206, 208, 218, 220, 223, 224], "creation": 0, "method": [2, 10, 15, 45, 47, 48, 51, 205, 206, 207, 208, 209, 212, 225, 226, 341, 342], "lazi": [2, 170, 191], "mean": [2, 12, 24, 25, 33, 240, 279, 342], "thei": [2, 8, 45, 48, 169], "do": [2, 47, 48, 55, 348], "comput": [2, 17, 41, 43, 44, 47, 81, 111, 150, 303, 341, 346, 348], "immedi": [2, 201], "invok": [2, 167], "instead": [2, 10, 16, 25, 33, 42, 45, 79, 120, 206, 348], "oper": [2, 3, 9, 16, 32, 33, 42, 54, 55, 56, 57, 79, 116, 117, 118, 167, 218, 220, 224, 347, 348], "enqueu": 2, "": [2, 20, 37, 55, 81, 169, 194, 201, 210, 213, 217, 220, 221, 223, 224, 225, 226, 339, 346], "intern": 2, "queri": [2, 8, 26, 173, 174, 175, 178, 180, 184, 188, 190, 192, 220, 224, 271, 347], "plan": [2, 9, 10, 19, 26], "onli": [2, 5, 16, 17, 19, 27, 42, 43, 46, 79, 123, 169, 195, 196, 208, 209, 211, 216, 226, 346], "block": [2, 13, 37, 41, 43, 44, 48, 54, 55, 56, 57], "them": [2, 3, 75, 217, 221, 223], "where": [2, 3, 10, 20, 21, 26, 33, 81, 121, 122, 141, 208, 215, 218, 219, 220, 347], "code": [2, 348], "i": [2, 3, 4, 5, 8, 9, 10, 13, 16, 18, 19, 23, 24, 25, 26, 32, 33, 34, 37, 41, 42, 43, 44, 45, 46, 47, 51, 54, 55, 56, 57, 61, 62, 63, 65, 67, 70, 79, 80, 81, 93, 96, 112, 116, 117, 118, 121, 122, 131, 132, 133, 134, 135, 136, 137, 138, 150, 166, 167, 169, 171, 172, 173, 175, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 196, 197, 201, 206, 208, 211, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 243, 264, 269, 270, 300, 341, 342, 346, 347, 348], "being": [2, 9, 15, 120], "class": [3, 10, 81, 205, 206, 207, 208, 209, 225, 226, 342, 345, 346, 348], "sourc": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 342, 345, 346, 347, 348], "A": [3, 8, 9, 10, 24, 25, 42, 49, 55, 56, 80, 81, 90, 92, 99, 112, 121, 124, 131, 141, 169, 190, 192, 217, 218, 219, 220, 221, 222, 223, 224, 346, 347, 348], "defin": [3, 26, 224, 342], "type": [3, 4, 5, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 77, 79, 81, 89, 90, 91, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 114, 115, 116, 117, 118, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 146, 151, 152, 153, 154, 155, 156, 157, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 203, 210, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 226, 342, 345, 346, 347, 348], "all": [3, 5, 10, 16, 18, 20, 50, 52, 53, 81, 92, 99, 131, 140, 150, 172, 179, 183, 185, 192, 197, 208, 214, 309, 311, 341, 346], "valu": [3, 8, 9, 16, 20, 24, 25, 30, 32, 47, 48, 50, 75, 76, 78, 79, 80, 81, 89, 93, 96, 99, 112, 114, 115, 116, 117, 118, 120, 121, 127, 128, 130, 131, 132, 135, 136, 137, 138, 140, 141, 146, 147, 148, 149, 151, 165, 168, 170, 171, 174, 178, 182, 191, 199, 201, 203, 206, 208, 214, 224, 231, 244, 259, 262, 278, 279, 280, 283, 291, 292, 293, 295, 342, 348], "an": [3, 4, 5, 8, 9, 11, 24, 25, 26, 32, 38, 42, 48, 51, 52, 55, 56, 61, 62, 63, 65, 66, 67, 70, 72, 90, 91, 93, 96, 122, 123, 124, 125, 130, 132, 138, 139, 140, 160, 161, 172, 173, 176, 177, 185, 195, 196, 201, 202, 203, 204, 206, 208, 209, 220, 224, 230, 247, 248, 255, 264, 265, 266, 267, 268, 281, 303, 307, 312, 321, 322, 330, 341, 342, 346], "express": [3, 9, 11, 12, 16, 20, 21, 22, 26, 28, 29, 30, 31, 32, 33, 36, 38, 39, 40, 50, 51, 52, 53, 54, 57, 202, 203, 204, 240, 249, 250, 252, 253, 254, 259, 262, 263, 269, 270, 271, 293, 294, 295, 297, 298, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 319, 325, 326, 327, 328, 329, 331, 340, 342, 347, 348], "column": [3, 10, 11, 12, 14, 16, 18, 20, 22, 26, 28, 29, 31, 32, 33, 35, 36, 38, 39, 40, 42, 43, 44, 47, 48, 50, 52, 53, 55, 79, 80, 81, 91, 96, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 123, 124, 125, 129, 138, 139, 146, 168, 170, 171, 172, 176, 177, 182, 185, 190, 191, 198, 201, 202, 203, 204, 212, 214, 215, 217, 221, 223, 224, 258, 266, 336, 338, 339, 342, 346], "classmethod": [3, 10, 345, 346], "binari": [3, 93, 123, 124, 201, 226, 265, 266, 339], "creat": [3, 8, 9, 10, 20, 36, 55, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 345, 347], "string": [3, 14, 16, 51, 54, 57, 59, 75, 90, 91, 92, 93, 99, 109, 129, 131, 133, 146, 150, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 201, 206, 218, 234, 241, 245, 246, 256, 260, 271, 272, 273, 274, 277, 288, 289, 290, 299, 310, 311, 312, 313, 314, 315, 317, 318, 322, 324, 332, 333, 334, 335, 337, 338, 346, 347, 348], "byte": [3, 8, 90, 91, 124, 177, 201, 206, 208, 212, 266, 274, 338, 348], "bool": [3, 4, 5, 8, 19, 27, 34, 38, 43, 55, 139, 169, 183, 185, 190, 196, 205, 206, 208, 217, 218, 221, 223, 224, 347], "boolean": [3, 60, 64, 71, 89, 93, 112, 116, 117, 118, 121, 127, 128, 139, 151, 168, 170, 174, 178, 182, 191], "either": [3, 26, 38, 56, 79, 90, 122, 212, 218, 224, 348], "true": [3, 5, 19, 21, 38, 51, 74, 89, 112, 116, 117, 118, 121, 127, 128, 151, 168, 169, 170, 174, 178, 182, 183, 185, 190, 191, 205, 206, 207, 208, 217, 221, 223, 224, 246, 256, 310, 324, 347], "fals": [3, 5, 8, 19, 34, 38, 43, 55, 78, 89, 112, 116, 117, 118, 121, 127, 128, 139, 151, 168, 169, 170, 174, 178, 182, 183, 185, 190, 191, 205, 206, 208, 217, 218, 221, 223, 224], "date": [3, 93, 193, 218, 332], "year": [3, 50, 306], "month": [3, 50, 305], "dai": [3, 103, 104, 109, 301], "decimal128": [3, 93], "precis": [3, 224, 316], "int": [3, 5, 8, 11, 13, 23, 24, 25, 27, 33, 34, 37, 79, 92, 122, 125, 130, 132, 138, 150, 154, 155, 159, 171, 172, 175, 180, 184, 187, 188, 192, 201, 206, 208, 217, 218, 220, 221, 223, 224, 346, 348], "scale": 3, "fix": [3, 93, 130, 224], "decim": [3, 159, 316], "durat": [3, 93, 206, 208], "timeunit": [3, 223], "str": [3, 5, 8, 11, 14, 16, 18, 19, 20, 21, 22, 25, 26, 28, 29, 30, 31, 32, 33, 36, 38, 39, 40, 42, 44, 45, 50, 51, 52, 53, 54, 55, 56, 57, 77, 79, 109, 123, 124, 126, 129, 133, 198, 202, 204, 205, 206, 208, 209, 212, 214, 215, 217, 218, 219, 221, 222, 223, 224, 341, 342, 346, 347, 348], "embed": [3, 93], "dtype": [3, 42, 93], "size": [3, 8, 23, 93, 130, 212, 224, 275, 346, 348], "arrai": [3, 146, 214, 312, 322, 346, 348], "each": [3, 8, 10, 16, 19, 20, 24, 25, 35, 38, 44, 47, 48, 54, 55, 57, 79, 91, 92, 122, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 150, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 182, 184, 187, 188, 190, 191, 195, 196, 201, 212, 214, 215, 223, 334, 335, 338, 342, 346, 348], "element": [3, 8, 20, 122, 131, 132, 133, 138, 141, 234, 240, 249, 250, 276, 277, 282, 293, 294, 295, 325, 326, 329, 348], "ha": [3, 10, 15, 17, 217, 240, 294, 346, 348], "numer": [3, 58, 59, 68, 69, 73, 74, 81, 82, 83, 84, 85, 86, 88, 94, 95, 97, 98, 100, 113, 119, 142, 143, 144, 145, 158, 159, 162, 163, 164, 200, 346], "length": [3, 81, 92, 122, 131, 177, 180, 188, 192, 214, 272, 274, 289, 315, 317, 346], "paramet": [3, 5, 8, 9, 10, 12, 13, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 36, 37, 38, 39, 40, 42, 43, 49, 50, 51, 52, 53, 54, 55, 56, 57, 66, 72, 77, 78, 79, 81, 90, 92, 96, 99, 109, 112, 120, 121, 122, 123, 124, 125, 129, 130, 131, 132, 133, 138, 139, 143, 146, 150, 154, 155, 159, 160, 161, 167, 168, 169, 170, 171, 172, 182, 183, 185, 190, 191, 195, 196, 198, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 342, 345, 346, 347, 348], "list": [3, 12, 14, 20, 26, 32, 38, 44, 45, 54, 55, 57, 76, 81, 93, 122, 127, 129, 150, 169, 172, 190, 195, 196, 210, 213, 214, 215, 217, 221, 223, 224, 234, 244, 258, 275, 276, 277, 278, 279, 280, 281, 282, 283, 334, 335, 336, 342, 346, 347, 348], "must": [3, 15, 20, 109, 130, 180, 188, 193, 194, 205, 211, 214, 218, 224], "fixed_size_binari": 3, "fixedsizebinari": 3, "fixed_size_list": 3, "fixedsizelist": [3, 81], "float32": 3, "32": [3, 150, 154, 196, 201, 226, 346], "bit": [3, 66, 72, 93, 150, 154, 160, 161, 196, 226, 346], "float": [3, 8, 34, 81, 93, 122, 128, 143, 151, 226, 346, 348], "float64": [3, 12, 20, 39, 81, 115, 135, 136, 137, 240, 294, 325, 326, 342, 348], "64": 3, "from_arrow_typ": 3, "arrow_typ": 3, "map": [3, 48, 55, 93, 141, 224, 291, 292], "pyarrow": [3, 41, 43, 146, 210, 214, 345, 346], "from_numpy_dtyp": 3, "np_type": 3, "np": [3, 214], "numpi": [3, 214, 346], "imag": [3, 93, 212, 225, 226, 264, 265, 266, 267, 268], "mode": [3, 54, 55, 56, 57, 99, 123, 126, 131, 205, 206, 208, 226, 265, 268, 276], "imagemod": [3, 123, 126], "none": [3, 4, 5, 8, 9, 10, 16, 19, 24, 25, 26, 32, 33, 34, 37, 42, 54, 55, 56, 57, 80, 81, 92, 93, 96, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 114, 116, 117, 118, 120, 123, 128, 132, 138, 139, 146, 151, 192, 193, 194, 195, 196, 201, 205, 206, 207, 208, 209, 212, 217, 218, 219, 220, 221, 222, 223, 224, 243, 347, 348], "height": [3, 122, 125, 264, 267], "width": [3, 122, 125, 155, 264, 267, 304], "contain": [3, 20, 44, 55, 90, 123, 190, 212, 224, 347], "channel": 3, "ndarrai": [3, 214, 346, 348], "pixel": 3, "which": [3, 5, 8, 9, 19, 32, 33, 35, 38, 46, 48, 56, 81, 122, 124, 131, 133, 134, 166, 167, 175, 179, 180, 181, 183, 184, 186, 187, 188, 189, 190, 193, 194, 197, 201, 205, 206, 208, 218, 220, 222, 223, 224, 342, 347, 348], "describ": [3, 10], "uint8": 3, "number": [3, 8, 10, 13, 15, 20, 23, 24, 25, 33, 37, 66, 72, 80, 99, 117, 118, 131, 141, 150, 152, 153, 154, 156, 157, 159, 160, 161, 169, 201, 206, 208, 212, 217, 218, 223, 224, 231, 232, 233, 235, 236, 237, 239, 242, 243, 249, 250, 251, 257, 261, 270, 272, 276, 284, 285, 286, 287, 300, 301, 302, 303, 305, 306, 313, 315, 316, 320, 323, 346, 348], "band": 3, "logic": [3, 19, 26, 60, 71, 72, 161], "interpret": [3, 4], "rgb": [3, 226, 268], "If": [3, 5, 8, 16, 20, 25, 26, 33, 37, 41, 43, 44, 48, 50, 55, 56, 81, 92, 96, 109, 135, 136, 137, 138, 169, 171, 172, 173, 180, 188, 192, 194, 196, 201, 205, 208, 217, 218, 220, 224, 226, 243, 346, 348], "same": [3, 5, 10, 15, 20, 155, 342], "specifi": [3, 16, 20, 38, 50, 55, 93, 109, 132, 133, 171, 172, 180, 188, 192, 193, 194, 218, 219, 220, 222, 224, 234, 243, 246, 256, 259, 264, 265, 266, 267, 268, 272, 275, 277, 289, 303, 304, 308, 309, 310, 312, 313, 315, 316, 317, 322, 324, 332, 333, 348], "construct": [3, 9, 10, 346], "thi": [3, 4, 5, 8, 10, 12, 13, 14, 16, 18, 19, 23, 24, 25, 26, 32, 33, 37, 38, 41, 42, 43, 44, 45, 46, 47, 48, 51, 54, 55, 56, 57, 72, 79, 81, 116, 117, 118, 123, 129, 138, 141, 161, 167, 169, 172, 196, 205, 206, 208, 211, 212, 216, 217, 218, 220, 221, 222, 223, 224, 240, 294, 341, 342, 346, 347, 348], "advis": 3, "sinc": [3, 38, 152, 153, 156, 157, 206, 301, 302, 305, 306], "allow": [3, 12, 24, 25, 27, 49, 55, 212, 217, 221, 223, 341, 342, 346, 347, 348], "more": [3, 5, 8, 24, 25, 32, 43, 154, 183, 217, 224, 299, 346, 347, 348], "optim": [3, 19, 26], "physic": [3, 19], "represent": [3, 346], "mai": [3, 15, 32, 47, 48, 51, 123, 196, 201, 205, 206, 222, 342], "vari": [3, 34], "across": [3, 20, 214], "leav": [3, 224], "field": [3, 198, 204, 327, 328], "unspecifi": 3, "caus": 3, "repres": [3, 81, 92, 99, 109, 122, 124, 125, 129, 131, 138, 141, 192, 202, 203, 346, 347], "heterogen": 3, "collect": [3, 8, 20, 41, 43, 44, 51, 79, 89, 103, 106, 109, 110, 114, 116, 117, 118, 121, 127, 128, 129, 141, 151, 167, 170, 171, 172, 182, 185, 190, 191], "can": [3, 4, 5, 8, 26, 38, 42, 46, 51, 56, 81, 90, 123, 185, 201, 206, 211, 216, 218, 220, 223, 224, 226, 265, 341, 342, 346, 347, 348], "have": [3, 5, 8, 15, 24, 25, 26, 38, 41, 43, 44, 79, 211, 212, 214, 346, 348], "differ": [3, 49, 196], "much": [3, 24, 25], "flexibl": 3, "result": [3, 8, 12, 13, 15, 24, 25, 27, 41, 43, 44, 47, 48, 81, 129, 135, 136, 137, 196, 224, 342, 346, 347, 348], "less": [3, 8, 65, 67, 217], "compact": 3, "make": [3, 8, 206, 208], "some": [3, 16, 18, 24, 25, 42, 194, 196, 205, 206, 207, 208, 209, 218, 219, 341, 347], "effici": [3, 32], "The": [3, 8, 15, 19, 23, 24, 25, 26, 42, 44, 47, 54, 55, 56, 57, 66, 72, 82, 83, 84, 85, 86, 88, 90, 92, 93, 94, 95, 97, 98, 100, 109, 112, 113, 119, 124, 138, 142, 143, 144, 145, 150, 158, 159, 160, 161, 162, 163, 164, 171, 172, 173, 180, 185, 188, 190, 193, 194, 195, 196, 200, 201, 211, 212, 216, 224, 264, 341, 342, 346, 348], "By": [3, 42, 218], "default": [3, 4, 5, 8, 9, 13, 19, 24, 25, 26, 34, 37, 38, 42, 43, 50, 54, 55, 56, 57, 78, 99, 120, 131, 132, 139, 143, 150, 159, 169, 183, 185, 190, 196, 201, 205, 206, 208, 209, 217, 218, 219, 221, 222, 223, 224, 342, 346, 347, 348], "infer": [3, 42, 217, 221, 223, 224], "from": [3, 8, 11, 12, 15, 16, 18, 22, 24, 25, 26, 34, 36, 41, 42, 43, 44, 45, 50, 79, 92, 102, 103, 104, 105, 106, 107, 110, 112, 121, 132, 138, 141, 168, 170, 171, 172, 175, 181, 182, 187, 189, 190, 191, 192, 195, 196, 198, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 238, 240, 244, 249, 250, 252, 253, 254, 255, 263, 265, 271, 272, 281, 290, 291, 292, 293, 294, 295, 297, 298, 301, 302, 305, 306, 307, 315, 318, 319, 325, 326, 327, 328, 329, 331, 340, 342, 345, 346, 347], "underli": [3, 42, 129], "data": [3, 10, 25, 32, 33, 46, 47, 48, 54, 55, 56, 57, 89, 114, 115, 116, 117, 123, 127, 128, 129, 151, 185, 190, 206, 208, 210, 213, 214, 215, 218, 219, 220, 222, 224, 226, 265, 299, 339, 342, 346, 348], "also": [3, 16, 38, 42, 51, 81, 169, 195, 196, 224, 339, 347, 348], "int16": 3, "16": [3, 49, 226], "integ": [3, 60, 66, 71, 72, 93, 109, 150, 160, 161, 195, 196, 242, 261, 334, 335, 346], "int32": [3, 110, 152, 153, 154, 156, 157, 203], "int64": [3, 17, 18, 20, 22, 24, 26, 27, 32, 34, 36, 38, 49, 50, 51, 52, 53, 77, 79, 93, 114, 121, 139, 146, 173, 202, 203, 204, 210, 213, 214, 215, 240, 249, 250, 293, 294, 295, 325, 326, 329, 342, 347, 348], "int8": 3, "8": [3, 8, 12, 13, 17, 18, 23, 32, 33, 34, 36, 37, 38, 49, 51, 93, 166, 176, 177, 179, 181, 186, 189, 197, 206, 208, 226, 348], "interv": [3, 109], "variabl": [3, 4, 5, 30, 50, 205, 206, 208, 217, 346, 347], "key_typ": 3, "value_typ": 3, "nest": [3, 141, 346], "kei": [3, 25, 26, 141, 146, 205, 208, 209, 214, 215, 291, 292, 342], "pair": 3, "implement": [3, 81], "struct": [3, 93, 204, 327, 328], "two": [3, 15, 26, 59, 60, 68, 69, 71, 73, 74, 90, 111, 112, 121, 167], "null": [3, 16, 20, 78, 80, 81, 93, 96, 99, 112, 114, 116, 117, 118, 120, 123, 128, 131, 135, 136, 137, 140, 151, 171, 201, 217, 240, 244, 249, 250, 293, 294, 295, 325, 326, 329], "alwai": [3, 172], "python": [3, 4, 19, 24, 25, 37, 44, 45, 93, 167, 214, 218, 220, 222, 346, 347, 348], "refer": [3, 202], "arbitrari": [3, 342, 348], "object": [3, 8, 9, 24, 44, 45, 56, 59, 69, 73, 74, 132, 203, 208, 212, 218, 219, 220, 222, 271, 342, 348], "sparse_tensor": 3, "shape": [3, 93], "tupl": [3, 42, 122, 348], "sparsetensor": 3, "coo": 3, "spars": 3, "tensor": [3, 93], "n": [3, 27, 37, 81, 93, 154, 175, 184, 187, 223], "dimension": [3, 346], "provid": [3, 32, 35, 36, 42, 55, 56, 81, 109, 114, 115, 122, 124, 125, 127, 138, 168, 170, 174, 178, 182, 191, 192, 194, 196, 202, 203, 205, 206, 208, 209, 210, 211, 212, 213, 220, 224, 339, 341, 345, 346, 348], "given": [3, 10, 23, 79, 93, 96, 130, 143, 168, 170, 174, 178, 182, 190, 191, 192, 193, 194, 208, 291, 292, 346], "within": [3, 260, 342, 347], "utf8": [3, 20, 22, 24, 26, 32, 50, 79, 81, 129, 141, 146, 166, 167, 170, 171, 172, 175, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 197, 204, 210, 213, 342, 347, 348], "charact": [3, 92, 166, 169, 174, 175, 178, 180, 183, 187, 188, 192, 212, 217, 241, 272, 314, 315], "dict": [3, 25, 42, 44, 45, 47, 48, 53, 55, 214, 215, 217, 221, 223, 224, 348], "name": [3, 14, 16, 18, 22, 26, 32, 42, 47, 48, 50, 52, 53, 54, 55, 57, 77, 195, 196, 198, 202, 204, 205, 208, 215, 217, 221, 223, 224, 327, 328, 342, 346, 347, 348], "child": [3, 346], "exampl": [3, 12, 17, 18, 20, 22, 23, 25, 26, 27, 32, 33, 34, 36, 38, 39, 45, 49, 50, 51, 52, 53, 77, 79, 80, 81, 89, 90, 91, 92, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 114, 115, 116, 117, 118, 121, 127, 128, 129, 139, 141, 146, 151, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 197, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 240, 249, 250, 293, 294, 295, 325, 326, 329, 342, 347, 348], "ag": [3, 22, 342], "time": [3, 5, 27, 93, 109, 141, 169, 184, 206, 208, 209, 218, 251, 301, 302, 305, 306, 313, 348], "support": [3, 26, 38, 47, 51, 55, 129, 195, 196, 208, 212, 217, 222, 224, 225, 226, 339], "u": [3, 208, 223], "timestamp": [3, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 194, 218, 223], "timezon": [3, 194, 209, 218], "uint16": 3, "unsign": [3, 72, 93, 150, 161, 196, 346], "uint32": [3, 102, 103, 104, 105, 106, 107, 110], "uint64": [3, 16, 22, 80, 91, 131, 134, 141, 176, 177, 342], "use_thread_pool": 4, "daftcontext": [4, 5, 8, 9], "set": [4, 5, 6, 7, 8, 9, 24, 25, 55, 56, 195, 196, 203, 205, 206, 217, 218, 220, 223, 224, 346], "runner": [4, 5, 8, 24, 218, 223], "local": [4, 8, 47, 48, 55, 339], "altern": [4, 5, 42, 201], "user": [4, 5, 10, 45, 55, 208, 342, 343], "via": [4, 5, 21, 51, 224], "environ": [4, 5, 37, 205, 206, 208, 209], "daft_runn": [4, 5], "py": 4, "return": [4, 5, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 77, 78, 79, 81, 89, 90, 91, 92, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 114, 115, 116, 117, 118, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 146, 150, 151, 152, 153, 154, 155, 156, 157, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 208, 210, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 246, 256, 260, 266, 272, 273, 274, 278, 280, 310, 312, 315, 320, 322, 324, 342, 345, 346, 347, 348], "after": [4, 5, 8, 79, 217, 221, 223, 224], "address": [5, 208], "noop_if_initi": 5, "max_task_backlog": 5, "force_client_mod": 5, "rai": [5, 8, 24, 42, 46, 211, 216, 218, 223, 238], "cluster": [5, 42, 348], "option": [5, 8, 13, 19, 26, 32, 33, 34, 38, 42, 50, 54, 55, 56, 57, 109, 120, 138, 150, 183, 195, 196, 205, 206, 208, 209, 212, 217, 218, 219, 220, 221, 222, 223, 224, 265, 346, 347, 348], "ray_address": 5, "throw": 5, "error": [5, 51, 55, 81, 123, 201, 265, 346, 348], "multipl": [5, 12, 20, 27, 38, 169, 174, 178, 204, 251, 258, 336], "process": [5, 47, 150, 183], "head": [5, 343], "node": [5, 19], "first": [5, 12, 16, 17, 18, 20, 22, 26, 27, 32, 36, 37, 38, 39, 49, 50, 51, 52, 53, 77, 79, 80, 81, 89, 90, 91, 92, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 114, 115, 116, 117, 118, 121, 127, 128, 129, 139, 141, 146, 151, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 197, 202, 203, 204, 206, 208, 210, 213, 214, 215, 240, 241, 244, 249, 250, 260, 293, 294, 295, 308, 325, 326, 329, 342, 346, 347, 348], "ani": [5, 9, 19, 24, 25, 42, 44, 45, 49, 78, 89, 120, 127, 169, 205, 206, 208, 212, 215, 342, 346, 348], "effect": 5, "subsequ": 5, "than": [5, 8, 19, 62, 63, 65, 67, 130, 180, 188, 205, 208, 217, 224, 346, 348], "per": [5, 24, 25, 38, 79, 201, 206, 208, 342], "kwarg": [6, 7, 8, 9, 24, 25, 49, 201, 348], "context": [6, 7, 342], "manag": [6, 7], "wrap": [6, 7, 93], "set_execution_config": 6, "reset": [6, 7], "config": [6, 7, 8, 9, 217, 221, 223], "its": [6, 7, 20, 150, 204, 346], "origin": [6, 7, 141, 342, 347], "afternward": [6, 7], "set_planning_config": 7, "pydaftexecutionconfig": 8, "scan_tasks_min_size_byt": 8, "scan_tasks_max_size_byt": 8, "broadcast_join_size_bytes_threshold": 8, "parquet_split_row_groups_max_fil": 8, "sort_merge_join_sort_with_aligned_boundari": 8, "hash_join_partition_size_leni": 8, "sample_size_for_sort": 8, "num_preview_row": [8, 13], "parquet_target_files": 8, "parquet_target_row_group_s": 8, "parquet_inflation_factor": 8, "csv_target_files": 8, "csv_inflation_factor": 8, "shuffle_aggregation_default_partit": 8, "partial_aggregation_threshold": 8, "high_cardinality_aggregation_threshold": 8, "read_sql_partition_size_byt": 8, "enable_aq": 8, "enable_native_executor": 8, "default_morsel_s": 8, "shuffle_algorithm": 8, "pre_shuffle_merge_threshold": 8, "enable_ray_trac": 8, "scantask_splitting_level": 8, "global": [8, 9, 16, 28, 29, 31, 33, 38, 39, 40, 80, 81, 347], "configur": [8, 9, 19, 24, 25, 54, 55, 56, 57, 205, 206, 207, 208, 212, 220, 227, 228, 229, 230, 348], "aspect": 8, "write_": 8, "show": [8, 12, 16, 17, 18, 19, 20, 22, 26, 27, 32, 36, 38, 39, 49, 50, 51, 52, 53, 77, 79, 80, 81, 89, 90, 91, 92, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 114, 115, 116, 117, 118, 121, 127, 128, 129, 139, 141, 146, 151, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 197, 202, 203, 204, 210, 213, 214, 215, 218, 219, 220, 222, 240, 249, 250, 293, 294, 295, 325, 326, 329, 342, 347, 348], "befor": [8, 9, 15, 123, 208, 348], "appli": [8, 9, 32, 49, 96, 123, 169, 217, 221, 223, 224, 243, 342, 346, 348], "indic": [8, 9, 89, 112, 116, 117, 118, 127, 128, 132, 138, 151, 168, 170, 174, 178, 182, 191, 348], "old": [8, 9, 348], "current": [8, 9, 18, 24, 25, 26, 36, 41, 42, 43, 44, 45, 46, 47, 48, 52, 53, 55, 121, 195, 196, 208, 209, 218, 223, 226], "should": [8, 9, 16, 19, 28, 29, 31, 39, 40, 42, 45, 169, 190, 208, 348], "minimum": [8, 96, 137, 149, 150, 224, 280, 295, 296, 346], "merg": [8, 55], "scantask": 8, "file": [8, 19, 54, 57, 124, 195, 196, 206, 212, 217, 221, 223, 266, 348], "increas": [8, 24, 25, 201], "singl": [8, 12, 16, 20, 25, 28, 29, 31, 39, 40, 47, 75, 79, 81, 174, 178, 180, 188, 212, 234, 245, 277, 346], "partit": [8, 23, 24, 25, 27, 33, 54, 55, 57, 217, 221, 223, 224], "yield": [8, 140], "lead": [8, 181, 290], "bigger": 8, "fewer": 8, "96": 8, "mib": 8, "maximum": [8, 27, 96, 135, 147, 201, 206, 208, 224, 278, 293], "upper": [8, 89, 96, 243], "bound": [8, 122, 132, 224, 243, 264], "384": 8, "one": [8, 9, 19, 27, 52, 169, 198], "side": [8, 26, 181, 189, 289, 317], "join": [8, 234, 277, 347], "smaller": 8, "threshold": 8, "broadcast": [8, 26], "10": [8, 26, 36, 50, 144, 207, 208, 224, 286, 348], "row": [8, 10, 12, 13, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 34, 36, 37, 38, 39, 40, 45, 47, 48, 49, 50, 51, 52, 53, 56, 77, 79, 80, 81, 89, 90, 91, 92, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 114, 115, 116, 117, 118, 121, 127, 128, 129, 139, 141, 146, 151, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 197, 202, 203, 204, 210, 212, 213, 214, 215, 217, 223, 224, 240, 249, 250, 258, 293, 294, 295, 325, 326, 329, 336, 342, 347, 348], "group": [8, 22, 32, 81, 171, 172, 223, 342], "split": [8, 23, 33, 49, 130, 195, 196, 275, 312], "happen": [8, 341], "whether": [8, 19, 27, 34, 43, 55, 78, 89, 99, 116, 117, 118, 123, 127, 128, 131, 139, 151, 168, 169, 170, 174, 178, 182, 183, 185, 190, 191, 196, 205, 206, 208, 217, 218, 221, 223, 224, 346, 347], "special": [8, 117, 118, 128, 151, 195, 196], "algorithm": [8, 26, 42, 57, 80, 150, 346], "sort": [8, 50, 282], "both": [8, 26], "align": 8, "boundari": 8, "faster": 8, "cost": [8, 208], "skew": 8, "risk": 8, "oom": 8, "left": [8, 26, 66, 160, 180, 181, 243, 289], "hash": [8, 26, 150, 154, 296, 303, 346], "alreadi": [8, 47, 55, 348], "correctli": [8, 348], "right": [8, 26, 72, 161, 180, 188, 189, 243, 317], "isn": [8, 348], "t": [8, 45, 210, 348], "ratio": 8, "between": [8, 111, 112, 121, 224, 238, 348], "least": 8, "repartit": [8, 38], "equal": [8, 15, 61, 62, 65, 70, 112, 214, 224], "0": [8, 12, 20, 34, 39, 43, 79, 81, 87, 92, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 116, 117, 118, 120, 121, 128, 130, 151, 159, 171, 172, 173, 180, 188, 238, 240, 294, 320, 342, 348], "5": [8, 12, 16, 17, 18, 23, 27, 33, 34, 36, 38, 51, 53, 81, 93, 101, 102, 103, 104, 105, 106, 110, 177, 184, 202, 206, 218, 219, 220, 347, 348], "sampl": 8, "20": [8, 26, 49, 50, 342, 348], "preview": [8, 13], "target": [8, 23, 33, 93], "write": [8, 54, 55, 56, 57, 348], "out": [8, 16, 45, 48, 54, 57, 132, 348], "parquet": [8, 54, 57, 223], "512mb": 8, "128mb": 8, "inflat": 8, "factor": 8, "In": [8, 346, 348], "memori": [8, 24, 25, 45, 348], "3": [8, 12, 16, 18, 20, 22, 23, 24, 25, 26, 27, 32, 33, 34, 36, 38, 45, 49, 51, 52, 53, 77, 79, 80, 81, 89, 91, 92, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 114, 115, 117, 118, 121, 127, 128, 129, 139, 146, 151, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 202, 203, 204, 210, 213, 224, 240, 249, 250, 293, 294, 295, 325, 326, 329, 342, 347, 348], "csv": [8, 54, 217], "aggreg": [8, 12, 16, 22, 28, 29, 31, 32, 39, 40, 75, 76, 342], "200": [8, 32, 240, 249, 250, 293, 294, 295, 325, 326, 329], "unless": [8, 218, 224], "partial": 8, "nativ": [8, 217, 221, 223, 348], "10000": 8, "select": [8, 15, 16, 18, 49, 52, 53, 77, 78, 89, 90, 91, 92, 93, 114, 116, 117, 118, 127, 128, 139, 151, 166, 167, 168, 173, 174, 175, 176, 177, 178, 179, 180, 181, 184, 186, 187, 188, 189, 192, 197, 202, 204, 224, 240, 249, 250, 293, 294, 295, 325, 326, 329, 347, 348], "high": [8, 201], "cardin": 8, "sql": [8, 16, 21, 26, 27, 36, 51, 174, 178, 224, 240, 249, 250, 293, 294, 295, 325, 326, 329], "databas": [8, 224], "enabl": [8, 196, 348], "adapt": [8, 208], "executor": [8, 129], "morsel": 8, "new": [8, 16, 36, 52, 53, 54, 55, 56, 57, 77, 79, 81, 92, 93, 121, 311, 342, 348], "131072": 8, "shuffl": [8, 33], "map_reduc": 8, "pre_shuffle_merg": 8, "pre": [8, 150], "1gb": 8, "trace": 8, "access": [8, 48, 56, 195, 196, 201, 205, 206, 207, 208, 209, 218, 219, 220, 222, 227, 228, 230, 348], "tmp": 8, "session_latest": 8, "log": [8, 123, 142, 144, 145, 201, 346], "complet": [8, 48], "how": [8, 19, 24, 25, 26, 54, 55, 57, 348], "aggress": 8, "scan": [8, 224], "task": 8, "2": [8, 12, 16, 17, 18, 20, 22, 23, 24, 25, 26, 27, 32, 33, 34, 36, 38, 39, 43, 45, 49, 51, 52, 53, 77, 79, 80, 81, 87, 89, 93, 101, 102, 103, 104, 105, 107, 109, 114, 115, 121, 127, 129, 139, 141, 143, 145, 146, 190, 192, 202, 203, 204, 210, 213, 214, 215, 249, 250, 287, 342, 347, 348], "might": 8, "expens": [8, 33, 38], "even": 8, "1": [8, 12, 16, 17, 18, 20, 22, 23, 24, 25, 26, 27, 32, 33, 34, 36, 38, 39, 45, 49, 51, 52, 53, 77, 79, 80, 81, 89, 92, 93, 101, 102, 104, 105, 107, 108, 109, 114, 115, 117, 118, 121, 127, 128, 129, 139, 146, 150, 151, 171, 172, 173, 190, 202, 203, 204, 208, 209, 210, 213, 214, 215, 240, 249, 250, 293, 294, 295, 320, 325, 326, 329, 342, 346, 347, 348], "pydaftplanningconfig": 9, "default_io_config": 9, "ioconfig": [9, 54, 55, 56, 57, 195, 196, 201, 205, 206, 208, 209, 212, 217, 218, 219, 220, 221, 222, 223], "build": [9, 224], "exist": [9, 55, 56, 171, 172], "absenc": 9, "explicitli": [9, 347], "pass": [9, 26, 33, 36, 49, 139, 201, 218], "url": [9, 205, 207, 208, 222, 224, 338], "download": [9, 32, 195, 196, 217, 221, 223, 338], "read_parquet": [9, 205, 206, 207, 208, 209], "builder": 10, "logicalplanbuild": 10, "tabl": [10, 24, 41, 43, 54, 55, 56, 57, 146, 210, 218, 219, 220, 222, 347], "It": 10, "item": [10, 11, 20, 47, 48, 214], "__init__": [10, 205, 206, 207, 208, 209, 225, 226, 348], "accord": [10, 183], "logicalplan": 10, "expect": [10, 55], "step": [10, 195, 196], "requir": [10, 38, 45, 154, 205, 208, 209, 218, 220, 222, 348], "arriv": 10, "attribut": [10, 205, 206, 207, 208, 209, 225, 226, 341], "union": [11, 12, 16, 20, 21, 22, 24, 25, 26, 28, 29, 30, 31, 32, 33, 36, 38, 39, 40, 42, 50, 51, 54, 55, 57, 79, 93, 99, 131, 210, 213, 214, 217, 218, 221, 223, 224, 342, 348], "slice": [11, 346], "iter": [11, 12, 22, 24, 25, 30, 32, 40, 42, 45, 50, 210, 342], "get": [11, 48, 134, 138, 175, 187, 201, 231, 342, 346], "df": [11, 12, 15, 16, 17, 18, 20, 22, 23, 24, 25, 27, 32, 33, 34, 36, 38, 39, 45, 49, 50, 51, 52, 53, 77, 79, 80, 81, 89, 90, 91, 92, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 114, 115, 116, 117, 118, 121, 127, 128, 129, 139, 141, 146, 151, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 197, 202, 203, 204, 210, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 342, 347, 348], "mycol": 11, "to_agg": [12, 342], "mix": [12, 342], "Will": 12, "entir": [12, 13, 25, 26, 48, 171, 172], "For": [12, 42, 47, 48, 72, 79, 81, 141, 150, 161, 169, 224, 342, 343, 346, 348], "full": [12, 45, 48, 129, 342, 347], "see": [12, 20, 25, 43, 129, 154, 193, 194, 202, 224, 342], "import": [12, 16, 17, 18, 20, 22, 23, 24, 25, 26, 27, 32, 33, 34, 36, 38, 39, 45, 49, 50, 51, 52, 53, 77, 79, 80, 81, 89, 90, 91, 92, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 114, 115, 116, 117, 118, 121, 127, 128, 129, 139, 141, 146, 151, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 197, 202, 203, 204, 209, 210, 213, 214, 215, 220, 342, 347, 348], "col": [12, 16, 20, 22, 26, 28, 29, 31, 36, 38, 39, 40, 45, 49, 51, 52, 77, 93, 129, 167, 204, 342], "from_pydict": [12, 16, 17, 18, 20, 22, 23, 24, 25, 26, 27, 32, 33, 34, 36, 38, 39, 45, 49, 50, 51, 52, 53, 77, 79, 80, 81, 89, 90, 91, 92, 93, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 114, 115, 116, 117, 118, 121, 127, 128, 129, 139, 141, 151, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 197, 202, 203, 204, 342, 347, 348], "student_id": 12, "4": [12, 16, 17, 18, 22, 23, 27, 32, 33, 34, 36, 38, 45, 49, 51, 52, 53, 81, 89, 90, 103, 106, 110, 116, 121, 122, 139, 172, 175, 187, 192, 202, 204, 342, 347, 348], "test1": 12, "6": [12, 18, 23, 27, 33, 34, 36, 38, 50, 51, 53, 101, 102, 103, 104, 105, 106, 139, 172, 173, 180, 188, 202, 204, 347], "7": [12, 17, 18, 23, 27, 33, 34, 36, 38, 51, 101, 102, 103, 104, 105, 106, 110, 139, 171, 172, 347, 348], "test2": 12, "9": [12, 18, 23, 32, 33, 34, 36, 38, 51, 347], "agg_df": 12, "min": [12, 22, 96, 224, 243, 342], "alia": [12, 21, 22, 30, 80, 81, 342], "total_min": 12, "max": [12, 22, 96, 224, 243, 342], "total_max": 12, "55": 12, "8500000000000001": 12, "6000000000000001": 12, "85": 12, "materi": [13, 45, 48], "properti": 14, "concaten": [15, 59, 75, 90, 167, 245, 342, 348], "togeth": [15, 167, 347], "vertic": 15, "sum": [15, 32, 283, 342], "exactli": 15, "schema": [15, 42, 55, 217, 218, 219, 220, 221, 222, 223, 224], "you": [15, 16, 25, 26, 32, 33, 38, 47, 48, 51, 201, 205, 206, 222, 224, 265, 341, 342, 347, 348], "wish": [15, 32, 33, 201, 210, 213, 346], "expr": [15, 52, 160, 161, 341, 347], "cast": 15, "ensur": [15, 222], "compat": [15, 129, 208, 209, 230], "self": [15, 26, 113, 166, 167, 175, 179, 180, 181, 184, 186, 187, 188, 189, 197, 346, 348], "top": [15, 79], "bottom": 15, "case": [16, 26, 79, 169, 174, 178, 196, 208, 347, 348], "liter": [16, 24, 25, 26, 54, 55, 57, 90, 99, 123, 131, 150, 168, 170, 185, 190, 191, 201, 346], "veri": [16, 33, 201], "similarli": 16, "foo": [16, 24, 25, 53, 91, 166, 167, 168, 176, 179, 181, 182, 185, 186, 189, 197, 210, 213, 214, 215, 218, 219, 220, 347, 348], "bar": [16, 24, 25, 53, 91, 166, 167, 168, 176, 179, 181, 182, 185, 186, 189, 197, 210, 213, 347], "baz": [16, 91, 166, 167, 168, 176, 177, 179, 181, 182, 185, 186, 189, 197, 210, 213, 347], "equival": [16, 18, 52, 53, 167], "howev": 16, "would": [16, 169], "chang": [16, 26, 33, 347], "non": [16, 26, 80, 99, 112, 120, 131, 135, 136, 137, 240, 244, 249, 250, 293, 294, 295, 325, 326, 329], "similar": [16, 21, 26, 27, 36, 51], "command": 16, "expand": [16, 258, 336], "uniqu": [17, 32, 38, 80, 141], "drop": [17, 18], "duplic": [17, 20, 26], "x": [17, 18, 20, 23, 26, 27, 33, 34, 36, 38, 49, 51, 52, 53, 77, 79, 87, 91, 92, 101, 102, 104, 105, 107, 108, 118, 122, 128, 141, 151, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 191, 192, 193, 194, 197, 202, 203, 238, 240, 249, 250, 257, 264, 293, 294, 295, 325, 326, 329, 346, 347, 348], "y": [17, 18, 20, 23, 26, 33, 34, 36, 38, 51, 53, 77, 87, 93, 122, 167, 193, 194, 202, 203, 238, 264, 346, 347, 348], "z": [17, 18, 20, 23, 26, 33, 34, 36, 51, 194, 348], "unique_df": 17, "ones": [18, 53], "df_without_x": 18, "show_al": 19, "format": [19, 47, 48, 50, 53, 109, 124, 193, 194, 195, 196, 218, 225, 266, 332, 333], "ascii": [19, 169, 183], "simpl": [19, 347], "iobas": 19, "print": [19, 24, 25, 37, 45, 347], "produc": [19, 47, 120, 141, 348], "unoptim": 19, "addit": [19, 201, 342], "mermaid": 19, "op": 19, "rather": [19, 205, 208, 224], "detail": [19, 154, 155, 202, 348], "io": [19, 129, 170, 191, 212, 218, 223], "locat": [19, 339], "output": [19, 34, 240, 249, 250, 293, 294, 295, 325, 326, 329, 348], "sy": 19, "stdout": 19, "everi": [20, 133, 203, 348], "becom": 20, "own": 20, "empti": [20, 42, 90, 92, 140, 172, 208], "entri": 20, "below": [20, 348], "b": [20, 24, 25, 26, 45, 81, 90, 91, 92, 121, 141, 146, 154, 167, 190, 204, 210, 213, 342, 347], "c": [20, 24, 25, 81, 141, 167, 190, 204, 347, 348], "columninputtyp": [20, 26, 38, 54, 57], "predic": [21, 51], "keep": [21, 47, 50, 51], "evalu": [21, 51], "group_bi": [22, 32, 342], "groupeddatafram": [22, 341, 342], "pet": [22, 342], "cat": [22, 342], "dog": [22, 342], "alex": [22, 342], "jordan": [22, 342], "sam": [22, 342], "rilei": [22, 342], "grouped_df": [22, 342], "agg": [22, 80, 81, 341, 342], "min_ag": [22, 342], "max_ag": [22, 342], "count": [22, 141, 169, 250, 251, 276, 313, 342], "any_valu": [22, 112, 342], "num": [23, 27, 33], "coalesc": [23, 33], "order": [23, 37, 38, 42, 139, 282, 314], "preserv": [23, 49], "naiv": [23, 37], "greedili": 23, "round": [23, 242, 261], "robin": 23, "fashion": 23, "hit": 23, "taken": 23, "account": [23, 205], "df_with_5_partit": 23, "num_partit": [23, 33, 224], "results_buffer_s": [24, 25], "num_cpu": [24, 25, 348], "micropartit": 24, "objectref": 24, "begin": [24, 47], "over": [24, 25, 45, 150, 205, 208, 296, 346, 348], "quick": [24, 25], "note": [24, 25, 42, 51, 171, 172, 196, 201, 224, 348], "asynchron": [24, 25], "parallel": [24, 25, 201], "mani": [24, 25, 42, 348], "buffer": [24, 25, 346], "while": [24, 25, 49], "fill": [24, 25, 114, 115, 259], "work": [24, 25, 42, 46, 49, 141, 211, 216], "until": [24, 25, 289, 317], "consum": [24, 25], "cpu": [24, 25, 348], "higher": [24, 25, 201], "throughput": [24, 25, 27, 201], "decreas": [24, 25], "lower": [24, 25, 45, 89, 96, 201, 243], "deem": [24, 25], "appropri": [24, 25, 33, 348], "total": [24, 25, 346, 348], "avail": [24, 25, 42, 341], "machin": [24, 25, 201, 348], "into_partit": [24, 33], "part": 24, "tablest": 24, "load": [24, 47, 195, 196, 201, 208], "statist": [24, 342], "miss": [24, 128, 151], "dictionari": [25, 44, 53, 214, 215], "form": 25, "look": 25, "iter_partit": 25, "left_on": 26, "right_on": 26, "inner": [26, 139, 348], "outer": 26, "anti": 26, "semi": 26, "cross": 26, "strategi": [26, 224], "sort_merg": 26, "prefix": [26, 191], "suffix": [26, 170], "wise": 26, "prepend": 26, "conflict": 26, "append": [26, 54, 55, 56, 57, 217], "although": 26, "we": [26, 81, 210, 213, 346, 348], "recomput": 26, "tree": 26, "cach": 26, "roadmap": 26, "df1": [26, 347], "w": [26, 125, 155], "df2": [26, 347], "30": [26, 50, 194, 206, 208, 342], "40": [26, 50], "joined_df": 26, "right_": 26, "right_b": 26, "_right": 26, "b_right": 26, "match": [26, 42, 55, 169, 170, 171, 172, 174, 178, 185, 191, 212, 308, 309, 310], "what": [26, 123, 224], "choos": [26, 121, 346], "automat": [26, 196, 347], "add": [26, 52, 53, 54, 55, 57, 59, 348], "collis": 26, "rais": [26, 51, 55, 123, 201, 346], "valueerror": 26, "df_limit": 27, "eager": 27, "maxim": 27, "latenc": 27, "eagerli": 27, "id": [30, 32, 50, 205, 206, 208, 209, 220, 224], "variable_nam": [30, 50], "value_nam": [30, 50], "unpivot": 30, "pivot_col": 32, "value_col": 32, "agg_fn": 32, "distinct": [32, 80, 112, 169, 250], "avoid": [32, 33], "without": [32, 205, 206, 208], "determin": [32, 224], "version": [32, 43, 218, 348], "platform": 32, "maco": 32, "window": [32, 205], "100": [32, 240, 249, 250, 293, 294, 295, 325, 326, 329, 342], "150": [32, 240, 294], "250": 32, "300": [32, 329], "manycolumnsinputtyp": [32, 50], "partition_bi": 33, "those": [33, 79, 342], "otherwis": [33, 37, 55, 217, 218, 221, 223, 224], "random": [33, 34, 48], "occur": [33, 55, 56, 201, 346], "potenti": 33, "mere": 33, "obtain": 33, "consid": [33, 169, 208], "favor": 33, "adjac": 33, "repartitioned_df": 33, "fraction": 34, "with_replac": 34, "seed": [34, 120, 150, 262, 296, 346], "sampled_df": 34, "here": [34, 348], "replac": [34, 54, 55, 57, 183, 259, 311, 348], "inform": [35, 43], "about": [35, 348], "enough": 37, "displai": 37, "ipython": 37, "instal": [37, 222], "util": [37, 45, 47, 48], "pretti": 37, "notebook": 37, "repl": 37, "fall": [37, 208, 346], "back": [37, 208, 224, 346, 348], "onto": 37, "desc": [38, 139], "quit": 38, "slow": 38, "multicolumn": 38, "descend": [38, 139, 282], "flag": 38, "sorted_df": 38, "well": 38, "standard": [39, 155, 165, 208, 325, 326, 342], "deviat": [39, 165, 325, 326, 342], "col_a": [39, 49, 342], "816496580927726": [39, 342], "convert": [41, 42, 43, 44, 45, 46, 47, 48, 123, 179, 183, 193, 194, 197, 204, 210, 213, 218, 219, 220, 222, 226, 255, 268, 288, 307, 337, 345, 346, 348], "yet": [41, 43, 44, 47, 51], "meta": 42, "panda": [42, 43, 213, 346], "seri": [42, 150, 348], "dask": [42, 211], "rayrunn": [42, 46, 211, 216], "stream": [42, 45, 47, 48], "metadata": [42, 55, 206, 212], "necessari": [42, 195, 196], "eas": 42, "argument": [42, 49, 226, 348], "suppli": [42, 81, 347], "overrid": [42, 205, 348], "store": [42, 123, 222, 226, 346], "coerce_temporal_nanosecond": 43, "coerc": [43, 223, 348], "tempor": 43, "nanosecond": 43, "13": 43, "conveni": [45, 79], "iter_row": 45, "prefer": [45, 224], "directli": [45, 206], "don": 45, "individu": 45, "dataset": [46, 47, 48, 216], "distribut": [46, 47, 48, 187, 190], "ml": 46, "model": 46, "train": [46, 47, 48], "torch": [47, 48], "iterabledataset": [47, 48], "pytorch": [47, 48], "pydict": [47, 48], "meant": 47, "dataload": 47, "doe": [47, 48, 79, 141, 171, 172, 196], "shard": 47, "hook": 47, "multi": [47, 169], "mind": 47, "multithread": [47, 218, 223], "multiprocess": 47, "under": [47, 341, 348], "hood": 47, "feed": 47, "want": [47, 48, 205, 206, 342, 346, 348], "to_ray_dataset": [47, 48], "style": [48, 129], "need": [48, 341], "better": 48, "soon": 48, "readi": 48, "func": [49, 79], "callabl": [49, 79, 208, 224, 348], "arg": [49, 348], "take": [49, 60, 68, 71], "unit": [49, 109], "syntax": 49, "chain": 49, "def": [49, 79, 169, 224, 342, 348], "add_1": 49, "multiply_x": 49, "12": [49, 108, 194], "posit": [49, 92, 238, 269], "keyword": 49, "wide": 50, "long": 50, "2020": 50, "2021": [50, 101, 102, 104, 105, 107, 108, 109, 193, 194], "2022": [50, 110], "jan": 50, "50": [50, 342], "feb": 50, "60": 50, "inventori": 50, "identifi": [50, 55], "except": 50, "melt": 50, "filter": [51, 129, 218, 220, 224, 347], "sql_expr": [51, 347], "pars": [51, 193, 194, 196, 212, 217, 221, 223, 332, 333, 347], "engin": [51, 174, 175, 178, 180, 184, 187, 188, 192], "AND": [51, 60, 347], "column_nam": 52, "new_df": [52, 53], "root_dir": [54, 57], "path": [54, 55, 57, 195, 196, 205, 206, 207, 208, 209, 212, 217, 221, 223, 346], "write_mod": [54, 57], "overwrit": [54, 55, 56, 57], "partition_col": [54, 55, 57, 224], "io_config": [54, 55, 56, 57, 195, 196, 201, 205, 206, 207, 208, 209, 212, 217, 218, 219, 220, 221, 222, 223, 334, 335, 338, 339], "were": [54, 57], "written": [54, 57], "randomli": [54, 57], "gener": [54, 57, 120, 150, 346], "uuid": [54, 57], "root": [54, 57, 94, 164, 323], "subpartit": [54, 55, 57], "further": [54, 55, 57], "remot": [54, 55, 57, 195, 196, 201, 212, 222], "filenam": [54, 57], "datacatalogt": [55, 218], "deltalak": [55, 218], "deltat": 55, "unitycatalogt": [55, 218], "ignor": [55, 56, 78, 81, 169, 217, 220, 224], "schema_mod": 55, "descript": 55, "custom_metadata": 55, "dynamo_table_nam": 55, "allow_unsafe_renam": 55, "delta": [55, 218], "lake": [55, 218], "pathlib": 55, "destin": [55, 56], "uri": [55, 218, 219], "scheme": [55, 207], "anyth": 55, "action": 55, "custom": [55, 56, 205, 208, 218, 219, 220, 222, 348], "commit": 55, "info": 55, "dynamodb": 55, "lock": 55, "s3": [55, 201, 207, 208, 209, 217, 221, 222, 223, 230, 339], "unsaf": 55, "renam": [55, 77], "disk": [55, 212], "pyiceberg": [56, 220], "iceberg": [56, 154, 155, 220, 303], "delet": 56, "respect": 56, "compress": 57, "snappi": 57, "absolut": [58, 231], "e1": [59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74], "e2": [59, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74], "bitwis": [60, 71], "compar": [61, 62, 63, 65, 67, 70, 112], "anoth": [61, 62, 63, 65, 67, 70, 167, 169], "greater": [62, 63, 130], "invert": 64, "shift": [66, 72, 160, 161], "mod": 68, "multipli": 69, "OR": [71, 346], "sign": [72, 161], "arithmet": [72, 161], "subtract": 73, "divid": 74, "give": [77, 348], "ignore_nul": 78, "return_dtyp": [79, 342, 348], "datatyp": [79, 93, 217, 221, 223, 224, 342, 348], "just": [79, 102, 103, 104, 105, 106, 107, 110, 348], "syntact": 79, "sugar": 79, "udf": [79, 342], "benefit": 79, "batch": [79, 348], "tim": 79, "f": 79, "x_val": 79, "isnumer": 79, "els": [79, 346], "with_column": [79, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 115, 121, 129, 141, 146, 170, 171, 172, 182, 183, 185, 190, 191, 193, 194, 203, 347, 348], "num_x": 79, "wa": [79, 81, 208], "ran": 79, "calcul": [80, 81, 87, 135, 136, 137, 147, 148, 149, 150, 165, 199, 224, 232, 233, 235, 236, 237, 238, 239, 240, 247, 248, 257, 279, 283, 284, 285, 286, 287, 294, 296, 321, 323, 325, 326, 329, 330, 346], "approxim": [80, 81], "hyperloglog": 80, "distinct_valu": 80, "percentil": [81, 224], "sketches_ddsketch": 81, "crate": 81, "rust": [81, 348], "paper": 81, "ddsketch": 81, "fast": 81, "fulli": 81, "mergeabl": 81, "quantil": 81, "sketch": 81, "rel": [81, 109], "guarante": [81, 342], "masson": 81, "et": 81, "al": 81, "score": 81, "approx_median_scor": 81, "25": [81, 208], "75": 81, "approx_percentiles_scor": 81, "9742334234767163": 81, "993661701417351": 81, "9742334": 81, "groupbi": 81, "9900000000000001": 81, "993661": 81, "990000": 81, "find": [81, 293, 295], "len": 81, "elementwis": [82, 83, 84, 85, 86, 88, 97, 98, 100, 142, 143, 144, 145, 158, 163, 200, 346], "arc": [82, 84, 86, 232, 235, 237, 346], "cosin": [82, 83, 97, 111, 232, 233, 247, 346], "invers": [83, 85, 88, 232, 233, 235, 236, 237, 239, 346], "hyperbol": [83, 85, 88, 233, 236, 239, 346], "sine": [84, 85, 163, 235, 236, 321, 346], "tangent": [86, 88, 200, 237, 239, 330, 346], "four": [87, 346], "quadrant": [87, 346], "arctang": [87, 346], "coordin": [87, 346], "radian": [87, 247, 248, 255, 321, 330, 346], "pi": 87, "check": [89, 116, 117, 118, 127, 128, 151, 168, 170, 174, 178, 182, 191, 208, 269, 270, 300], "inclus": 89, "hello": [90, 92, 169, 183, 348], "xff": [90, 92], "xfe": [90, 92], "world": [90, 92, 169, 183, 348], "x00": [90, 92], "retriev": [91, 101, 102, 103, 104, 105, 106, 107, 108, 110, 132, 146, 176, 177, 198, 291, 292], "ell": 92, "mpt": 92, "base": [92, 143, 144, 145, 173, 218, 223, 224, 285, 286, 287, 303, 346], "end": [92, 103, 138, 170, 192, 256, 281], "possibl": [93, 224, 346], "follow": [93, 154, 155, 212, 341, 348], "combin": [93, 347], "valid": [93, 99, 109, 131, 193, 194, 208, 346], "m": [93, 193, 194, 223], "overflow": 93, "256": 93, "cube": 94, "cotang": [98, 248, 346], "countmod": [99, 131], "datetim": [101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 194, 209, 218, 252, 253, 254, 263, 297, 298, 301, 302, 305, 306, 319, 331, 333, 340], "59": [101, 102, 104, 105, 107, 108, 109], "microsecond": [101, 102, 103, 104, 105, 106, 107, 108, 109, 110], "01": [101, 102, 104, 105, 107, 108, 109, 152, 153, 156, 157, 193, 194], "05": [101, 102, 103, 104, 105, 106, 110], "02": [101, 102, 104, 105, 107, 109, 193, 194], "06": [101, 102, 104, 105, 106], "03": [101, 102, 103, 104, 105, 106, 110], "07": [101, 102, 103, 104, 105, 106, 110], "00": [101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 194], "extract": [102, 103, 104, 105, 106, 107, 110, 172, 192, 252, 253, 254, 263, 271, 281, 297, 298, 301, 302, 305, 306, 308, 309, 319, 327, 328, 331, 340], "week": [103, 109], "mondai": 103, "sundai": 103, "2024": [103, 106, 110], "04": [103, 106, 110], "23": [108, 348], "relative_to": 109, "minut": 109, "millisecond": [109, 194, 206, 208], "second": [109, 206, 208], "hour": [109, 209, 302], "unix": 109, "epoch": [109, 152, 153, 156, 157, 301, 302, 305, 306], "1970": [109, 152, 153, 156, 157], "2023": 110, "distanc": 111, "safe": 112, "comparison": 112, "unlik": 112, "regular": [112, 182, 190, 308, 309, 310], "NOT": 112, "behav": 112, "like": [112, 174, 206, 347, 348], "fill_valu": [114, 115, 259], "nan": [115, 117, 118, 128, 151, 259, 270, 300], "infin": [116, 269], "propag": [116, 117, 118, 120], "inf": 116, "invalid": [117, 118], "xxh3_64bit": 120, "cryptograph": 120, "if_tru": 121, "if_fals": 121, "condition": 121, "condit": 121, "a_if_bigger_else_b": 121, "chosen": 121, "bbox": 122, "box": [122, 264], "on_error": [123, 201, 265, 338, 339], "encod": [123, 196, 266, 334], "png": 123, "jpeg": [123, 212], "etc": [123, 183, 339, 348], "encount": [123, 201], "warn": 123, "prevent": 123, "relat": 123, "unsupport": [123, 224], "represnt": 123, "image_format": [124, 266], "imageformat": 124, "h": [125, 194], "desir": 125, "jq_queri": 129, "jq": 129, "http": [129, 154, 155, 193, 194, 205, 207, 208], "jqlang": 129, "github": 129, "manual": 129, "jaq": 129, "01mf02": 129, "re": 129, "idx": 132, "index": [132, 138, 171, 172, 173, 192, 193, 194, 260, 281], "delimit": [133, 150, 217, 221, 312, 322, 346], "subset": 138, "includ": [138, 192, 196, 212, 217, 221, 223, 226, 346], "neg": [138, 269], "offset": [138, 346], "onward": 138, "up": [138, 242, 348], "nulls_first": 139, "occurr": [141, 173, 185, 260, 311], "appear": [141, 169, 251], "letter": 141, "natur": [142, 284, 285], "718281828459045": 143, "logarithm": [143, 284, 285, 286, 287, 346], "pa": [146, 210, 214, 345], "pa_arrai": 146, "map_": 146, "from_arrow": [146, 346], "map_col": 146, "num_hash": [150, 296, 346], "ngram_siz": [150, 296, 346], "hash_funct": [150, 296, 346], "murmurhash3": [150, 346], "xxhash": [150, 346], "sha1": [150, 346], "ngram": [150, 296, 346], "repeat": [150, 296, 346], "permut": [150, 296, 346], "token": [150, 195, 196, 205, 206, 208, 209, 228, 334, 335, 346], "space": [150, 169, 183, 346], "normal": 150, "so": [150, 348], "recommend": 150, "yourself": 150, "shingl": [150, 346], "initi": [150, 206, 208, 346, 348], "One": [150, 346], "transform": [152, 153, 154, 155, 156, 157], "bucket": [154, 208, 222, 303], "specif": [154, 155, 303], "murmur3_32_x86": 154, "apach": [154, 155, 220], "org": [154, 155], "spec": [154, 155], "appendix": 154, "truncat": [155, 180, 188, 304], "place": [159, 201, 316], "squar": [164, 323], "utf": [166, 176, 177, 179, 181, 186, 189, 197], "uppercas": [166, 169, 197, 337], "lowercas": [166, 169, 179, 183, 288, 299], "rest": 166, "easier": 167, "alias": [167, 240, 294], "fooa": 167, "barb": 167, "bazc": 167, "substr": [168, 169, 173, 246, 256, 260, 308, 309, 311, 312, 322, 324], "pattern": [168, 169, 170, 171, 172, 174, 178, 182, 185, 190, 191, 195, 196, 251, 308, 309, 310, 311, 334, 335], "o": [168, 185, 225], "search": [168, 170, 182, 191], "pick": [168, 170, 182, 190, 191], "whole_word": [169, 251], "case_sensit": [169, 251], "longest": 169, "whole": 169, "word": 169, "abc": 169, "bc": 169, "de": 169, "d": [169, 171, 172, 193, 194, 216], "unicod": [169, 183], "still": 169, "sensit": [169, 178], "geftdaft": [170, 191], "regex": [171, 172, 182, 185, 190, 195, 196], "r": [171, 172, 185, 190, 193, 194], "123": [171, 172, 185, 194], "456": [171, 172, 194], "789": [171, 172], "012": [171, 172], "345": [171, 172], "678": [171, 172], "captur": [171, 172], "extract_al": 171, "found": 173, "df_daft": 173, "insensit": 174, "wildcard": [174, 178, 202, 212, 217, 221, 223], "_": [174, 178], "ft": [174, 192], "nchar": [175, 187], "quer": 175, "engi": 175, "test": 177, "hei": 177, "daf": 178, "pad": [180, 188, 289, 317], "longer": [180, 188], "00daft": 180, "0queri": 180, "strip": [181, 189], "whitespac": [181, 183, 189, 290, 318], "ba": [182, 185], "remove_punct": [183, 299], "nfd_unicod": [183, 299], "white_spac": [183, 299], "dedupl": [183, 299], "off": 183, "nworld": 183, "remov": [183, 290, 318], "punctuat": 183, "decompos": 183, "nfd": 183, "newlin": 183, "doubl": [183, 217], "daftdaftdaftdaftdaft": 184, "queryqueryqueryqueryqueri": 184, "engineengineengineengineengin": 184, "123r": 185, "123z": 185, "fooo": 185, "foooo": 185, "fa": 185, "exact": 185, "oof": 186, "rab": 186, "zab": 186, "ut": 187, "gine": [187, 192], "daft00": 188, "query0": 188, "trail": [189, 318], "extend": 192, "eri": 192, "doc": [193, 194], "chrono": [193, 194], "latest": [193, 194, 218], "strftime": [193, 194], "html": [193, 194], "3f": 194, "0800": 194, "asia": 194, "shanghai": 194, "cst": 194, "tokens_path": [195, 196], "special_token": [195, 196, 334, 335], "decod": [195, 226, 265, 335], "openai": [195, 196], "tiktoken": [195, 196], "built": [195, 196, 347], "cl100k_base": [195, 196], "o200k_bas": [195, 196], "p50k_base": [195, 196], "p50k_edit": [195, 196], "r50k_base": [195, 196], "llama3": [195, 196], "use_special_token": [196, 334, 335], "llama": 196, "extra": [196, 208, 217], "preprocess": 196, "certain": [196, 342, 348], "edg": 196, "slightli": 196, "disabl": [196, 224], "max_connect": [201, 206, 208, 338, 339], "treat": [201, 217, 338], "content": [201, 218, 223, 338], "observ": 201, "excess": 201, "issu": 201, "timeout": [201, 206, 208], "dn": 201, "slowdown": 201, "reduc": [201, 218, 223], "amount": [201, 208, 218, 223, 348], "server": 201, "core": [201, 205], "network": 201, "bandwidth": 201, "connect": [201, 206, 208, 218, 223, 224], "thread": [201, 206, 208, 218, 223], "fallback": 201, "s3config": [201, 207, 209], "overridden": [201, 348], "val": 203, "storage_account": [205, 227], "access_kei": [205, 207, 208, 209, 227, 230], "sas_token": [205, 227], "bearer_token": [205, 227, 229], "tenant_id": [205, 227], "client_id": [205, 227], "client_secret": [205, 227], "use_fabric_endpoint": [205, 227], "anonym": [205, 206, 207, 208, 227, 228, 230], "endpoint_url": [205, 208, 227, 230], "use_ssl": [205, 208, 227, 230], "azur": [205, 207, 227], "blob": [205, 227], "To": [205, 222, 348], "authent": [205, 206, 208], "microsoft": 205, "entra": 205, "attempt": [205, 206, 208, 346], "fetch": 205, "azure_storage_account": 205, "secret": [205, 208, 209], "azure_storage_kei": 205, "share": 205, "signatur": 205, "azure_storage_sas_token": 205, "bearer": 205, "azure_storage_token": 205, "tenant": 205, "client": [205, 208], "fabric": 205, "com": 205, "endpoint": [205, 208], "my": [205, 222, 348], "net": 205, "ssl": [205, 208], "dafttestdata": 205, "xxx": [205, 207, 208, 209], "az": [205, 207], "project_id": [206, 228], "retry_initial_backoff_m": [206, 208, 230], "connect_timeout_m": [206, 208, 230], "read_timeout_m": [206, 208, 230], "num_tri": [206, 207, 208, 230], "googl": [206, 228], "cloud": [206, 228], "google_application_credentials_json": 206, "google_application_credenti": 206, "project": [206, 220, 222, 224, 348], "servic": [206, 212], "json": [206, 221, 271], "oauth2": 206, "refresh": 206, "vend": 206, "catalog": [206, 218, 347], "gc": [206, 207], "backoff": [206, 208], "1000m": [206, 208], "wait": [206, 208], "abf": 207, "key_id": [207, 208, 209, 230], "azureconfig": 207, "gcsconfig": 207, "path3": 207, "region_nam": [208, 230], "session_token": [208, 209, 230], "credentials_provid": [208, 209, 230], "buffer_tim": [208, 230], "retry_mod": [208, 230], "verify_ssl": [208, 230], "check_hostname_ssl": [208, 230], "requester_pai": [208, 230], "force_virtual_address": [208, 230], "profile_nam": [208, 230], "system": [208, 209, 218, 223, 230], "region": 208, "aw": [208, 209, 218], "east": 208, "wrongli": 208, "auto": [208, 209], "detect": [208, 209, 347], "request": [208, 229], "s3credenti": 208, "actual": 208, "expir": 208, "session": [208, 209], "temporari": [208, 209], "fail": [208, 346], "verifi": 208, "certif": 208, "cert": 208, "hostnam": 208, "legaci": 208, "openssl": 208, "assum": [208, 209, 218], "transfer": 208, "bulk": 208, "forc": [208, 346], "virtual": 208, "aws_profil": 208, "expiri": 209, "perman": 209, "timedelta": 209, "get_credenti": 209, "lambda": 209, "now": [209, 218, 220], "utc": [209, 218], "ddf": 211, "been": 211, "glob": 212, "bracket": 212, "recurs": [212, 346], "layer": [212, 225], "directori": [212, 217, 221, 223], "along": 212, "filesystem": 212, "pd": 213, "pd_df": 213, "chunkedarrai": [214, 346, 348], "sequenc": 214, "raydataset": 216, "infer_schema": [217, 221, 223, 224], "has_head": 217, "double_quot": 217, "quot": 217, "escape_char": 217, "comment": 217, "allow_variable_column": 217, "file_path_column": [217, 221, 223], "hive_partit": [217, 221, 223], "schema_hint": [217, 221, 223], "_buffer_s": [217, 221], "_chunk_siz": [217, 221, 223], "definit": [217, 221, 223, 224], "hint": [217, 221, 223, 224, 348], "header": 217, "doubled_quot": 217, "escap": 217, "line": [217, 221], "hive_styl": [217, 221, 223], "_multithreaded_io": [218, 223], "push": [218, 220, 224], "librari": [218, 220, 222], "instanc": [218, 348], "referenc": [218, 347], "glue": 218, "databrick": 218, "uniti": 218, "rfc": 218, "3339": 218, "iso": 218, "8601": 218, "help": [218, 223, 348], "let": [218, 223, 224], "decid": [218, 223, 224], "table_uri": 219, "hudi": 219, "snapshot_id": 220, "offici": 220, "snapshot": 220, "lancedb": 222, "pip": 222, "getdaft": 222, "lanc": 222, "row_group": 223, "coerce_int96_timestamp_unit": 223, "correspond": [223, 345, 347], "int96": 223, "conn": 224, "partition_bound_strategi": 224, "disable_pushdowns_to_sql": 224, "infer_schema_length": 224, "sqlalchemi": 224, "factori": 224, "pushdown": 224, "turn": 224, "abl": [224, 348], "connectorx": 224, "arrow": [224, 346], "driver": 224, "declar": 224, "dialect": 224, "sqlglot": 224, "translat": 224, "document": 224, "min_max": 224, "rang": [224, 243], "percentile_disc": 224, "33rd": 224, "66th": 224, "down": [224, 261], "limit": 224, "my_tabl": [224, 347], "sqlite": 224, "my_databas": 224, "db": 224, "create_conn": 224, "create_engin": 224, "l": 226, "la": 226, "rgba": [226, 268], "grayscal": [226, 268], "alpha": 226, "l16": 226, "la16": 226, "rgb16": 226, "rgba16": 226, "rgb32f": 226, "rgba32f": 226, "user_ag": 229, "send": 229, "web": 229, "max_connections_per_io_thread": 230, "separ": [234, 277], "angl": [238, 247, 248, 255, 307, 321, 330], "axi": 238, "averag": [240, 279, 294], "tbl": [240, 249, 250, 293, 294, 295, 325, 326, 329], "string_input": [241, 246, 256, 260, 272, 273, 274, 288, 289, 290, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 322, 324, 332, 333, 337], "nearest": [242, 261], "panic": 243, "todo": [244, 245], "compon": [252, 253, 254, 263, 297, 298, 319, 331, 340], "day_of_week": 254, "expon": 257, "exponenti": 257, "input_imag": [264, 266, 267, 268], "bounding_box": 264, "crop": 264, "handl": 265, "resiz": 267, "infinit": 269, "Not": [270, 300], "jsonpath": 271, "leftmost": 272, "chunk_siz": 275, "chunk": [275, 346], "portion": 281, "ascend": 282, "reach": [289, 317], "associ": [291, 292, 346], "map_get": 291, "map_extract": 292, "among": [293, 295], "avg": 294, "clean": 299, "num_bucket": 303, "degre": [307, 346], "rightmost": 315, "70": [325, 326], "710678118": [325, 326], "stddev": [326, 342], "token_path": [334, 335], "upload": 339, "page": 341, "overview": 341, "view": 342, "expressionsproject": 342, "agg_concat": 342, "concat": 342, "agg_list": 342, "map_group": 342, "600": 342, "std_dev": 342, "stdev": 342, "to_pylist": [342, 346, 348], "14": 342, "730919862656235": 342, "331": 342, "62026476076517": 342, "welcom": 343, "guid": [343, 348], "from_pyarrow_schema": 345, "pa_schema": 345, "to_pyarrow_schema": 345, "usual": 346, "arcco": 346, "arccosh": 346, "arcsin": 346, "arcsinh": 346, "arctan": 346, "arctan2": 346, "arctanh": 346, "co": 346, "cot": 346, "exp": 346, "static": 346, "lib": 346, "arrow_seri": 346, "whose": 346, "put": 346, "from_numpi": 346, "numpy_seri": 346, "dimens": 346, "1d": 346, "from_panda": 346, "pd_seri": 346, "try": 346, "go": 346, "through": 346, "final": 346, "from_pylist": 346, "list_seri": 346, "pyobj": 346, "depend": 346, "pyobject": 346, "disallow": 346, "coercion": 346, "ln": 346, "log10": 346, "log2": 346, "minhash": 346, "murmurhash": 346, "murmur3": 346, "sin": 346, "size_byt": 346, "particular": 346, "omit": 346, "bitmask": 346, "tan": 346, "to_arrow": [346, 348], "sqlcatalog": 347, "register_glob": 347, "featur": 347, "earli": 347, "develop": 347, "experi": 347, "api": 347, "statement": 347, "reli": 347, "namespac": 347, "result_df": 347, "ON": 347, "complex": 347, "insid": 347, "regist": 347, "caller": 347, "scope": 347, "incorpor": 347, "copi": 347, "made": 347, "modifi": 347, "snippet": 347, "lit": 347, "mechan": 348, "live": 348, "lazili": 348, "decor": 348, "pleas": 348, "consult": 348, "num_gpu": 348, "memory_byt": 348, "batch_siz": 348, "slower": 348, "kernel": 348, "becaus": 348, "overhead": 348, "common": 348, "cover": 348, "ticket": 348, "contribut": 348, "receiv": 348, "constant": 348, "our": 348, "add_const": 348, "v": 348, "new_x": 348, "21": 348, "22": 348, "On": 348, "concurr": 348, "udf_needs_2_cpu": 348, "udf_needs_4_cpu": 348, "override_opt": 348, "param": 348, "alloc": 348, "pure": 348, "placement": 348, "free": 348, "gpu": 348, "cuda_visible_devic": 348, "experienc": 348, "heap": 348, "rtype": 348, "userdefinedpyfunclik": 348, "init_arg": 348, "resource_request": 348, "resourcerequest": 348, "multiply_and_add": 348, "to_numpi": 348, "__call__": 348, "example_udf": 348, "parametr": 348, "example_udf_4cpu": 348, "with_concurr": 348, "tell": 348, "mygpuudf": 348, "text": 348, "mygpuudf_8_concurr": 348, "with_init_arg": 348, "runtim": 348, "myudfwithinit": 348, "init": 348, "myudfwithinit_custominitarg": 348, "friend": 348, "bar_world": 348, "bar_custom": 348, "blanklin": 348}, "objects": {"daft": [[10, 0, 1, "", "DataFrame"], [3, 0, 1, "", "DataType"], [225, 0, 1, "", "ImageFormat"], [226, 0, 1, "", "ImageMode"], [345, 0, 1, "", "Schema"], [346, 0, 1, "", "Series"], [202, 3, 1, "", "col"], [6, 3, 1, "", "execution_config_ctx"], [210, 3, 1, "", "from_arrow"], [211, 3, 1, "", "from_dask_dataframe"], [212, 3, 1, "", "from_glob_path"], [213, 3, 1, "", "from_pandas"], [214, 3, 1, "", "from_pydict"], [215, 3, 1, "", "from_pylist"], [216, 3, 1, "", "from_ray_dataset"], [203, 3, 1, "", "lit"], [7, 3, 1, "", "planning_config_ctx"], [217, 3, 1, "", "read_csv"], [218, 3, 1, "", "read_deltalake"], [219, 3, 1, "", "read_hudi"], [220, 3, 1, "", "read_iceberg"], [221, 3, 1, "", "read_json"], [222, 3, 1, "", "read_lance"], [223, 3, 1, "", "read_parquet"], [224, 3, 1, "", "read_sql"], [8, 3, 1, "", "set_execution_config"], [9, 3, 1, "", "set_planning_config"], [347, 3, 1, "", "sql"], [347, 3, 1, "", "sql_expr"], [204, 3, 1, "", "to_struct"], [348, 3, 1, "", "udf"]], "daft.DataFrame": [[11, 1, 1, "", "__getitem__"], [10, 1, 1, "", "__init__"], [12, 1, 1, "", "agg"], [13, 1, 1, "", "collect"], [14, 2, 1, "", "column_names"], [15, 1, 1, "", "concat"], [16, 1, 1, "", "count"], [17, 1, 1, "", "distinct"], [18, 1, 1, "", "exclude"], [19, 1, 1, "", "explain"], [20, 1, 1, "", "explode"], [21, 1, 1, "", "filter"], [22, 1, 1, "", "groupby"], [23, 1, 1, "", "into_partitions"], [24, 1, 1, "", "iter_partitions"], [25, 1, 1, "", "iter_rows"], [26, 1, 1, "", "join"], [27, 1, 1, "", "limit"], [28, 1, 1, "", "max"], [29, 1, 1, "", "mean"], [30, 1, 1, "", "melt"], [31, 1, 1, "", "min"], [32, 1, 1, "", "pivot"], [33, 1, 1, "", "repartition"], [34, 1, 1, "", "sample"], [35, 1, 1, "", "schema"], [36, 1, 1, "", "select"], [37, 1, 1, "", "show"], [38, 1, 1, "", "sort"], [39, 1, 1, "", "stddev"], [40, 1, 1, "", "sum"], [41, 1, 1, "", "to_arrow"], [42, 1, 1, "", "to_dask_dataframe"], [43, 1, 1, "", "to_pandas"], [44, 1, 1, "", "to_pydict"], [45, 1, 1, "", "to_pylist"], [46, 1, 1, "", "to_ray_dataset"], [47, 1, 1, "", "to_torch_iter_dataset"], [48, 1, 1, "", "to_torch_map_dataset"], [49, 1, 1, "", "transform"], [50, 1, 1, "", "unpivot"], [51, 1, 1, "", "where"], [52, 1, 1, "", "with_column"], [53, 1, 1, "", "with_columns"], [54, 1, 1, "", "write_csv"], [55, 1, 1, "", "write_deltalake"], [56, 1, 1, "", "write_iceberg"], [57, 1, 1, "", "write_parquet"]], "daft.DataType": [[3, 1, 1, "", "binary"], [3, 1, 1, "", "bool"], [3, 1, 1, "", "date"], [3, 1, 1, "", "decimal128"], [3, 1, 1, "", "duration"], [3, 1, 1, "", "embedding"], [3, 1, 1, "", "fixed_size_binary"], [3, 1, 1, "", "fixed_size_list"], [3, 1, 1, "", "float32"], [3, 1, 1, "", "float64"], [3, 1, 1, "", "from_arrow_type"], [3, 1, 1, "", "from_numpy_dtype"], [3, 1, 1, "", "image"], [3, 1, 1, "", "int16"], [3, 1, 1, "", "int32"], [3, 1, 1, "", "int64"], [3, 1, 1, "", "int8"], [3, 1, 1, "", "interval"], [3, 1, 1, "", "list"], [3, 1, 1, "", "map"], [3, 1, 1, "", "null"], [3, 1, 1, "", "python"], [3, 1, 1, "", "sparse_tensor"], [3, 1, 1, "", "string"], [3, 1, 1, "", "struct"], [3, 1, 1, "", "tensor"], [3, 1, 1, "", "time"], [3, 1, 1, "", "timestamp"], [3, 1, 1, "", "uint16"], [3, 1, 1, "", "uint32"], [3, 1, 1, "", "uint64"], [3, 1, 1, "", "uint8"]], "daft.Expression": [[58, 1, 1, "", "__abs__"], [59, 1, 1, "", "__add__"], [60, 1, 1, "", "__and__"], [61, 1, 1, "", "__eq__"], [62, 1, 1, "", "__ge__"], [63, 1, 1, "", "__gt__"], [64, 1, 1, "", "__invert__"], [65, 1, 1, "", "__le__"], [66, 1, 1, "", "__lshift__"], [67, 1, 1, "", "__lt__"], [68, 1, 1, "", "__mod__"], [69, 1, 1, "", "__mul__"], [70, 1, 1, "", "__ne__"], [71, 1, 1, "", "__or__"], [72, 1, 1, "", "__rshift__"], [73, 1, 1, "", "__sub__"], [74, 1, 1, "", "__truediv__"], [75, 1, 1, "", "agg_concat"], [76, 1, 1, "", "agg_list"], [77, 1, 1, "", "alias"], [78, 1, 1, "", "any_value"], [79, 1, 1, "", "apply"], [80, 1, 1, "", "approx_count_distinct"], [81, 1, 1, "", "approx_percentiles"], [82, 1, 1, "", "arccos"], [83, 1, 1, "", "arccosh"], [84, 1, 1, "", "arcsin"], [85, 1, 1, "", "arcsinh"], [86, 1, 1, "", "arctan"], [87, 1, 1, "", "arctan2"], [88, 1, 1, "", "arctanh"], [89, 1, 1, "", "between"], [93, 1, 1, "", "cast"], [94, 1, 1, "", "cbrt"], [95, 1, 1, "", "ceil"], [96, 1, 1, "", "clip"], [97, 1, 1, "", "cos"], [98, 1, 1, "", "cot"], [99, 1, 1, "", "count"], [100, 1, 1, "", "degrees"], [112, 1, 1, "", "eq_null_safe"], [113, 1, 1, "", "exp"], [114, 1, 1, "", "fill_null"], [119, 1, 1, "", "floor"], [120, 1, 1, "", "hash"], [121, 1, 1, "", "if_else"], [127, 1, 1, "", "is_in"], [128, 1, 1, "", "is_null"], [142, 1, 1, "", "ln"], [143, 1, 1, "", "log"], [144, 1, 1, "", "log10"], [145, 1, 1, "", "log2"], [147, 1, 1, "", "max"], [148, 1, 1, "", "mean"], [149, 1, 1, "", "min"], [150, 1, 1, "", "minhash"], [151, 1, 1, "", "not_null"], [158, 1, 1, "", "radians"], [159, 1, 1, "", "round"], [160, 1, 1, "", "shift_left"], [161, 1, 1, "", "shift_right"], [162, 1, 1, "", "sign"], [163, 1, 1, "", "sin"], [164, 1, 1, "", "sqrt"], [165, 1, 1, "", "stddev"], [199, 1, 1, "", "sum"], [200, 1, 1, "", "tan"]], "daft.Expression.binary": [[90, 1, 1, "", "concat"], [91, 1, 1, "", "length"], [92, 1, 1, "", "slice"]], "daft.Expression.dt": [[101, 1, 1, "", "date"], [102, 1, 1, "", "day"], [103, 1, 1, "", "day_of_week"], [104, 1, 1, "", "hour"], [105, 1, 1, "", "minute"], [106, 1, 1, "", "month"], [107, 1, 1, "", "second"], [108, 1, 1, "", "time"], [109, 1, 1, "", "truncate"], [110, 1, 1, "", "year"]], "daft.Expression.embedding": [[111, 1, 1, "", "cosine_distance"]], "daft.Expression.float": [[115, 1, 1, "", "fill_nan"], [116, 1, 1, "", "is_inf"], [117, 1, 1, "", "is_nan"], [118, 1, 1, "", "not_nan"]], "daft.Expression.image": [[122, 1, 1, "", "crop"], [123, 1, 1, "", "decode"], [124, 1, 1, "", "encode"], [125, 1, 1, "", "resize"], [126, 1, 1, "", "to_mode"]], "daft.Expression.json": [[129, 1, 1, "", "query"]], "daft.Expression.list": [[130, 1, 1, "", "chunk"], [131, 1, 1, "", "count"], [132, 1, 1, "", "get"], [133, 1, 1, "", "join"], [134, 1, 1, "", "length"], [135, 1, 1, "", "max"], [136, 1, 1, "", "mean"], [137, 1, 1, "", "min"], [138, 1, 1, "", "slice"], [139, 1, 1, "", "sort"], [140, 1, 1, "", "sum"], [141, 1, 1, "", "value_counts"]], "daft.Expression.map": [[146, 1, 1, "", "get"]], "daft.Expression.partitioning": [[152, 1, 1, "", "days"], [153, 1, 1, "", "hours"], [154, 1, 1, "", "iceberg_bucket"], [155, 1, 1, "", "iceberg_truncate"], [156, 1, 1, "", "months"], [157, 1, 1, "", "years"]], "daft.Expression.str": [[166, 1, 1, "", "capitalize"], [167, 1, 1, "", "concat"], [168, 1, 1, "", "contains"], [169, 1, 1, "", "count_matches"], [170, 1, 1, "", "endswith"], [171, 1, 1, "", "extract"], [172, 1, 1, "", "extract_all"], [173, 1, 1, "", "find"], [174, 1, 1, "", "ilike"], [175, 1, 1, "", "left"], [176, 1, 1, "", "length"], [177, 1, 1, "", "length_bytes"], [178, 1, 1, "", "like"], [179, 1, 1, "", "lower"], [180, 1, 1, "", "lpad"], [181, 1, 1, "", "lstrip"], [182, 1, 1, "", "match"], [183, 1, 1, "", "normalize"], [184, 1, 1, "", "repeat"], [185, 1, 1, "", "replace"], [186, 1, 1, "", "reverse"], [187, 1, 1, "", "right"], [188, 1, 1, "", "rpad"], [189, 1, 1, "", "rstrip"], [190, 1, 1, "", "split"], [191, 1, 1, "", "startswith"], [192, 1, 1, "", "substr"], [193, 1, 1, "", "to_date"], [194, 1, 1, "", "to_datetime"], [195, 1, 1, "", "tokenize_decode"], [196, 1, 1, "", "tokenize_encode"], [197, 1, 1, "", "upper"]], "daft.Expression.struct": [[198, 1, 1, "", "get"]], "daft.Expression.url": [[201, 1, 1, "", "download"]], "daft.ImageFormat": [[225, 1, 1, "", "__init__"]], "daft.ImageMode": [[226, 1, 1, "", "__init__"]], "daft.Schema": [[345, 1, 1, "", "from_pyarrow_schema"], [345, 1, 1, "", "to_pyarrow_schema"]], "daft.Series": [[346, 1, 1, "", "arccos"], [346, 1, 1, "", "arccosh"], [346, 1, 1, "", "arcsin"], [346, 1, 1, "", "arcsinh"], [346, 1, 1, "", "arctan"], [346, 1, 1, "", "arctan2"], [346, 1, 1, "", "arctanh"], [346, 1, 1, "", "cos"], [346, 1, 1, "", "cot"], [346, 1, 1, "", "degrees"], [346, 1, 1, "", "exp"], [346, 1, 1, "", "from_arrow"], [346, 1, 1, "", "from_numpy"], [346, 1, 1, "", "from_pandas"], [346, 1, 1, "", "from_pylist"], [346, 1, 1, "", "ln"], [346, 1, 1, "", "log"], [346, 1, 1, "", "log10"], [346, 1, 1, "", "log2"], [346, 1, 1, "", "minhash"], [346, 1, 1, "", "radians"], [346, 1, 1, "", "sin"], [346, 1, 1, "", "size_bytes"], [346, 1, 1, "", "tan"], [346, 1, 1, "", "to_arrow"], [346, 1, 1, "", "to_pylist"]], "daft.context": [[4, 3, 1, "", "set_runner_py"], [5, 3, 1, "", "set_runner_ray"]], "daft.dataframe": [[342, 0, 1, "", "GroupedDataFrame"]], "daft.dataframe.GroupedDataFrame": [[342, 1, 1, "", "agg"], [342, 1, 1, "", "agg_concat"], [342, 1, 1, "", "agg_list"], [342, 1, 1, "", "any_value"], [342, 1, 1, "", "count"], [342, 1, 1, "", "map_groups"], [342, 1, 1, "", "max"], [342, 1, 1, "", "mean"], [342, 1, 1, "", "min"], [342, 1, 1, "", "stddev"], [342, 1, 1, "", "sum"]], "daft.io": [[205, 0, 1, "", "AzureConfig"], [206, 0, 1, "", "GCSConfig"], [207, 0, 1, "", "IOConfig"], [208, 0, 1, "", "S3Config"], [209, 0, 1, "", "S3Credentials"]], "daft.io.AzureConfig": [[205, 1, 1, "", "__init__"]], "daft.io.GCSConfig": [[206, 1, 1, "", "__init__"]], "daft.io.IOConfig": [[207, 1, 1, "", "__init__"]], "daft.io.S3Config": [[208, 1, 1, "", "__init__"]], "daft.io.S3Credentials": [[209, 1, 1, "", "__init__"]], "daft.sql._sql_funcs": [[227, 3, 1, "", "AzureConfig"], [228, 3, 1, "", "GCSConfig"], [229, 3, 1, "", "HTTPConfig"], [230, 3, 1, "", "S3Config"], [231, 3, 1, "", "abs"], [232, 3, 1, "", "acos"], [233, 3, 1, "", "acosh"], [234, 3, 1, "", "array_to_string"], [235, 3, 1, "", "asin"], [236, 3, 1, "", "asinh"], [237, 3, 1, "", "atan"], [238, 3, 1, "", "atan2"], [239, 3, 1, "", "atanh"], [240, 3, 1, "", "avg"], [241, 3, 1, "", "capitalize"], [242, 3, 1, "", "ceil"], [243, 3, 1, "", "clip"], [244, 3, 1, "", "coalesce"], [245, 3, 1, "", "concat"], [246, 3, 1, "", "contains"], [247, 3, 1, "", "cos"], [248, 3, 1, "", "cot"], [249, 3, 1, "", "count"], [250, 3, 1, "", "count_distinct"], [251, 3, 1, "", "count_matches"], [252, 3, 1, "", "date"], [253, 3, 1, "", "day"], [254, 3, 1, "", "dayofweek"], [255, 3, 1, "", "degrees"], [256, 3, 1, "", "ends_with"], [257, 3, 1, "", "exp"], [258, 3, 1, "", "explode"], [259, 3, 1, "", "fill_nan"], [260, 3, 1, "", "find"], [261, 3, 1, "", "floor"], [262, 3, 1, "", "hash"], [263, 3, 1, "", "hour"], [264, 3, 1, "", "image_crop"], [265, 3, 1, "", "image_decode"], [266, 3, 1, "", "image_encode"], [267, 3, 1, "", "image_resize"], [268, 3, 1, "", "image_to_mode"], [269, 3, 1, "", "is_inf"], [270, 3, 1, "", "is_nan"], [271, 3, 1, "", "json_query"], [272, 3, 1, "", "left"], [273, 3, 1, "", "length"], [274, 3, 1, "", "length_bytes"], [275, 3, 1, "", "list_chunk"], [276, 3, 1, "", "list_count"], [277, 3, 1, "", "list_join"], [278, 3, 1, "", "list_max"], [279, 3, 1, "", "list_mean"], [280, 3, 1, "", "list_min"], [281, 3, 1, "", "list_slice"], [282, 3, 1, "", "list_sort"], [283, 3, 1, "", "list_sum"], [284, 3, 1, "", "ln"], [285, 3, 1, "", "log"], [286, 3, 1, "", "log10"], [287, 3, 1, "", "log2"], [288, 3, 1, "", "lower"], [289, 3, 1, "", "lpad"], [290, 3, 1, "", "lstrip"], [291, 3, 1, "", "map_extract"], [292, 3, 1, "", "map_get"], [293, 3, 1, "", "max"], [294, 3, 1, "", "mean"], [295, 3, 1, "", "min"], [296, 3, 1, "", "minhash"], [297, 3, 1, "", "minute"], [298, 3, 1, "", "month"], [299, 3, 1, "", "normalize"], [300, 3, 1, "", "not_nan"], [301, 3, 1, "", "partitioning_days"], [302, 3, 1, "", "partitioning_hours"], [303, 3, 1, "", "partitioning_iceberg_bucket"], [304, 3, 1, "", "partitioning_iceberg_truncate"], [305, 3, 1, "", "partitioning_months"], [306, 3, 1, "", "partitioning_years"], [307, 3, 1, "", "radians"], [308, 3, 1, "", "regexp_extract"], [309, 3, 1, "", "regexp_extract_all"], [310, 3, 1, "", "regexp_match"], [311, 3, 1, "", "regexp_replace"], [312, 3, 1, "", "regexp_split"], [313, 3, 1, "", "repeat"], [314, 3, 1, "", "reverse"], [315, 3, 1, "", "right"], [316, 3, 1, "", "round"], [317, 3, 1, "", "rpad"], [318, 3, 1, "", "rstrip"], [319, 3, 1, "", "second"], [320, 3, 1, "", "sign"], [321, 3, 1, "", "sin"], [322, 3, 1, "", "split"], [323, 3, 1, "", "sqrt"], [324, 3, 1, "", "starts_with"], [325, 3, 1, "", "stddev"], [326, 3, 1, "", "stddev_samp"], [327, 3, 1, "", "struct_extract"], [328, 3, 1, "", "struct_get"], [329, 3, 1, "", "sum"], [330, 3, 1, "", "tan"], [331, 3, 1, "", "time"], [332, 3, 1, "", "to_date"], [333, 3, 1, "", "to_datetime"], [334, 3, 1, "", "tokenize_decode"], [335, 3, 1, "", "tokenize_encode"], [336, 3, 1, "", "unnest"], [337, 3, 1, "", "upper"], [338, 3, 1, "", "url_download"], [339, 3, 1, "", "url_upload"], [340, 3, 1, "", "year"]], "daft.udf": [[348, 0, 1, "", "UDF"]], "daft.udf.UDF": [[348, 1, 1, "", "__call__"], [348, 1, 1, "", "override_options"], [348, 1, 1, "", "with_concurrency"], [348, 1, 1, "", "with_init_args"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:function"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "function", "Python function"]}, "titleterms": {"configur": 0, "set": 0, "runner": 0, "i": 0, "o": 0, "datafram": [1, 2, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "creation": 1, "In": 1, "memori": 1, "data": [1, 2], "python": 1, "object": 1, "arrow": 1, "panda": 1, "file": 1, "parquet": 1, "csv": 1, "json": [1, 129, 341], "path": 1, "catalog": 1, "apach": 1, "iceberg": 1, "delta": 1, "lake": 1, "hudi": 1, "integr": [1, 2], "rai": 1, "dataset": 1, "dask": 1, "databas": 1, "manipul": 2, "select": [2, 36], "column": 2, "filter": [2, 21], "row": 2, "reorder": 2, "combin": 2, "aggreg": [2, 341], "execut": 2, "retriev": 2, "materi": 2, "visual": 2, "write": 2, "schema": [2, 35, 345], "lineag": 2, "datatyp": 3, "daft": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226], "context": [4, 5], "set_runner_pi": 4, "set_runner_rai": 5, "execution_config_ctx": 6, "planning_config_ctx": 7, "set_execution_config": 8, "set_planning_config": 9, "__getitem__": 11, "agg": 12, "collect": 13, "column_nam": 14, "concat": [15, 90, 167, 245], "count": [16, 99, 131, 249], "distinct": 17, "exclud": 18, "explain": 19, "explod": [20, 258], "groupbi": [22, 342], "into_partit": 23, "iter_partit": 24, "iter_row": 25, "join": [26, 133], "limit": 27, "max": [28, 135, 147, 293], "mean": [29, 136, 148, 294], "melt": 30, "min": [31, 137, 149, 295], "pivot": 32, "repartit": 33, "sampl": 34, "show": 37, "sort": [38, 139], "stddev": [39, 165, 325], "sum": [40, 140, 199, 329], "to_arrow": 41, "to_dask_datafram": 42, "to_panda": 43, "to_pydict": 44, "to_pylist": 45, "to_ray_dataset": 46, "to_torch_iter_dataset": 47, "to_torch_map_dataset": 48, "transform": 49, "unpivot": 50, "where": 51, "with_column": [52, 53], "write_csv": 54, "write_deltalak": 55, "write_iceberg": 56, "write_parquet": 57, "express": [58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 341], "__abs__": 58, "__add__": 59, "__and__": 60, "__eq__": 61, "__ge__": 62, "__gt__": 63, "__invert__": 64, "__le__": 65, "__lshift__": 66, "__lt__": 67, "__mod__": 68, "__mul__": 69, "__ne__": 70, "__or__": 71, "__rshift__": 72, "__sub__": 73, "__truediv__": 74, "agg_concat": 75, "agg_list": 76, "alia": 77, "any_valu": 78, "appli": 79, "approx_count_distinct": 80, "approx_percentil": 81, "arcco": 82, "arccosh": 83, "arcsin": 84, "arcsinh": 85, "arctan": 86, "arctan2": 87, "arctanh": 88, "between": 89, "binari": [90, 91, 92, 341], "length": [91, 134, 176, 273], "slice": [92, 138], "cast": 93, "cbrt": 94, "ceil": [95, 242], "clip": [96, 243], "co": [97, 247], "cot": [98, 248], "degre": [100, 255], "dt": [101, 102, 103, 104, 105, 106, 107, 108, 109, 110], "date": [101, 252], "dai": [102, 152, 253], "day_of_week": 103, "hour": [104, 153, 263], "minut": [105, 297], "month": [106, 156, 298], "second": [107, 319], "time": [108, 331], "truncat": 109, "year": [110, 157, 340], "embed": [111, 341], "cosine_dist": 111, "eq_null_saf": 112, "exp": [113, 257], "fill_nul": 114, "float": [115, 116, 117, 118, 341], "fill_nan": [115, 259], "is_inf": [116, 269], "is_nan": [117, 270], "not_nan": [118, 300], "floor": [119, 261], "hash": [120, 262], "if_els": 121, "imag": [122, 123, 124, 125, 126, 341, 344], "crop": 122, "decod": 123, "encod": 124, "resiz": 125, "to_mod": 126, "is_in": 127, "is_nul": 128, "queri": 129, "list": [130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 341], "chunk": 130, "get": [132, 146, 198], "value_count": 141, "ln": [142, 284], "log": [143, 285], "log10": [144, 286], "log2": [145, 287], "map": [146, 341], "minhash": [150, 296], "not_nul": 151, "partit": [152, 153, 154, 155, 156, 157, 341], "iceberg_bucket": 154, "iceberg_trunc": 155, "radian": [158, 307], "round": [159, 316], "shift_left": 160, "shift_right": 161, "sign": [162, 320], "sin": [163, 321], "sqrt": [164, 323], "str": [166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197], "capit": [166, 241], "contain": [168, 246], "count_match": [169, 251], "endswith": 170, "extract": 171, "extract_al": 172, "find": [173, 260], "ilik": 174, "left": [175, 272], "length_byt": [177, 274], "like": 178, "lower": [179, 288], "lpad": [180, 289], "lstrip": [181, 290], "match": 182, "normal": [183, 299], "repeat": [184, 313], "replac": 185, "revers": [186, 314], "right": [187, 315], "rpad": [188, 317], "rstrip": [189, 318], "split": [190, 322], "startswith": 191, "substr": 192, "to_dat": [193, 332], "to_datetim": [194, 333], "tokenize_decod": [195, 334], "tokenize_encod": [196, 335], "upper": [197, 337], "struct": [198, 341], "tan": [200, 330], "url": [201, 341], "download": 201, "col": 202, "lit": 203, "to_struct": 204, "io": [205, 206, 207, 208, 209], "azureconfig": [205, 227], "gcsconfig": [206, 228], "ioconfig": 207, "s3config": [208, 230], "s3credenti": 209, "from_arrow": 210, "from_dask_datafram": 211, "from_glob_path": 212, "from_panda": 213, "from_pydict": 214, "from_pylist": 215, "from_ray_dataset": 216, "read_csv": 217, "read_deltalak": 218, "read_hudi": 219, "read_iceberg": 220, "read_json": 221, "read_lanc": 222, "read_parquet": 223, "read_sql": 224, "imageformat": 225, "imagemod": 226, "httpconfig": 229, "ab": 231, "aco": 232, "acosh": 233, "array_to_str": 234, "asin": 235, "asinh": 236, "atan": 237, "atan2": 238, "atanh": 239, "avg": 240, "coalesc": 244, "count_distinct": 250, "dayofweek": 254, "ends_with": 256, "image_crop": 264, "image_decod": 265, "image_encod": 266, "image_res": 267, "image_to_mod": 268, "json_queri": 271, "list_chunk": 275, "list_count": 276, "list_join": 277, "list_max": 278, "list_mean": 279, "list_min": 280, "list_slic": 281, "list_sort": 282, "list_sum": 283, "map_extract": 291, "map_get": 292, "partitioning_dai": 301, "partitioning_hour": 302, "partitioning_iceberg_bucket": 303, "partitioning_iceberg_trunc": 304, "partitioning_month": 305, "partitioning_year": 306, "regexp_extract": 308, "regexp_extract_al": 309, "regexp_match": 310, "regexp_replac": 311, "regexp_split": 312, "starts_with": 324, "stddev_samp": 326, "struct_extract": 327, "struct_get": 328, "unnest": 336, "url_download": 338, "url_upload": 339, "constructor": 341, "gener": 341, "numer": 341, "logic": 341, "string": 341, "tempor": 341, "api": 343, "document": 343, "miscellan": 344, "type": 344, "seri": 346, "sql": 347, "function": [347, 348], "user": 348, "defin": 348, "udf": 348, "creat": 348, "resourc": 348, "request": 348, "us": 348}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"Configuration": [[0, "configuration"]], "Setting the Runner": [[0, "setting-the-runner"]], "Setting configurations": [[0, "setting-configurations"]], "I/O Configurations": [[0, "i-o-configurations"]], "Dataframe Creation": [[1, "dataframe-creation"]], "In-Memory Data": [[1, "in-memory-data"]], "Python Objects": [[1, "python-objects"]], "Arrow": [[1, "arrow"]], "Pandas": [[1, "pandas"]], "Files": [[1, "files"]], "Parquet": [[1, "parquet"]], "CSV": [[1, "csv"]], "JSON": [[1, "json"], [341, "json"]], "File Paths": [[1, "file-paths"]], "Data Catalogs": [[1, "data-catalogs"]], "Apache Iceberg": [[1, "apache-iceberg"]], "Delta Lake": [[1, "delta-lake"]], "Apache Hudi": [[1, "apache-hudi"]], "Integrations": [[1, "integrations"], [2, "integrations"]], "Ray Datasets": [[1, "ray-datasets"]], "Dask": [[1, "dask"]], "Databases": [[1, "databases"]], "DataFrame": [[2, "dataframe"]], "Data Manipulation": [[2, "data-manipulation"]], "Selecting Columns": [[2, "selecting-columns"]], "Manipulating Columns": [[2, "manipulating-columns"]], "Filtering Rows": [[2, "filtering-rows"]], "Reordering": [[2, "reordering"]], "Combining": [[2, "combining"]], "Aggregations": [[2, "aggregations"]], "Execution": [[2, "execution"]], "Data Retrieval": [[2, "data-retrieval"]], "Materialization": [[2, "materialization"]], "Visualization": [[2, "visualization"]], "Writing Data": [[2, "writing-data"]], "Schema and Lineage": [[2, "schema-and-lineage"]], "DataTypes": [[3, "datatypes"]], "daft.context.set_runner_py": [[4, "daft-context-set-runner-py"]], "daft.context.set_runner_ray": [[5, "daft-context-set-runner-ray"]], "daft.execution_config_ctx": [[6, "daft-execution-config-ctx"]], "daft.planning_config_ctx": [[7, "daft-planning-config-ctx"]], "daft.set_execution_config": [[8, "daft-set-execution-config"]], "daft.set_planning_config": [[9, "daft-set-planning-config"]], "daft.DataFrame": [[10, "daft-dataframe"]], "daft.DataFrame.__getitem__": [[11, "daft-dataframe-getitem"]], "daft.DataFrame.agg": [[12, "daft-dataframe-agg"]], "daft.DataFrame.collect": [[13, "daft-dataframe-collect"]], "daft.DataFrame.column_names": [[14, "daft-dataframe-column-names"]], "daft.DataFrame.concat": [[15, "daft-dataframe-concat"]], "daft.DataFrame.count": [[16, "daft-dataframe-count"]], "daft.DataFrame.distinct": [[17, "daft-dataframe-distinct"]], "daft.DataFrame.exclude": [[18, "daft-dataframe-exclude"]], "daft.DataFrame.explain": [[19, "daft-dataframe-explain"]], "daft.DataFrame.explode": [[20, "daft-dataframe-explode"]], "daft.DataFrame.filter": [[21, "daft-dataframe-filter"]], "daft.DataFrame.groupby": [[22, "daft-dataframe-groupby"]], "daft.DataFrame.into_partitions": [[23, "daft-dataframe-into-partitions"]], "daft.DataFrame.iter_partitions": [[24, "daft-dataframe-iter-partitions"]], "daft.DataFrame.iter_rows": [[25, "daft-dataframe-iter-rows"]], "daft.DataFrame.join": [[26, "daft-dataframe-join"]], "daft.DataFrame.limit": [[27, "daft-dataframe-limit"]], "daft.DataFrame.max": [[28, "daft-dataframe-max"]], "daft.DataFrame.mean": [[29, "daft-dataframe-mean"]], "daft.DataFrame.melt": [[30, "daft-dataframe-melt"]], "daft.DataFrame.min": [[31, "daft-dataframe-min"]], "daft.DataFrame.pivot": [[32, "daft-dataframe-pivot"]], "daft.DataFrame.repartition": [[33, "daft-dataframe-repartition"]], "daft.DataFrame.sample": [[34, "daft-dataframe-sample"]], "daft.DataFrame.schema": [[35, "daft-dataframe-schema"]], "daft.DataFrame.select": [[36, "daft-dataframe-select"]], "daft.DataFrame.show": [[37, "daft-dataframe-show"]], "daft.DataFrame.sort": [[38, "daft-dataframe-sort"]], "daft.DataFrame.stddev": [[39, "daft-dataframe-stddev"]], "daft.DataFrame.sum": [[40, "daft-dataframe-sum"]], "daft.DataFrame.to_arrow": [[41, "daft-dataframe-to-arrow"]], "daft.DataFrame.to_dask_dataframe": [[42, "daft-dataframe-to-dask-dataframe"]], "daft.DataFrame.to_pandas": [[43, "daft-dataframe-to-pandas"]], "daft.DataFrame.to_pydict": [[44, "daft-dataframe-to-pydict"]], "daft.DataFrame.to_pylist": [[45, "daft-dataframe-to-pylist"]], "daft.DataFrame.to_ray_dataset": [[46, "daft-dataframe-to-ray-dataset"]], "daft.DataFrame.to_torch_iter_dataset": [[47, "daft-dataframe-to-torch-iter-dataset"]], "daft.DataFrame.to_torch_map_dataset": [[48, "daft-dataframe-to-torch-map-dataset"]], "daft.DataFrame.transform": [[49, "daft-dataframe-transform"]], "daft.DataFrame.unpivot": [[50, "daft-dataframe-unpivot"]], "daft.DataFrame.where": [[51, "daft-dataframe-where"]], "daft.DataFrame.with_column": [[52, "daft-dataframe-with-column"]], "daft.DataFrame.with_columns": [[53, "daft-dataframe-with-columns"]], "daft.DataFrame.write_csv": [[54, "daft-dataframe-write-csv"]], "daft.DataFrame.write_deltalake": [[55, "daft-dataframe-write-deltalake"]], "daft.DataFrame.write_iceberg": [[56, "daft-dataframe-write-iceberg"]], "daft.DataFrame.write_parquet": [[57, "daft-dataframe-write-parquet"]], "daft.Expression.__abs__": [[58, "daft-expression-abs"]], "daft.Expression.__add__": [[59, "daft-expression-add"]], "daft.Expression.__and__": [[60, "daft-expression-and"]], "daft.Expression.__eq__": [[61, "daft-expression-eq"]], "daft.Expression.__ge__": [[62, "daft-expression-ge"]], "daft.Expression.__gt__": [[63, "daft-expression-gt"]], "daft.Expression.__invert__": [[64, "daft-expression-invert"]], "daft.Expression.__le__": [[65, "daft-expression-le"]], "daft.Expression.__lshift__": [[66, "daft-expression-lshift"]], "daft.Expression.__lt__": [[67, "daft-expression-lt"]], "daft.Expression.__mod__": [[68, "daft-expression-mod"]], "daft.Expression.__mul__": [[69, "daft-expression-mul"]], "daft.Expression.__ne__": [[70, "daft-expression-ne"]], "daft.Expression.__or__": [[71, "daft-expression-or"]], "daft.Expression.__rshift__": [[72, "daft-expression-rshift"]], "daft.Expression.__sub__": [[73, "daft-expression-sub"]], "daft.Expression.__truediv__": [[74, "daft-expression-truediv"]], "daft.Expression.agg_concat": [[75, "daft-expression-agg-concat"]], "daft.Expression.agg_list": [[76, "daft-expression-agg-list"]], "daft.Expression.alias": [[77, "daft-expression-alias"]], "daft.Expression.any_value": [[78, "daft-expression-any-value"]], "daft.Expression.apply": [[79, "daft-expression-apply"]], "daft.Expression.approx_count_distinct": [[80, "daft-expression-approx-count-distinct"]], "daft.Expression.approx_percentiles": [[81, "daft-expression-approx-percentiles"]], "daft.Expression.arccos": [[82, "daft-expression-arccos"]], "daft.Expression.arccosh": [[83, "daft-expression-arccosh"]], "daft.Expression.arcsin": [[84, "daft-expression-arcsin"]], "daft.Expression.arcsinh": [[85, "daft-expression-arcsinh"]], "daft.Expression.arctan": [[86, "daft-expression-arctan"]], "daft.Expression.arctan2": [[87, "daft-expression-arctan2"]], "daft.Expression.arctanh": [[88, "daft-expression-arctanh"]], "daft.Expression.between": [[89, "daft-expression-between"]], "daft.Expression.binary.concat": [[90, "daft-expression-binary-concat"]], "daft.Expression.binary.length": [[91, "daft-expression-binary-length"]], "daft.Expression.binary.slice": [[92, "daft-expression-binary-slice"]], "daft.Expression.cast": [[93, "daft-expression-cast"]], "daft.Expression.cbrt": [[94, "daft-expression-cbrt"]], "daft.Expression.ceil": [[95, "daft-expression-ceil"]], "daft.Expression.clip": [[96, "daft-expression-clip"]], "daft.Expression.cos": [[97, "daft-expression-cos"]], "daft.Expression.cot": [[98, "daft-expression-cot"]], "daft.Expression.count": [[99, "daft-expression-count"]], "daft.Expression.degrees": [[100, "daft-expression-degrees"]], "daft.Expression.dt.date": [[101, "daft-expression-dt-date"]], "daft.Expression.dt.day": [[102, "daft-expression-dt-day"]], "daft.Expression.dt.day_of_week": [[103, "daft-expression-dt-day-of-week"]], "daft.Expression.dt.hour": [[104, "daft-expression-dt-hour"]], "daft.Expression.dt.minute": [[105, "daft-expression-dt-minute"]], "daft.Expression.dt.month": [[106, "daft-expression-dt-month"]], "daft.Expression.dt.second": [[107, "daft-expression-dt-second"]], "daft.Expression.dt.time": [[108, "daft-expression-dt-time"]], "daft.Expression.dt.truncate": [[109, "daft-expression-dt-truncate"]], "daft.Expression.dt.year": [[110, "daft-expression-dt-year"]], "daft.Expression.embedding.cosine_distance": [[111, "daft-expression-embedding-cosine-distance"]], "daft.Expression.eq_null_safe": [[112, "daft-expression-eq-null-safe"]], "daft.Expression.exp": [[113, "daft-expression-exp"]], "daft.Expression.fill_null": [[114, "daft-expression-fill-null"]], "daft.Expression.float.fill_nan": [[115, "daft-expression-float-fill-nan"]], "daft.Expression.float.is_inf": [[116, "daft-expression-float-is-inf"]], "daft.Expression.float.is_nan": [[117, "daft-expression-float-is-nan"]], "daft.Expression.float.not_nan": [[118, "daft-expression-float-not-nan"]], "daft.Expression.floor": [[119, "daft-expression-floor"]], "daft.Expression.hash": [[120, "daft-expression-hash"]], "daft.Expression.if_else": [[121, "daft-expression-if-else"]], "daft.Expression.image.crop": [[122, "daft-expression-image-crop"]], "daft.Expression.image.decode": [[123, "daft-expression-image-decode"]], "daft.Expression.image.encode": [[124, "daft-expression-image-encode"]], "daft.Expression.image.resize": [[125, "daft-expression-image-resize"]], "daft.Expression.image.to_mode": [[126, "daft-expression-image-to-mode"]], "daft.Expression.is_in": [[127, "daft-expression-is-in"]], "daft.Expression.is_null": [[128, "daft-expression-is-null"]], "daft.Expression.json.query": [[129, "daft-expression-json-query"]], "daft.Expression.list.chunk": [[130, "daft-expression-list-chunk"]], "daft.Expression.list.count": [[131, "daft-expression-list-count"]], "daft.Expression.list.get": [[132, "daft-expression-list-get"]], "daft.Expression.list.join": [[133, "daft-expression-list-join"]], "daft.Expression.list.length": [[134, "daft-expression-list-length"]], "daft.Expression.list.max": [[135, "daft-expression-list-max"]], "daft.Expression.list.mean": [[136, "daft-expression-list-mean"]], "daft.Expression.list.min": [[137, "daft-expression-list-min"]], "daft.Expression.list.slice": [[138, "daft-expression-list-slice"]], "daft.Expression.list.sort": [[139, "daft-expression-list-sort"]], "daft.Expression.list.sum": [[140, "daft-expression-list-sum"]], "daft.Expression.list.value_counts": [[141, "daft-expression-list-value-counts"]], "daft.Expression.ln": [[142, "daft-expression-ln"]], "daft.Expression.log": [[143, "daft-expression-log"]], "daft.Expression.log10": [[144, "daft-expression-log10"]], "daft.Expression.log2": [[145, "daft-expression-log2"]], "daft.Expression.map.get": [[146, "daft-expression-map-get"]], "daft.Expression.max": [[147, "daft-expression-max"]], "daft.Expression.mean": [[148, "daft-expression-mean"]], "daft.Expression.min": [[149, "daft-expression-min"]], "daft.Expression.minhash": [[150, "daft-expression-minhash"]], "daft.Expression.not_null": [[151, "daft-expression-not-null"]], "daft.Expression.partitioning.days": [[152, "daft-expression-partitioning-days"]], "daft.Expression.partitioning.hours": [[153, "daft-expression-partitioning-hours"]], "daft.Expression.partitioning.iceberg_bucket": [[154, "daft-expression-partitioning-iceberg-bucket"]], "daft.Expression.partitioning.iceberg_truncate": [[155, "daft-expression-partitioning-iceberg-truncate"]], "daft.Expression.partitioning.months": [[156, "daft-expression-partitioning-months"]], "daft.Expression.partitioning.years": [[157, "daft-expression-partitioning-years"]], "daft.Expression.radians": [[158, "daft-expression-radians"]], "daft.Expression.round": [[159, "daft-expression-round"]], "daft.Expression.shift_left": [[160, "daft-expression-shift-left"]], "daft.Expression.shift_right": [[161, "daft-expression-shift-right"]], "daft.Expression.sign": [[162, "daft-expression-sign"]], "daft.Expression.sin": [[163, "daft-expression-sin"]], "daft.Expression.sqrt": [[164, "daft-expression-sqrt"]], "daft.Expression.stddev": [[165, "daft-expression-stddev"]], "daft.Expression.str.capitalize": [[166, "daft-expression-str-capitalize"]], "daft.Expression.str.concat": [[167, "daft-expression-str-concat"]], "daft.Expression.str.contains": [[168, "daft-expression-str-contains"]], "daft.Expression.str.count_matches": [[169, "daft-expression-str-count-matches"]], "daft.Expression.str.endswith": [[170, "daft-expression-str-endswith"]], "daft.Expression.str.extract": [[171, "daft-expression-str-extract"]], "daft.Expression.str.extract_all": [[172, "daft-expression-str-extract-all"]], "daft.Expression.str.find": [[173, "daft-expression-str-find"]], "daft.Expression.str.ilike": [[174, "daft-expression-str-ilike"]], "daft.Expression.str.left": [[175, "daft-expression-str-left"]], "daft.Expression.str.length": [[176, "daft-expression-str-length"]], "daft.Expression.str.length_bytes": [[177, "daft-expression-str-length-bytes"]], "daft.Expression.str.like": [[178, "daft-expression-str-like"]], "daft.Expression.str.lower": [[179, "daft-expression-str-lower"]], "daft.Expression.str.lpad": [[180, "daft-expression-str-lpad"]], "daft.Expression.str.lstrip": [[181, "daft-expression-str-lstrip"]], "daft.Expression.str.match": [[182, "daft-expression-str-match"]], "daft.Expression.str.normalize": [[183, "daft-expression-str-normalize"]], "daft.Expression.str.repeat": [[184, "daft-expression-str-repeat"]], "daft.Expression.str.replace": [[185, "daft-expression-str-replace"]], "daft.Expression.str.reverse": [[186, "daft-expression-str-reverse"]], "daft.Expression.str.right": [[187, "daft-expression-str-right"]], "daft.Expression.str.rpad": [[188, "daft-expression-str-rpad"]], "daft.Expression.str.rstrip": [[189, "daft-expression-str-rstrip"]], "daft.Expression.str.split": [[190, "daft-expression-str-split"]], "daft.Expression.str.startswith": [[191, "daft-expression-str-startswith"]], "daft.Expression.str.substr": [[192, "daft-expression-str-substr"]], "daft.Expression.str.to_date": [[193, "daft-expression-str-to-date"]], "daft.Expression.str.to_datetime": [[194, "daft-expression-str-to-datetime"]], "daft.Expression.str.tokenize_decode": [[195, "daft-expression-str-tokenize-decode"]], "daft.Expression.str.tokenize_encode": [[196, "daft-expression-str-tokenize-encode"]], "daft.Expression.str.upper": [[197, "daft-expression-str-upper"]], "daft.Expression.struct.get": [[198, "daft-expression-struct-get"]], "daft.Expression.sum": [[199, "daft-expression-sum"]], "daft.Expression.tan": [[200, "daft-expression-tan"]], "daft.Expression.url.download": [[201, "daft-expression-url-download"]], "daft.col": [[202, "daft-col"]], "daft.lit": [[203, "daft-lit"]], "daft.to_struct": [[204, "daft-to-struct"]], "daft.io.AzureConfig": [[205, "daft-io-azureconfig"]], "daft.io.GCSConfig": [[206, "daft-io-gcsconfig"]], "daft.io.IOConfig": [[207, "daft-io-ioconfig"]], "daft.io.S3Config": [[208, "daft-io-s3config"]], "daft.io.S3Credentials": [[209, "daft-io-s3credentials"]], "daft.from_arrow": [[210, "daft-from-arrow"]], "daft.from_dask_dataframe": [[211, "daft-from-dask-dataframe"]], "daft.from_glob_path": [[212, "daft-from-glob-path"]], "daft.from_pandas": [[213, "daft-from-pandas"]], "daft.from_pydict": [[214, "daft-from-pydict"]], "daft.from_pylist": [[215, "daft-from-pylist"]], "daft.from_ray_dataset": [[216, "daft-from-ray-dataset"]], "daft.read_csv": [[217, "daft-read-csv"]], "daft.read_deltalake": [[218, "daft-read-deltalake"]], "daft.read_hudi": [[219, "daft-read-hudi"]], "daft.read_iceberg": [[220, "daft-read-iceberg"]], "daft.read_json": [[221, "daft-read-json"]], "daft.read_lance": [[222, "daft-read-lance"]], "daft.read_parquet": [[223, "daft-read-parquet"]], "daft.read_sql": [[224, "daft-read-sql"]], "daft.ImageFormat": [[225, "daft-imageformat"]], "daft.ImageMode": [[226, "daft-imagemode"]], "AzureConfig": [[227, "azureconfig"]], "GCSConfig": [[228, "gcsconfig"]], "HTTPConfig": [[229, "httpconfig"]], "S3Config": [[230, "s3config"]], "abs": [[231, "abs"]], "acos": [[232, "acos"]], "acosh": [[233, "acosh"]], "array_to_string": [[234, "array-to-string"]], "asin": [[235, "asin"]], "asinh": [[236, "asinh"]], "atan": [[237, "atan"]], "atan2": [[238, "atan2"]], "atanh": [[239, "atanh"]], "avg": [[240, "avg"]], "capitalize": [[241, "capitalize"]], "ceil": [[242, "ceil"]], "clip": [[243, "clip"]], "coalesce": [[244, "coalesce"]], "concat": [[245, "concat"]], "contains": [[246, "contains"]], "cos": [[247, "cos"]], "cot": [[248, "cot"]], "count": [[249, "count"]], "count_distinct": [[250, "count-distinct"]], "count_matches": [[251, "count-matches"]], "date": [[252, "date"]], "day": [[253, "day"]], "dayofweek": [[254, "dayofweek"]], "degrees": [[255, "degrees"]], "ends_with": [[256, "ends-with"]], "exp": [[257, "exp"]], "explode": [[258, "explode"]], "fill_nan": [[259, "fill-nan"]], "find": [[260, "find"]], "floor": [[261, "floor"]], "hash": [[262, "hash"]], "hour": [[263, "hour"]], "image_crop": [[264, "image-crop"]], "image_decode": [[265, "image-decode"]], "image_encode": [[266, "image-encode"]], "image_resize": [[267, "image-resize"]], "image_to_mode": [[268, "image-to-mode"]], "is_inf": [[269, "is-inf"]], "is_nan": [[270, "is-nan"]], "json_query": [[271, "json-query"]], "left": [[272, "left"]], "length": [[273, "length"]], "length_bytes": [[274, "length-bytes"]], "list_chunk": [[275, "list-chunk"]], "list_count": [[276, "list-count"]], "list_join": [[277, "list-join"]], "list_max": [[278, "list-max"]], "list_mean": [[279, "list-mean"]], "list_min": [[280, "list-min"]], "list_slice": [[281, "list-slice"]], "list_sort": [[282, "list-sort"]], "list_sum": [[283, "list-sum"]], "ln": [[284, "ln"]], "log": [[285, "log"]], "log10": [[286, "log10"]], "log2": [[287, "log2"]], "lower": [[288, "lower"]], "lpad": [[289, "lpad"]], "lstrip": [[290, "lstrip"]], "map_extract": [[291, "map-extract"]], "map_get": [[292, "map-get"]], "max": [[293, "max"]], "mean": [[294, "mean"]], "min": [[295, "min"]], "minhash": [[296, "minhash"]], "minute": [[297, "minute"]], "month": [[298, "month"]], "normalize": [[299, "normalize"]], "not_nan": [[300, "not-nan"]], "partitioning_days": [[301, "partitioning-days"]], "partitioning_hours": [[302, "partitioning-hours"]], "partitioning_iceberg_bucket": [[303, "partitioning-iceberg-bucket"]], "partitioning_iceberg_truncate": [[304, "partitioning-iceberg-truncate"]], "partitioning_months": [[305, "partitioning-months"]], "partitioning_years": [[306, "partitioning-years"]], "radians": [[307, "radians"]], "regexp_extract": [[308, "regexp-extract"]], "regexp_extract_all": [[309, "regexp-extract-all"]], "regexp_match": [[310, "regexp-match"]], "regexp_replace": [[311, "regexp-replace"]], "regexp_split": [[312, "regexp-split"]], "repeat": [[313, "repeat"]], "reverse": [[314, "reverse"]], "right": [[315, "right"]], "round": [[316, "round"]], "rpad": [[317, "rpad"]], "rstrip": [[318, "rstrip"]], "second": [[319, "second"]], "sign": [[320, "sign"]], "sin": [[321, "sin"]], "split": [[322, "split"]], "sqrt": [[323, "sqrt"]], "starts_with": [[324, "starts-with"]], "stddev": [[325, "stddev"]], "stddev_samp": [[326, "stddev-samp"]], "struct_extract": [[327, "struct-extract"]], "struct_get": [[328, "struct-get"]], "sum": [[329, "sum"]], "tan": [[330, "tan"]], "time": [[331, "time"]], "to_date": [[332, "to-date"]], "to_datetime": [[333, "to-datetime"]], "tokenize_decode": [[334, "tokenize-decode"]], "tokenize_encode": [[335, "tokenize-encode"]], "unnest": [[336, "unnest"]], "upper": [[337, "upper"]], "url_download": [[338, "url-download"]], "url_upload": [[339, "url-upload"]], "year": [[340, "year"]], "Expressions": [[341, "expressions"]], "Constructors": [[341, "constructors"]], "Generic": [[341, "generic"]], "Numeric": [[341, "numeric"]], "Logical": [[341, "logical"]], "Aggregation": [[341, "aggregation"]], "Strings": [[341, "strings"]], "Binary": [[341, "binary"]], "Floats": [[341, "floats"]], "Temporal": [[341, "temporal"]], "List": [[341, "list"]], "Struct": [[341, "struct"]], "Map": [[341, "map"]], "Image": [[341, "image"]], "Partitioning": [[341, "partitioning"]], "URLs": [[341, "urls"]], "Embedding": [[341, "embedding"]], "GroupBy": [[342, "groupby"]], "API Documentation": [[343, "api-documentation"]], "Miscellaneous": [[344, "miscellaneous"]], "Types": [[344, "types"]], "Image Types": [[344, "image-types"]], "Schema": [[345, "schema"]], "Series": [[346, "series"]], "SQL": [[347, "sql"]], "SQL Functions": [[347, "sql-functions"]], "User Defined Functions (UDFs)": [[348, "user-defined-functions-udfs"]], "Creating UDFs": [[348, "creating-udfs"]], "Resource Requests": [[348, "resource-requests"]], "Using UDFs": [[348, "using-udfs"]]}, "indexentries": {"datatype (class in daft)": [[3, "daft.DataType"]], "binary() (datatype class method)": [[3, "daft.DataType.binary"]], "bool() (datatype class method)": [[3, "daft.DataType.bool"]], "date() (datatype class method)": [[3, "daft.DataType.date"]], "decimal128() (datatype class method)": [[3, "daft.DataType.decimal128"]], "duration() (datatype class method)": [[3, "daft.DataType.duration"]], "embedding() (datatype class method)": [[3, "daft.DataType.embedding"]], "fixed_size_binary() (datatype class method)": [[3, "daft.DataType.fixed_size_binary"]], "fixed_size_list() (datatype class method)": [[3, "daft.DataType.fixed_size_list"]], "float32() (datatype class method)": [[3, "daft.DataType.float32"]], "float64() (datatype class method)": [[3, "daft.DataType.float64"]], "from_arrow_type() (datatype class method)": [[3, "daft.DataType.from_arrow_type"]], "from_numpy_dtype() (datatype class method)": [[3, "daft.DataType.from_numpy_dtype"]], "image() (datatype class method)": [[3, "daft.DataType.image"]], "int16() (datatype class method)": [[3, "daft.DataType.int16"]], "int32() (datatype class method)": [[3, "daft.DataType.int32"]], "int64() (datatype class method)": [[3, "daft.DataType.int64"]], "int8() (datatype class method)": [[3, "daft.DataType.int8"]], "interval() (datatype class method)": [[3, "daft.DataType.interval"]], "list() (datatype class method)": [[3, "daft.DataType.list"]], "map() (datatype class method)": [[3, "daft.DataType.map"]], "null() (datatype class method)": [[3, "daft.DataType.null"]], "python() (datatype class method)": [[3, "daft.DataType.python"]], "sparse_tensor() (datatype class method)": [[3, "daft.DataType.sparse_tensor"]], "string() (datatype class method)": [[3, "daft.DataType.string"]], "struct() (datatype class method)": [[3, "daft.DataType.struct"]], "tensor() (datatype class method)": [[3, "daft.DataType.tensor"]], "time() (datatype class method)": [[3, "daft.DataType.time"]], "timestamp() (datatype class method)": [[3, "daft.DataType.timestamp"]], "uint16() (datatype class method)": [[3, "daft.DataType.uint16"]], "uint32() (datatype class method)": [[3, "daft.DataType.uint32"]], "uint64() (datatype class method)": [[3, "daft.DataType.uint64"]], "uint8() (datatype class method)": [[3, "daft.DataType.uint8"]], "set_runner_py() (in module daft.context)": [[4, "daft.context.set_runner_py"]], "set_runner_ray() (in module daft.context)": [[5, "daft.context.set_runner_ray"]], "execution_config_ctx() (in module daft)": [[6, "daft.execution_config_ctx"]], "planning_config_ctx() (in module daft)": [[7, "daft.planning_config_ctx"]], "set_execution_config() (in module daft)": [[8, "daft.set_execution_config"]], "set_planning_config() (in module daft)": [[9, "daft.set_planning_config"]], "dataframe (class in daft)": [[10, "daft.DataFrame"]], "__init__() (dataframe method)": [[10, "daft.DataFrame.__init__"]], "__getitem__() (dataframe method)": [[11, "daft.DataFrame.__getitem__"]], "agg() (dataframe method)": [[12, "daft.DataFrame.agg"]], "collect() (dataframe method)": [[13, "daft.DataFrame.collect"]], "column_names (dataframe property)": [[14, "daft.DataFrame.column_names"]], "concat() (dataframe method)": [[15, "daft.DataFrame.concat"]], "count() (dataframe method)": [[16, "daft.DataFrame.count"]], "distinct() (dataframe method)": [[17, "daft.DataFrame.distinct"]], "exclude() (dataframe method)": [[18, "daft.DataFrame.exclude"]], "explain() (dataframe method)": [[19, "daft.DataFrame.explain"]], "explode() (dataframe method)": [[20, "daft.DataFrame.explode"]], "filter() (dataframe method)": [[21, "daft.DataFrame.filter"]], "groupby() (dataframe method)": [[22, "daft.DataFrame.groupby"]], "into_partitions() (dataframe method)": [[23, "daft.DataFrame.into_partitions"]], "iter_partitions() (dataframe method)": [[24, "daft.DataFrame.iter_partitions"]], "iter_rows() (dataframe method)": [[25, "daft.DataFrame.iter_rows"]], "join() (dataframe method)": [[26, "daft.DataFrame.join"]], "limit() (dataframe method)": [[27, "daft.DataFrame.limit"]], "max() (dataframe method)": [[28, "daft.DataFrame.max"]], "mean() (dataframe method)": [[29, "daft.DataFrame.mean"]], "melt() (dataframe method)": [[30, "daft.DataFrame.melt"]], "min() (dataframe method)": [[31, "daft.DataFrame.min"]], "pivot() (dataframe method)": [[32, "daft.DataFrame.pivot"]], "repartition() (dataframe method)": [[33, "daft.DataFrame.repartition"]], "sample() (dataframe method)": [[34, "daft.DataFrame.sample"]], "schema() (dataframe method)": [[35, "daft.DataFrame.schema"]], "select() (dataframe method)": [[36, "daft.DataFrame.select"]], "show() (dataframe method)": [[37, "daft.DataFrame.show"]], "sort() (dataframe method)": [[38, "daft.DataFrame.sort"]], "stddev() (dataframe method)": [[39, "daft.DataFrame.stddev"]], "sum() (dataframe method)": [[40, "daft.DataFrame.sum"]], "to_arrow() (dataframe method)": [[41, "daft.DataFrame.to_arrow"]], "to_dask_dataframe() (dataframe method)": [[42, "daft.DataFrame.to_dask_dataframe"]], "to_pandas() (dataframe method)": [[43, "daft.DataFrame.to_pandas"]], "to_pydict() (dataframe method)": [[44, "daft.DataFrame.to_pydict"]], "to_pylist() (dataframe method)": [[45, "daft.DataFrame.to_pylist"]], "to_ray_dataset() (dataframe method)": [[46, "daft.DataFrame.to_ray_dataset"]], "to_torch_iter_dataset() (dataframe method)": [[47, "daft.DataFrame.to_torch_iter_dataset"]], "to_torch_map_dataset() (dataframe method)": [[48, "daft.DataFrame.to_torch_map_dataset"]], "transform() (dataframe method)": [[49, "daft.DataFrame.transform"]], "unpivot() (dataframe method)": [[50, "daft.DataFrame.unpivot"]], "where() (dataframe method)": [[51, "daft.DataFrame.where"]], "with_column() (dataframe method)": [[52, "daft.DataFrame.with_column"]], "with_columns() (dataframe method)": [[53, "daft.DataFrame.with_columns"]], "write_csv() (dataframe method)": [[54, "daft.DataFrame.write_csv"]], "write_deltalake() (dataframe method)": [[55, "daft.DataFrame.write_deltalake"]], "write_iceberg() (dataframe method)": [[56, "daft.DataFrame.write_iceberg"]], "write_parquet() (dataframe method)": [[57, "daft.DataFrame.write_parquet"]], "__abs__() (expression method)": [[58, "daft.Expression.__abs__"]], "__add__() (expression method)": [[59, "daft.Expression.__add__"]], "__and__() (expression method)": [[60, "daft.Expression.__and__"]], "__eq__() (expression method)": [[61, "daft.Expression.__eq__"]], "__ge__() (expression method)": [[62, "daft.Expression.__ge__"]], "__gt__() (expression method)": [[63, "daft.Expression.__gt__"]], "__invert__() (expression method)": [[64, "daft.Expression.__invert__"]], "__le__() (expression method)": [[65, "daft.Expression.__le__"]], "__lshift__() (expression method)": [[66, "daft.Expression.__lshift__"]], "__lt__() (expression method)": [[67, "daft.Expression.__lt__"]], "__mod__() (expression method)": [[68, "daft.Expression.__mod__"]], "__mul__() (expression method)": [[69, "daft.Expression.__mul__"]], "__ne__() (expression method)": [[70, "daft.Expression.__ne__"]], "__or__() (expression method)": [[71, "daft.Expression.__or__"]], "__rshift__() (expression method)": [[72, "daft.Expression.__rshift__"]], "__sub__() (expression method)": [[73, "daft.Expression.__sub__"]], "__truediv__() (expression method)": [[74, "daft.Expression.__truediv__"]], "agg_concat() (expression method)": [[75, "daft.Expression.agg_concat"]], "agg_list() (expression method)": [[76, "daft.Expression.agg_list"]], "alias() (expression method)": [[77, "daft.Expression.alias"]], "any_value() (expression method)": [[78, "daft.Expression.any_value"]], "apply() (expression method)": [[79, "daft.Expression.apply"]], "approx_count_distinct() (expression method)": [[80, "daft.Expression.approx_count_distinct"]], "approx_percentiles() (expression method)": [[81, "daft.Expression.approx_percentiles"]], "arccos() (expression method)": [[82, "daft.Expression.arccos"]], "arccosh() (expression method)": [[83, "daft.Expression.arccosh"]], "arcsin() (expression method)": [[84, "daft.Expression.arcsin"]], "arcsinh() (expression method)": [[85, "daft.Expression.arcsinh"]], "arctan() (expression method)": [[86, "daft.Expression.arctan"]], "arctan2() (expression method)": [[87, "daft.Expression.arctan2"]], "arctanh() (expression method)": [[88, "daft.Expression.arctanh"]], "between() (expression method)": [[89, "daft.Expression.between"]], "concat() (expression.binary method)": [[90, "daft.Expression.binary.concat"]], "length() (expression.binary method)": [[91, "daft.Expression.binary.length"]], "slice() (expression.binary method)": [[92, "daft.Expression.binary.slice"]], "cast() (expression method)": [[93, "daft.Expression.cast"]], "cbrt() (expression method)": [[94, "daft.Expression.cbrt"]], "ceil() (expression method)": [[95, "daft.Expression.ceil"]], "clip() (expression method)": [[96, "daft.Expression.clip"]], "cos() (expression method)": [[97, "daft.Expression.cos"]], "cot() (expression method)": [[98, "daft.Expression.cot"]], "count() (expression method)": [[99, "daft.Expression.count"]], "degrees() (expression method)": [[100, "daft.Expression.degrees"]], "date() (expression.dt method)": [[101, "daft.Expression.dt.date"]], "day() (expression.dt method)": [[102, "daft.Expression.dt.day"]], "day_of_week() (expression.dt method)": [[103, "daft.Expression.dt.day_of_week"]], "hour() (expression.dt method)": [[104, "daft.Expression.dt.hour"]], "minute() (expression.dt method)": [[105, "daft.Expression.dt.minute"]], "month() (expression.dt method)": [[106, "daft.Expression.dt.month"]], "second() (expression.dt method)": [[107, "daft.Expression.dt.second"]], "time() (expression.dt method)": [[108, "daft.Expression.dt.time"]], "truncate() (expression.dt method)": [[109, "daft.Expression.dt.truncate"]], "year() (expression.dt method)": [[110, "daft.Expression.dt.year"]], "cosine_distance() (expression.embedding method)": [[111, "daft.Expression.embedding.cosine_distance"]], "eq_null_safe() (expression method)": [[112, "daft.Expression.eq_null_safe"]], "exp() (expression method)": [[113, "daft.Expression.exp"]], "fill_null() (expression method)": [[114, "daft.Expression.fill_null"]], "fill_nan() (expression.float method)": [[115, "daft.Expression.float.fill_nan"]], "is_inf() (expression.float method)": [[116, "daft.Expression.float.is_inf"]], "is_nan() (expression.float method)": [[117, "daft.Expression.float.is_nan"]], "not_nan() (expression.float method)": [[118, "daft.Expression.float.not_nan"]], "floor() (expression method)": [[119, "daft.Expression.floor"]], "hash() (expression method)": [[120, "daft.Expression.hash"]], "if_else() (expression method)": [[121, "daft.Expression.if_else"]], "crop() (expression.image method)": [[122, "daft.Expression.image.crop"]], "decode() (expression.image method)": [[123, "daft.Expression.image.decode"]], "encode() (expression.image method)": [[124, "daft.Expression.image.encode"]], "resize() (expression.image method)": [[125, "daft.Expression.image.resize"]], "to_mode() (expression.image method)": [[126, "daft.Expression.image.to_mode"]], "is_in() (expression method)": [[127, "daft.Expression.is_in"]], "is_null() (expression method)": [[128, "daft.Expression.is_null"]], "query() (expression.json method)": [[129, "daft.Expression.json.query"]], "chunk() (expression.list method)": [[130, "daft.Expression.list.chunk"]], "count() (expression.list method)": [[131, "daft.Expression.list.count"]], "get() (expression.list method)": [[132, "daft.Expression.list.get"]], "join() (expression.list method)": [[133, "daft.Expression.list.join"]], "length() (expression.list method)": [[134, "daft.Expression.list.length"]], "max() (expression.list method)": [[135, "daft.Expression.list.max"]], "mean() (expression.list method)": [[136, "daft.Expression.list.mean"]], "min() (expression.list method)": [[137, "daft.Expression.list.min"]], "slice() (expression.list method)": [[138, "daft.Expression.list.slice"]], "sort() (expression.list method)": [[139, "daft.Expression.list.sort"]], "sum() (expression.list method)": [[140, "daft.Expression.list.sum"]], "value_counts() (expression.list method)": [[141, "daft.Expression.list.value_counts"]], "ln() (expression method)": [[142, "daft.Expression.ln"]], "log() (expression method)": [[143, "daft.Expression.log"]], "log10() (expression method)": [[144, "daft.Expression.log10"]], "log2() (expression method)": [[145, "daft.Expression.log2"]], "get() (expression.map method)": [[146, "daft.Expression.map.get"]], "max() (expression method)": [[147, "daft.Expression.max"]], "mean() (expression method)": [[148, "daft.Expression.mean"]], "min() (expression method)": [[149, "daft.Expression.min"]], "minhash() (expression method)": [[150, "daft.Expression.minhash"]], "not_null() (expression method)": [[151, "daft.Expression.not_null"]], "days() (expression.partitioning method)": [[152, "daft.Expression.partitioning.days"]], "hours() (expression.partitioning method)": [[153, "daft.Expression.partitioning.hours"]], "iceberg_bucket() (expression.partitioning method)": [[154, "daft.Expression.partitioning.iceberg_bucket"]], "iceberg_truncate() (expression.partitioning method)": [[155, "daft.Expression.partitioning.iceberg_truncate"]], "months() (expression.partitioning method)": [[156, "daft.Expression.partitioning.months"]], "years() (expression.partitioning method)": [[157, "daft.Expression.partitioning.years"]], "radians() (expression method)": [[158, "daft.Expression.radians"]], "round() (expression method)": [[159, "daft.Expression.round"]], "shift_left() (expression method)": [[160, "daft.Expression.shift_left"]], "shift_right() (expression method)": [[161, "daft.Expression.shift_right"]], "sign() (expression method)": [[162, "daft.Expression.sign"]], "sin() (expression method)": [[163, "daft.Expression.sin"]], "sqrt() (expression method)": [[164, "daft.Expression.sqrt"]], "stddev() (expression method)": [[165, "daft.Expression.stddev"]], "capitalize() (expression.str method)": [[166, "daft.Expression.str.capitalize"]], "concat() (expression.str method)": [[167, "daft.Expression.str.concat"]], "contains() (expression.str method)": [[168, "daft.Expression.str.contains"]], "count_matches() (expression.str method)": [[169, "daft.Expression.str.count_matches"]], "endswith() (expression.str method)": [[170, "daft.Expression.str.endswith"]], "extract() (expression.str method)": [[171, "daft.Expression.str.extract"]], "extract_all() (expression.str method)": [[172, "daft.Expression.str.extract_all"]], "find() (expression.str method)": [[173, "daft.Expression.str.find"]], "ilike() (expression.str method)": [[174, "daft.Expression.str.ilike"]], "left() (expression.str method)": [[175, "daft.Expression.str.left"]], "length() (expression.str method)": [[176, "daft.Expression.str.length"]], "length_bytes() (expression.str method)": [[177, "daft.Expression.str.length_bytes"]], "like() (expression.str method)": [[178, "daft.Expression.str.like"]], "lower() (expression.str method)": [[179, "daft.Expression.str.lower"]], "lpad() (expression.str method)": [[180, "daft.Expression.str.lpad"]], "lstrip() (expression.str method)": [[181, "daft.Expression.str.lstrip"]], "match() (expression.str method)": [[182, "daft.Expression.str.match"]], "normalize() (expression.str method)": [[183, "daft.Expression.str.normalize"]], "repeat() (expression.str method)": [[184, "daft.Expression.str.repeat"]], "replace() (expression.str method)": [[185, "daft.Expression.str.replace"]], "reverse() (expression.str method)": [[186, "daft.Expression.str.reverse"]], "right() (expression.str method)": [[187, "daft.Expression.str.right"]], "rpad() (expression.str method)": [[188, "daft.Expression.str.rpad"]], "rstrip() (expression.str method)": [[189, "daft.Expression.str.rstrip"]], "split() (expression.str method)": [[190, "daft.Expression.str.split"]], "startswith() (expression.str method)": [[191, "daft.Expression.str.startswith"]], "substr() (expression.str method)": [[192, "daft.Expression.str.substr"]], "to_date() (expression.str method)": [[193, "daft.Expression.str.to_date"]], "to_datetime() (expression.str method)": [[194, "daft.Expression.str.to_datetime"]], "tokenize_decode() (expression.str method)": [[195, "daft.Expression.str.tokenize_decode"]], "tokenize_encode() (expression.str method)": [[196, "daft.Expression.str.tokenize_encode"]], "upper() (expression.str method)": [[197, "daft.Expression.str.upper"]], "get() (expression.struct method)": [[198, "daft.Expression.struct.get"]], "sum() (expression method)": [[199, "daft.Expression.sum"]], "tan() (expression method)": [[200, "daft.Expression.tan"]], "download() (expression.url method)": [[201, "daft.Expression.url.download"]], "col() (in module daft)": [[202, "daft.col"]], "lit() (in module daft)": [[203, "daft.lit"]], "to_struct() (in module daft)": [[204, "daft.to_struct"]], "azureconfig (class in daft.io)": [[205, "daft.io.AzureConfig"]], "__init__() (azureconfig method)": [[205, "daft.io.AzureConfig.__init__"]], "gcsconfig (class in daft.io)": [[206, "daft.io.GCSConfig"]], "__init__() (gcsconfig method)": [[206, "daft.io.GCSConfig.__init__"]], "ioconfig (class in daft.io)": [[207, "daft.io.IOConfig"]], "__init__() (ioconfig method)": [[207, "daft.io.IOConfig.__init__"]], "s3config (class in daft.io)": [[208, "daft.io.S3Config"]], "__init__() (s3config method)": [[208, "daft.io.S3Config.__init__"]], "s3credentials (class in daft.io)": [[209, "daft.io.S3Credentials"]], "__init__() (s3credentials method)": [[209, "daft.io.S3Credentials.__init__"]], "from_arrow() (in module daft)": [[210, "daft.from_arrow"]], "from_dask_dataframe() (in module daft)": [[211, "daft.from_dask_dataframe"]], "from_glob_path() (in module daft)": [[212, "daft.from_glob_path"]], "from_pandas() (in module daft)": [[213, "daft.from_pandas"]], "from_pydict() (in module daft)": [[214, "daft.from_pydict"]], "from_pylist() (in module daft)": [[215, "daft.from_pylist"]], "from_ray_dataset() (in module daft)": [[216, "daft.from_ray_dataset"]], "read_csv() (in module daft)": [[217, "daft.read_csv"]], "read_deltalake() (in module daft)": [[218, "daft.read_deltalake"]], "read_hudi() (in module daft)": [[219, "daft.read_hudi"]], "read_iceberg() (in module daft)": [[220, "daft.read_iceberg"]], "read_json() (in module daft)": [[221, "daft.read_json"]], "read_lance() (in module daft)": [[222, "daft.read_lance"]], "read_parquet() (in module daft)": [[223, "daft.read_parquet"]], "read_sql() (in module daft)": [[224, "daft.read_sql"]], "imageformat (class in daft)": [[225, "daft.ImageFormat"]], "__init__() (imageformat method)": [[225, "daft.ImageFormat.__init__"]], "imagemode (class in daft)": [[226, "daft.ImageMode"]], "__init__() (imagemode method)": [[226, "daft.ImageMode.__init__"]], "azureconfig() (in module daft.sql._sql_funcs)": [[227, "daft.sql._sql_funcs.AzureConfig"]], "gcsconfig() (in module daft.sql._sql_funcs)": [[228, "daft.sql._sql_funcs.GCSConfig"]], "httpconfig() (in module daft.sql._sql_funcs)": [[229, "daft.sql._sql_funcs.HTTPConfig"]], "s3config() (in module daft.sql._sql_funcs)": [[230, "daft.sql._sql_funcs.S3Config"]], "abs() (in module daft.sql._sql_funcs)": [[231, "daft.sql._sql_funcs.abs"]], "acos() (in module daft.sql._sql_funcs)": [[232, "daft.sql._sql_funcs.acos"]], "acosh() (in module daft.sql._sql_funcs)": [[233, "daft.sql._sql_funcs.acosh"]], "array_to_string() (in module daft.sql._sql_funcs)": [[234, "daft.sql._sql_funcs.array_to_string"]], "asin() (in module daft.sql._sql_funcs)": [[235, "daft.sql._sql_funcs.asin"]], "asinh() (in module daft.sql._sql_funcs)": [[236, "daft.sql._sql_funcs.asinh"]], "atan() (in module daft.sql._sql_funcs)": [[237, "daft.sql._sql_funcs.atan"]], "atan2() (in module daft.sql._sql_funcs)": [[238, "daft.sql._sql_funcs.atan2"]], "atanh() (in module daft.sql._sql_funcs)": [[239, "daft.sql._sql_funcs.atanh"]], "avg() (in module daft.sql._sql_funcs)": [[240, "daft.sql._sql_funcs.avg"]], "capitalize() (in module daft.sql._sql_funcs)": [[241, "daft.sql._sql_funcs.capitalize"]], "ceil() (in module daft.sql._sql_funcs)": [[242, "daft.sql._sql_funcs.ceil"]], "clip() (in module daft.sql._sql_funcs)": [[243, "daft.sql._sql_funcs.clip"]], "coalesce() (in module daft.sql._sql_funcs)": [[244, "daft.sql._sql_funcs.coalesce"]], "concat() (in module daft.sql._sql_funcs)": [[245, "daft.sql._sql_funcs.concat"]], "contains() (in module daft.sql._sql_funcs)": [[246, "daft.sql._sql_funcs.contains"]], "cos() (in module daft.sql._sql_funcs)": [[247, "daft.sql._sql_funcs.cos"]], "cot() (in module daft.sql._sql_funcs)": [[248, "daft.sql._sql_funcs.cot"]], "count() (in module daft.sql._sql_funcs)": [[249, "daft.sql._sql_funcs.count"]], "count_distinct() (in module daft.sql._sql_funcs)": [[250, "daft.sql._sql_funcs.count_distinct"]], "count_matches() (in module daft.sql._sql_funcs)": [[251, "daft.sql._sql_funcs.count_matches"]], "date() (in module daft.sql._sql_funcs)": [[252, "daft.sql._sql_funcs.date"]], "day() (in module daft.sql._sql_funcs)": [[253, "daft.sql._sql_funcs.day"]], "dayofweek() (in module daft.sql._sql_funcs)": [[254, "daft.sql._sql_funcs.dayofweek"]], "degrees() (in module daft.sql._sql_funcs)": [[255, "daft.sql._sql_funcs.degrees"]], "ends_with() (in module daft.sql._sql_funcs)": [[256, "daft.sql._sql_funcs.ends_with"]], "exp() (in module daft.sql._sql_funcs)": [[257, "daft.sql._sql_funcs.exp"]], "explode() (in module daft.sql._sql_funcs)": [[258, "daft.sql._sql_funcs.explode"]], "fill_nan() (in module daft.sql._sql_funcs)": [[259, "daft.sql._sql_funcs.fill_nan"]], "find() (in module daft.sql._sql_funcs)": [[260, "daft.sql._sql_funcs.find"]], "floor() (in module daft.sql._sql_funcs)": [[261, "daft.sql._sql_funcs.floor"]], "hash() (in module daft.sql._sql_funcs)": [[262, "daft.sql._sql_funcs.hash"]], "hour() (in module daft.sql._sql_funcs)": [[263, "daft.sql._sql_funcs.hour"]], "image_crop() (in module daft.sql._sql_funcs)": [[264, "daft.sql._sql_funcs.image_crop"]], "image_decode() (in module daft.sql._sql_funcs)": [[265, "daft.sql._sql_funcs.image_decode"]], "image_encode() (in module daft.sql._sql_funcs)": [[266, "daft.sql._sql_funcs.image_encode"]], "image_resize() (in module daft.sql._sql_funcs)": [[267, "daft.sql._sql_funcs.image_resize"]], "image_to_mode() (in module daft.sql._sql_funcs)": [[268, "daft.sql._sql_funcs.image_to_mode"]], "is_inf() (in module daft.sql._sql_funcs)": [[269, "daft.sql._sql_funcs.is_inf"]], "is_nan() (in module daft.sql._sql_funcs)": [[270, "daft.sql._sql_funcs.is_nan"]], "json_query() (in module daft.sql._sql_funcs)": [[271, "daft.sql._sql_funcs.json_query"]], "left() (in module daft.sql._sql_funcs)": [[272, "daft.sql._sql_funcs.left"]], "length() (in module daft.sql._sql_funcs)": [[273, "daft.sql._sql_funcs.length"]], "length_bytes() (in module daft.sql._sql_funcs)": [[274, "daft.sql._sql_funcs.length_bytes"]], "list_chunk() (in module daft.sql._sql_funcs)": [[275, "daft.sql._sql_funcs.list_chunk"]], "list_count() (in module daft.sql._sql_funcs)": [[276, "daft.sql._sql_funcs.list_count"]], "list_join() (in module daft.sql._sql_funcs)": [[277, "daft.sql._sql_funcs.list_join"]], "list_max() (in module daft.sql._sql_funcs)": [[278, "daft.sql._sql_funcs.list_max"]], "list_mean() (in module daft.sql._sql_funcs)": [[279, "daft.sql._sql_funcs.list_mean"]], "list_min() (in module daft.sql._sql_funcs)": [[280, "daft.sql._sql_funcs.list_min"]], "list_slice() (in module daft.sql._sql_funcs)": [[281, "daft.sql._sql_funcs.list_slice"]], "list_sort() (in module daft.sql._sql_funcs)": [[282, "daft.sql._sql_funcs.list_sort"]], "list_sum() (in module daft.sql._sql_funcs)": [[283, "daft.sql._sql_funcs.list_sum"]], "ln() (in module daft.sql._sql_funcs)": [[284, "daft.sql._sql_funcs.ln"]], "log() (in module daft.sql._sql_funcs)": [[285, "daft.sql._sql_funcs.log"]], "log10() (in module daft.sql._sql_funcs)": [[286, "daft.sql._sql_funcs.log10"]], "log2() (in module daft.sql._sql_funcs)": [[287, "daft.sql._sql_funcs.log2"]], "lower() (in module daft.sql._sql_funcs)": [[288, "daft.sql._sql_funcs.lower"]], "lpad() (in module daft.sql._sql_funcs)": [[289, "daft.sql._sql_funcs.lpad"]], "lstrip() (in module daft.sql._sql_funcs)": [[290, "daft.sql._sql_funcs.lstrip"]], "map_extract() (in module daft.sql._sql_funcs)": [[291, "daft.sql._sql_funcs.map_extract"]], "map_get() (in module daft.sql._sql_funcs)": [[292, "daft.sql._sql_funcs.map_get"]], "max() (in module daft.sql._sql_funcs)": [[293, "daft.sql._sql_funcs.max"]], "mean() (in module daft.sql._sql_funcs)": [[294, "daft.sql._sql_funcs.mean"]], "min() (in module daft.sql._sql_funcs)": [[295, "daft.sql._sql_funcs.min"]], "minhash() (in module daft.sql._sql_funcs)": [[296, "daft.sql._sql_funcs.minhash"]], "minute() (in module daft.sql._sql_funcs)": [[297, "daft.sql._sql_funcs.minute"]], "month() (in module daft.sql._sql_funcs)": [[298, "daft.sql._sql_funcs.month"]], "normalize() (in module daft.sql._sql_funcs)": [[299, "daft.sql._sql_funcs.normalize"]], "not_nan() (in module daft.sql._sql_funcs)": [[300, "daft.sql._sql_funcs.not_nan"]], "partitioning_days() (in module daft.sql._sql_funcs)": [[301, "daft.sql._sql_funcs.partitioning_days"]], "partitioning_hours() (in module daft.sql._sql_funcs)": [[302, "daft.sql._sql_funcs.partitioning_hours"]], "partitioning_iceberg_bucket() (in module daft.sql._sql_funcs)": [[303, "daft.sql._sql_funcs.partitioning_iceberg_bucket"]], "partitioning_iceberg_truncate() (in module daft.sql._sql_funcs)": [[304, "daft.sql._sql_funcs.partitioning_iceberg_truncate"]], "partitioning_months() (in module daft.sql._sql_funcs)": [[305, "daft.sql._sql_funcs.partitioning_months"]], "partitioning_years() (in module daft.sql._sql_funcs)": [[306, "daft.sql._sql_funcs.partitioning_years"]], "radians() (in module daft.sql._sql_funcs)": [[307, "daft.sql._sql_funcs.radians"]], "regexp_extract() (in module daft.sql._sql_funcs)": [[308, "daft.sql._sql_funcs.regexp_extract"]], "regexp_extract_all() (in module daft.sql._sql_funcs)": [[309, "daft.sql._sql_funcs.regexp_extract_all"]], "regexp_match() (in module daft.sql._sql_funcs)": [[310, "daft.sql._sql_funcs.regexp_match"]], "regexp_replace() (in module daft.sql._sql_funcs)": [[311, "daft.sql._sql_funcs.regexp_replace"]], "regexp_split() (in module daft.sql._sql_funcs)": [[312, "daft.sql._sql_funcs.regexp_split"]], "repeat() (in module daft.sql._sql_funcs)": [[313, "daft.sql._sql_funcs.repeat"]], "reverse() (in module daft.sql._sql_funcs)": [[314, "daft.sql._sql_funcs.reverse"]], "right() (in module daft.sql._sql_funcs)": [[315, "daft.sql._sql_funcs.right"]], "round() (in module daft.sql._sql_funcs)": [[316, "daft.sql._sql_funcs.round"]], "rpad() (in module daft.sql._sql_funcs)": [[317, "daft.sql._sql_funcs.rpad"]], "rstrip() (in module daft.sql._sql_funcs)": [[318, "daft.sql._sql_funcs.rstrip"]], "second() (in module daft.sql._sql_funcs)": [[319, "daft.sql._sql_funcs.second"]], "sign() (in module daft.sql._sql_funcs)": [[320, "daft.sql._sql_funcs.sign"]], "sin() (in module daft.sql._sql_funcs)": [[321, "daft.sql._sql_funcs.sin"]], "split() (in module daft.sql._sql_funcs)": [[322, "daft.sql._sql_funcs.split"]], "sqrt() (in module daft.sql._sql_funcs)": [[323, "daft.sql._sql_funcs.sqrt"]], "starts_with() (in module daft.sql._sql_funcs)": [[324, "daft.sql._sql_funcs.starts_with"]], "stddev() (in module daft.sql._sql_funcs)": [[325, "daft.sql._sql_funcs.stddev"]], "stddev_samp() (in module daft.sql._sql_funcs)": [[326, "daft.sql._sql_funcs.stddev_samp"]], "struct_extract() (in module daft.sql._sql_funcs)": [[327, "daft.sql._sql_funcs.struct_extract"]], "struct_get() (in module daft.sql._sql_funcs)": [[328, "daft.sql._sql_funcs.struct_get"]], "sum() (in module daft.sql._sql_funcs)": [[329, "daft.sql._sql_funcs.sum"]], "tan() (in module daft.sql._sql_funcs)": [[330, "daft.sql._sql_funcs.tan"]], "time() (in module daft.sql._sql_funcs)": [[331, "daft.sql._sql_funcs.time"]], "to_date() (in module daft.sql._sql_funcs)": [[332, "daft.sql._sql_funcs.to_date"]], "to_datetime() (in module daft.sql._sql_funcs)": [[333, "daft.sql._sql_funcs.to_datetime"]], "tokenize_decode() (in module daft.sql._sql_funcs)": [[334, "daft.sql._sql_funcs.tokenize_decode"]], "tokenize_encode() (in module daft.sql._sql_funcs)": [[335, "daft.sql._sql_funcs.tokenize_encode"]], "unnest() (in module daft.sql._sql_funcs)": [[336, "daft.sql._sql_funcs.unnest"]], "upper() (in module daft.sql._sql_funcs)": [[337, "daft.sql._sql_funcs.upper"]], "url_download() (in module daft.sql._sql_funcs)": [[338, "daft.sql._sql_funcs.url_download"]], "url_upload() (in module daft.sql._sql_funcs)": [[339, "daft.sql._sql_funcs.url_upload"]], "year() (in module daft.sql._sql_funcs)": [[340, "daft.sql._sql_funcs.year"]], "groupeddataframe (class in daft.dataframe)": [[342, "daft.dataframe.GroupedDataFrame"]], "agg() (groupeddataframe method)": [[342, "daft.dataframe.GroupedDataFrame.agg"]], "agg_concat() (groupeddataframe method)": [[342, "daft.dataframe.GroupedDataFrame.agg_concat"]], "agg_list() (groupeddataframe method)": [[342, "daft.dataframe.GroupedDataFrame.agg_list"]], "any_value() (groupeddataframe method)": [[342, "daft.dataframe.GroupedDataFrame.any_value"]], "count() (groupeddataframe method)": [[342, "daft.dataframe.GroupedDataFrame.count"]], "map_groups() (groupeddataframe method)": [[342, "daft.dataframe.GroupedDataFrame.map_groups"]], "max() (groupeddataframe method)": [[342, "daft.dataframe.GroupedDataFrame.max"]], "mean() (groupeddataframe method)": [[342, "daft.dataframe.GroupedDataFrame.mean"]], "min() (groupeddataframe method)": [[342, "daft.dataframe.GroupedDataFrame.min"]], "stddev() (groupeddataframe method)": [[342, "daft.dataframe.GroupedDataFrame.stddev"]], "sum() (groupeddataframe method)": [[342, "daft.dataframe.GroupedDataFrame.sum"]], "schema (class in daft)": [[345, "daft.Schema"]], "from_pyarrow_schema() (schema class method)": [[345, "daft.Schema.from_pyarrow_schema"]], "to_pyarrow_schema() (schema method)": [[345, "daft.Schema.to_pyarrow_schema"]], "series (class in daft)": [[346, "daft.Series"]], "arccos() (series method)": [[346, "daft.Series.arccos"]], "arccosh() (series method)": [[346, "daft.Series.arccosh"]], "arcsin() (series method)": [[346, "daft.Series.arcsin"]], "arcsinh() (series method)": [[346, "daft.Series.arcsinh"]], "arctan() (series method)": [[346, "daft.Series.arctan"]], "arctan2() (series method)": [[346, "daft.Series.arctan2"]], "arctanh() (series method)": [[346, "daft.Series.arctanh"]], "cos() (series method)": [[346, "daft.Series.cos"]], "cot() (series method)": [[346, "daft.Series.cot"]], "degrees() (series method)": [[346, "daft.Series.degrees"]], "exp() (series method)": [[346, "daft.Series.exp"]], "from_arrow() (series static method)": [[346, "daft.Series.from_arrow"]], "from_numpy() (series class method)": [[346, "daft.Series.from_numpy"]], "from_pandas() (series class method)": [[346, "daft.Series.from_pandas"]], "from_pylist() (series static method)": [[346, "daft.Series.from_pylist"]], "ln() (series method)": [[346, "daft.Series.ln"]], "log() (series method)": [[346, "daft.Series.log"]], "log10() (series method)": [[346, "daft.Series.log10"]], "log2() (series method)": [[346, "daft.Series.log2"]], "minhash() (series method)": [[346, "daft.Series.minhash"]], "radians() (series method)": [[346, "daft.Series.radians"]], "sin() (series method)": [[346, "daft.Series.sin"]], "size_bytes() (series method)": [[346, "daft.Series.size_bytes"]], "tan() (series method)": [[346, "daft.Series.tan"]], "to_arrow() (series method)": [[346, "daft.Series.to_arrow"]], "to_pylist() (series method)": [[346, "daft.Series.to_pylist"]], "sql() (in module daft)": [[347, "daft.sql"]], "sql_expr() (in module daft)": [[347, "daft.sql_expr"]], "udf (class in daft.udf)": [[348, "daft.udf.UDF"]], "__call__() (udf method)": [[348, "daft.udf.UDF.__call__"]], "override_options() (udf method)": [[348, "daft.udf.UDF.override_options"]], "udf() (in module daft)": [[348, "daft.udf"]], "with_concurrency() (udf method)": [[348, "daft.udf.UDF.with_concurrency"]], "with_init_args() (udf method)": [[348, "daft.udf.UDF.with_init_args"]]}})